// ignore_for_file: camel_case_types, non_constant_identifier_names, constant_identifier_names, unused_field
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// FFI bindings to miniaudio library
class MiniAudioBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MiniAudioBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MiniAudioBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Retrieves the version of miniaudio as separated integers. Each component can be NULL if it's not required.
  void ma_version(
    ffi.Pointer<ma_uint32> pMajor,
    ffi.Pointer<ma_uint32> pMinor,
    ffi.Pointer<ma_uint32> pRevision,
  ) {
    return _ma_version(
      pMajor,
      pMinor,
      pRevision,
    );
  }

  late final _ma_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint32>, ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>)>>('ma_version');
  late final _ma_version = _ma_versionPtr.asFunction<
      void Function(ffi.Pointer<ma_uint32>, ffi.Pointer<ma_uint32>,
          ffi.Pointer<ma_uint32>)>();

  /// Retrieves the version of miniaudio as a string which can be useful for logging purposes.
  ffi.Pointer<ffi.Char> ma_version_string() {
    return _ma_version_string();
  }

  late final _ma_version_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ma_version_string');
  late final _ma_version_string =
      _ma_version_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ma_log_callback ma_log_callback_init(
    ma_log_callback_proc onLog,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _ma_log_callback_init(
      onLog,
      pUserData,
    );
  }

  late final _ma_log_callback_initPtr = _lookup<
      ffi.NativeFunction<
          ma_log_callback Function(ma_log_callback_proc,
              ffi.Pointer<ffi.Void>)>>('ma_log_callback_init');
  late final _ma_log_callback_init = _ma_log_callback_initPtr.asFunction<
      ma_log_callback Function(ma_log_callback_proc, ffi.Pointer<ffi.Void>)>();

  int ma_log_init(
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_log> pLog,
  ) {
    return _ma_log_init(
      pAllocationCallbacks,
      pLog,
    );
  }

  late final _ma_log_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_log>)>>('ma_log_init');
  late final _ma_log_init = _ma_log_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_log>)>();

  void ma_log_uninit(
    ffi.Pointer<ma_log> pLog,
  ) {
    return _ma_log_uninit(
      pLog,
    );
  }

  late final _ma_log_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_log>)>>(
          'ma_log_uninit');
  late final _ma_log_uninit =
      _ma_log_uninitPtr.asFunction<void Function(ffi.Pointer<ma_log>)>();

  int ma_log_register_callback(
    ffi.Pointer<ma_log> pLog,
    ma_log_callback callback,
  ) {
    return _ma_log_register_callback(
      pLog,
      callback,
    );
  }

  late final _ma_log_register_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_log>,
              ma_log_callback)>>('ma_log_register_callback');
  late final _ma_log_register_callback = _ma_log_register_callbackPtr
      .asFunction<int Function(ffi.Pointer<ma_log>, ma_log_callback)>();

  int ma_log_unregister_callback(
    ffi.Pointer<ma_log> pLog,
    ma_log_callback callback,
  ) {
    return _ma_log_unregister_callback(
      pLog,
      callback,
    );
  }

  late final _ma_log_unregister_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_log>,
              ma_log_callback)>>('ma_log_unregister_callback');
  late final _ma_log_unregister_callback = _ma_log_unregister_callbackPtr
      .asFunction<int Function(ffi.Pointer<ma_log>, ma_log_callback)>();

  int ma_log_post(
    ffi.Pointer<ma_log> pLog,
    int level,
    ffi.Pointer<ffi.Char> pMessage,
  ) {
    return _ma_log_post(
      pLog,
      level,
      pMessage,
    );
  }

  late final _ma_log_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_log>, ma_uint32,
              ffi.Pointer<ffi.Char>)>>('ma_log_post');
  late final _ma_log_post = _ma_log_postPtr.asFunction<
      int Function(ffi.Pointer<ma_log>, int, ffi.Pointer<ffi.Char>)>();

  int ma_log_postv(
    ffi.Pointer<ma_log> pLog,
    int level,
    ffi.Pointer<ffi.Char> pFormat,
    va_list args,
  ) {
    return _ma_log_postv(
      pLog,
      level,
      pFormat,
      args,
    );
  }

  late final _ma_log_postvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_log>, ma_uint32,
              ffi.Pointer<ffi.Char>, va_list)>>('ma_log_postv');
  late final _ma_log_postv = _ma_log_postvPtr.asFunction<
      int Function(ffi.Pointer<ma_log>, int, ffi.Pointer<ffi.Char>, va_list)>();

  int ma_log_postf(
    ffi.Pointer<ma_log> pLog,
    int level,
    ffi.Pointer<ffi.Char> pFormat,
  ) {
    return _ma_log_postf(
      pLog,
      level,
      pFormat,
    );
  }

  late final _ma_log_postfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_log>, ma_uint32,
              ffi.Pointer<ffi.Char>)>>('ma_log_postf');
  late final _ma_log_postf = _ma_log_postfPtr.asFunction<
      int Function(ffi.Pointer<ma_log>, int, ffi.Pointer<ffi.Char>)>();

  ma_biquad_config ma_biquad_config_init(
    int format,
    int channels,
    double b0,
    double b1,
    double b2,
    double a0,
    double a1,
    double a2,
  ) {
    return _ma_biquad_config_init(
      format,
      channels,
      b0,
      b1,
      b2,
      a0,
      a1,
      a2,
    );
  }

  late final _ma_biquad_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_biquad_config Function(
              ffi.Int32,
              ma_uint32,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('ma_biquad_config_init');
  late final _ma_biquad_config_init = _ma_biquad_config_initPtr.asFunction<
      ma_biquad_config Function(
          int, int, double, double, double, double, double, double)>();

  int ma_biquad_get_heap_size(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_biquad_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_biquad_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ffi.Size>)>>('ma_biquad_get_heap_size');
  late final _ma_biquad_get_heap_size = _ma_biquad_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_biquad_config>, ffi.Pointer<ffi.Size>)>();

  int ma_biquad_init_preallocated(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_init_preallocated(
      pConfig,
      pHeap,
      pBQ,
    );
  }

  late final _ma_biquad_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_biquad>)>>('ma_biquad_init_preallocated');
  late final _ma_biquad_init_preallocated =
      _ma_biquad_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_biquad_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_biquad>)>();

  int ma_biquad_init(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_init(
      pConfig,
      pAllocationCallbacks,
      pBQ,
    );
  }

  late final _ma_biquad_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_biquad>)>>('ma_biquad_init');
  late final _ma_biquad_init = _ma_biquad_initPtr.asFunction<
      int Function(ffi.Pointer<ma_biquad_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_biquad>)>();

  void ma_biquad_uninit(
    ffi.Pointer<ma_biquad> pBQ,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_biquad_uninit(
      pBQ,
      pAllocationCallbacks,
    );
  }

  late final _ma_biquad_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_biquad>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_biquad_uninit');
  late final _ma_biquad_uninit = _ma_biquad_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_biquad>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_biquad_reinit(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_reinit(
      pConfig,
      pBQ,
    );
  }

  late final _ma_biquad_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ma_biquad>)>>('ma_biquad_reinit');
  late final _ma_biquad_reinit = _ma_biquad_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_biquad_config>, ffi.Pointer<ma_biquad>)>();

  int ma_biquad_clear_cache(
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_clear_cache(
      pBQ,
    );
  }

  late final _ma_biquad_clear_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_biquad>)>>(
          'ma_biquad_clear_cache');
  late final _ma_biquad_clear_cache = _ma_biquad_clear_cachePtr
      .asFunction<int Function(ffi.Pointer<ma_biquad>)>();

  int ma_biquad_process_pcm_frames(
    ffi.Pointer<ma_biquad> pBQ,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_biquad_process_pcm_frames(
      pBQ,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_biquad_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_biquad>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_biquad_process_pcm_frames');
  late final _ma_biquad_process_pcm_frames =
      _ma_biquad_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_biquad>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_biquad_get_latency(
    ffi.Pointer<ma_biquad> pBQ,
  ) {
    return _ma_biquad_get_latency(
      pBQ,
    );
  }

  late final _ma_biquad_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_biquad>)>>(
          'ma_biquad_get_latency');
  late final _ma_biquad_get_latency = _ma_biquad_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_biquad>)>();

  ma_lpf1_config ma_lpf1_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
  ) {
    return _ma_lpf1_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
    );
  }

  late final _ma_lpf1_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_lpf1_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double)>>('ma_lpf1_config_init');
  late final _ma_lpf1_config_init = _ma_lpf1_config_initPtr
      .asFunction<ma_lpf1_config Function(int, int, int, double)>();

  ma_lpf2_config ma_lpf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    double q,
  ) {
    return _ma_lpf2_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      q,
    );
  }

  late final _ma_lpf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_lpf2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_lpf2_config_init');
  late final _ma_lpf2_config_init = _ma_lpf2_config_initPtr
      .asFunction<ma_lpf2_config Function(int, int, int, double, double)>();

  int ma_lpf1_get_heap_size(
    ffi.Pointer<ma_lpf1_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_lpf1_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_lpf1_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf1_config>,
              ffi.Pointer<ffi.Size>)>>('ma_lpf1_get_heap_size');
  late final _ma_lpf1_get_heap_size = _ma_lpf1_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ffi.Size>)>();

  int ma_lpf1_init_preallocated(
    ffi.Pointer<ma_lpf1_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_init_preallocated(
      pConfig,
      pHeap,
      pLPF,
    );
  }

  late final _ma_lpf1_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf1>)>>('ma_lpf1_init_preallocated');
  late final _ma_lpf1_init_preallocated =
      _ma_lpf1_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf1>)>();

  int ma_lpf1_init(
    ffi.Pointer<ma_lpf1_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_init(
      pConfig,
      pAllocationCallbacks,
      pLPF,
    );
  }

  late final _ma_lpf1_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_lpf1_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_lpf1>)>>('ma_lpf1_init');
  late final _ma_lpf1_init = _ma_lpf1_initPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf1_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_lpf1>)>();

  void ma_lpf1_uninit(
    ffi.Pointer<ma_lpf1> pLPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_lpf1_uninit(
      pLPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_lpf1_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_lpf1>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_lpf1_uninit');
  late final _ma_lpf1_uninit = _ma_lpf1_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_lpf1>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_lpf1_reinit(
    ffi.Pointer<ma_lpf1_config> pConfig,
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_reinit(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf1_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf1_config>,
              ffi.Pointer<ma_lpf1>)>>('ma_lpf1_reinit');
  late final _ma_lpf1_reinit = _ma_lpf1_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ma_lpf1>)>();

  int ma_lpf1_clear_cache(
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_clear_cache(
      pLPF,
    );
  }

  late final _ma_lpf1_clear_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_lpf1>)>>(
          'ma_lpf1_clear_cache');
  late final _ma_lpf1_clear_cache =
      _ma_lpf1_clear_cachePtr.asFunction<int Function(ffi.Pointer<ma_lpf1>)>();

  int ma_lpf1_process_pcm_frames(
    ffi.Pointer<ma_lpf1> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_lpf1_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_lpf1_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf1>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_lpf1_process_pcm_frames');
  late final _ma_lpf1_process_pcm_frames =
      _ma_lpf1_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf1>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_lpf1_get_latency(
    ffi.Pointer<ma_lpf1> pLPF,
  ) {
    return _ma_lpf1_get_latency(
      pLPF,
    );
  }

  late final _ma_lpf1_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_lpf1>)>>(
          'ma_lpf1_get_latency');
  late final _ma_lpf1_get_latency =
      _ma_lpf1_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_lpf1>)>();

  int ma_lpf2_get_heap_size(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_lpf2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_lpf2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_lpf2_get_heap_size');
  late final _ma_lpf2_get_heap_size = _ma_lpf2_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ffi.Size>)>();

  int ma_lpf2_init_preallocated(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_lpf2> pHPF,
  ) {
    return _ma_lpf2_init_preallocated(
      pConfig,
      pHeap,
      pHPF,
    );
  }

  late final _ma_lpf2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf2>)>>('ma_lpf2_init_preallocated');
  late final _ma_lpf2_init_preallocated =
      _ma_lpf2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf2>)>();

  int ma_lpf2_init(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_init(
      pConfig,
      pAllocationCallbacks,
      pLPF,
    );
  }

  late final _ma_lpf2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_lpf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_lpf2>)>>('ma_lpf2_init');
  late final _ma_lpf2_init = _ma_lpf2_initPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf2_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_lpf2>)>();

  void ma_lpf2_uninit(
    ffi.Pointer<ma_lpf2> pLPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_lpf2_uninit(
      pLPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_lpf2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_lpf2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_lpf2_uninit');
  late final _ma_lpf2_uninit = _ma_lpf2_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_lpf2>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_lpf2_reinit(
    ffi.Pointer<ma_lpf2_config> pConfig,
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_reinit(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf2_config>,
              ffi.Pointer<ma_lpf2>)>>('ma_lpf2_reinit');
  late final _ma_lpf2_reinit = _ma_lpf2_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ma_lpf2>)>();

  int ma_lpf2_clear_cache(
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_clear_cache(
      pLPF,
    );
  }

  late final _ma_lpf2_clear_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_lpf2>)>>(
          'ma_lpf2_clear_cache');
  late final _ma_lpf2_clear_cache =
      _ma_lpf2_clear_cachePtr.asFunction<int Function(ffi.Pointer<ma_lpf2>)>();

  int ma_lpf2_process_pcm_frames(
    ffi.Pointer<ma_lpf2> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_lpf2_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_lpf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_lpf2_process_pcm_frames');
  late final _ma_lpf2_process_pcm_frames =
      _ma_lpf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_lpf2_get_latency(
    ffi.Pointer<ma_lpf2> pLPF,
  ) {
    return _ma_lpf2_get_latency(
      pLPF,
    );
  }

  late final _ma_lpf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_lpf2>)>>(
          'ma_lpf2_get_latency');
  late final _ma_lpf2_get_latency =
      _ma_lpf2_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_lpf2>)>();

  ma_lpf_config ma_lpf_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_lpf_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_lpf_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_lpf_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_lpf_config_init');
  late final _ma_lpf_config_init = _ma_lpf_config_initPtr
      .asFunction<ma_lpf_config Function(int, int, int, double, int)>();

  int ma_lpf_get_heap_size(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_lpf_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_lpf_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf_config>,
              ffi.Pointer<ffi.Size>)>>('ma_lpf_get_heap_size');
  late final _ma_lpf_get_heap_size = _ma_lpf_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_lpf_config>, ffi.Pointer<ffi.Size>)>();

  int ma_lpf_init_preallocated(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_init_preallocated(
      pConfig,
      pHeap,
      pLPF,
    );
  }

  late final _ma_lpf_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf>)>>('ma_lpf_init_preallocated');
  late final _ma_lpf_init_preallocated =
      _ma_lpf_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf>)>();

  int ma_lpf_init(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_init(
      pConfig,
      pAllocationCallbacks,
      pLPF,
    );
  }

  late final _ma_lpf_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_lpf_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_lpf>)>>('ma_lpf_init');
  late final _ma_lpf_init = _ma_lpf_initPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_lpf>)>();

  void ma_lpf_uninit(
    ffi.Pointer<ma_lpf> pLPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_lpf_uninit(
      pLPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_lpf_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_lpf>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_lpf_uninit');
  late final _ma_lpf_uninit = _ma_lpf_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_lpf>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_lpf_reinit(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_reinit(
      pConfig,
      pLPF,
    );
  }

  late final _ma_lpf_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf_config>,
              ffi.Pointer<ma_lpf>)>>('ma_lpf_reinit');
  late final _ma_lpf_reinit = _ma_lpf_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf_config>, ffi.Pointer<ma_lpf>)>();

  int ma_lpf_clear_cache(
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_clear_cache(
      pLPF,
    );
  }

  late final _ma_lpf_clear_cachePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_lpf>)>>(
          'ma_lpf_clear_cache');
  late final _ma_lpf_clear_cache =
      _ma_lpf_clear_cachePtr.asFunction<int Function(ffi.Pointer<ma_lpf>)>();

  int ma_lpf_process_pcm_frames(
    ffi.Pointer<ma_lpf> pLPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_lpf_process_pcm_frames(
      pLPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_lpf_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_lpf_process_pcm_frames');
  late final _ma_lpf_process_pcm_frames =
      _ma_lpf_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_lpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_lpf_get_latency(
    ffi.Pointer<ma_lpf> pLPF,
  ) {
    return _ma_lpf_get_latency(
      pLPF,
    );
  }

  late final _ma_lpf_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_lpf>)>>(
          'ma_lpf_get_latency');
  late final _ma_lpf_get_latency =
      _ma_lpf_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_lpf>)>();

  ma_hpf1_config ma_hpf1_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
  ) {
    return _ma_hpf1_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
    );
  }

  late final _ma_hpf1_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hpf1_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double)>>('ma_hpf1_config_init');
  late final _ma_hpf1_config_init = _ma_hpf1_config_initPtr
      .asFunction<ma_hpf1_config Function(int, int, int, double)>();

  ma_hpf2_config ma_hpf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    double q,
  ) {
    return _ma_hpf2_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      q,
    );
  }

  late final _ma_hpf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hpf2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_hpf2_config_init');
  late final _ma_hpf2_config_init = _ma_hpf2_config_initPtr
      .asFunction<ma_hpf2_config Function(int, int, int, double, double)>();

  int ma_hpf1_get_heap_size(
    ffi.Pointer<ma_hpf1_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_hpf1_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_hpf1_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf1_config>,
              ffi.Pointer<ffi.Size>)>>('ma_hpf1_get_heap_size');
  late final _ma_hpf1_get_heap_size = _ma_hpf1_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ffi.Size>)>();

  int ma_hpf1_init_preallocated(
    ffi.Pointer<ma_hpf1_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_hpf1> pLPF,
  ) {
    return _ma_hpf1_init_preallocated(
      pConfig,
      pHeap,
      pLPF,
    );
  }

  late final _ma_hpf1_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf1>)>>('ma_hpf1_init_preallocated');
  late final _ma_hpf1_init_preallocated =
      _ma_hpf1_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf1>)>();

  int ma_hpf1_init(
    ffi.Pointer<ma_hpf1_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    return _ma_hpf1_init(
      pConfig,
      pAllocationCallbacks,
      pHPF,
    );
  }

  late final _ma_hpf1_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hpf1_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hpf1>)>>('ma_hpf1_init');
  late final _ma_hpf1_init = _ma_hpf1_initPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf1_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_hpf1>)>();

  void ma_hpf1_uninit(
    ffi.Pointer<ma_hpf1> pHPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_hpf1_uninit(
      pHPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_hpf1_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hpf1>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_hpf1_uninit');
  late final _ma_hpf1_uninit = _ma_hpf1_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_hpf1>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_hpf1_reinit(
    ffi.Pointer<ma_hpf1_config> pConfig,
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    return _ma_hpf1_reinit(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf1_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf1_config>,
              ffi.Pointer<ma_hpf1>)>>('ma_hpf1_reinit');
  late final _ma_hpf1_reinit = _ma_hpf1_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ma_hpf1>)>();

  int ma_hpf1_process_pcm_frames(
    ffi.Pointer<ma_hpf1> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hpf1_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hpf1_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf1>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_hpf1_process_pcm_frames');
  late final _ma_hpf1_process_pcm_frames =
      _ma_hpf1_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf1>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_hpf1_get_latency(
    ffi.Pointer<ma_hpf1> pHPF,
  ) {
    return _ma_hpf1_get_latency(
      pHPF,
    );
  }

  late final _ma_hpf1_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hpf1>)>>(
          'ma_hpf1_get_latency');
  late final _ma_hpf1_get_latency =
      _ma_hpf1_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_hpf1>)>();

  int ma_hpf2_get_heap_size(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_hpf2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_hpf2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_hpf2_get_heap_size');
  late final _ma_hpf2_get_heap_size = _ma_hpf2_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ffi.Size>)>();

  int ma_hpf2_init_preallocated(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_init_preallocated(
      pConfig,
      pHeap,
      pHPF,
    );
  }

  late final _ma_hpf2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf2>)>>('ma_hpf2_init_preallocated');
  late final _ma_hpf2_init_preallocated =
      _ma_hpf2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf2>)>();

  int ma_hpf2_init(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_init(
      pConfig,
      pAllocationCallbacks,
      pHPF,
    );
  }

  late final _ma_hpf2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hpf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hpf2>)>>('ma_hpf2_init');
  late final _ma_hpf2_init = _ma_hpf2_initPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf2_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_hpf2>)>();

  void ma_hpf2_uninit(
    ffi.Pointer<ma_hpf2> pHPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_hpf2_uninit(
      pHPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_hpf2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hpf2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_hpf2_uninit');
  late final _ma_hpf2_uninit = _ma_hpf2_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_hpf2>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_hpf2_reinit(
    ffi.Pointer<ma_hpf2_config> pConfig,
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_reinit(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf2_config>,
              ffi.Pointer<ma_hpf2>)>>('ma_hpf2_reinit');
  late final _ma_hpf2_reinit = _ma_hpf2_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ma_hpf2>)>();

  int ma_hpf2_process_pcm_frames(
    ffi.Pointer<ma_hpf2> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hpf2_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hpf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_hpf2_process_pcm_frames');
  late final _ma_hpf2_process_pcm_frames =
      _ma_hpf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_hpf2_get_latency(
    ffi.Pointer<ma_hpf2> pHPF,
  ) {
    return _ma_hpf2_get_latency(
      pHPF,
    );
  }

  late final _ma_hpf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hpf2>)>>(
          'ma_hpf2_get_latency');
  late final _ma_hpf2_get_latency =
      _ma_hpf2_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_hpf2>)>();

  ma_hpf_config ma_hpf_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_hpf_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_hpf_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hpf_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_hpf_config_init');
  late final _ma_hpf_config_init = _ma_hpf_config_initPtr
      .asFunction<ma_hpf_config Function(int, int, int, double, int)>();

  int ma_hpf_get_heap_size(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_hpf_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_hpf_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf_config>,
              ffi.Pointer<ffi.Size>)>>('ma_hpf_get_heap_size');
  late final _ma_hpf_get_heap_size = _ma_hpf_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_hpf_config>, ffi.Pointer<ffi.Size>)>();

  int ma_hpf_init_preallocated(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_hpf> pLPF,
  ) {
    return _ma_hpf_init_preallocated(
      pConfig,
      pHeap,
      pLPF,
    );
  }

  late final _ma_hpf_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf>)>>('ma_hpf_init_preallocated');
  late final _ma_hpf_init_preallocated =
      _ma_hpf_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf>)>();

  int ma_hpf_init(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    return _ma_hpf_init(
      pConfig,
      pAllocationCallbacks,
      pHPF,
    );
  }

  late final _ma_hpf_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hpf_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hpf>)>>('ma_hpf_init');
  late final _ma_hpf_init = _ma_hpf_initPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_hpf>)>();

  void ma_hpf_uninit(
    ffi.Pointer<ma_hpf> pHPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_hpf_uninit(
      pHPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_hpf_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hpf>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_hpf_uninit');
  late final _ma_hpf_uninit = _ma_hpf_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_hpf>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_hpf_reinit(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    return _ma_hpf_reinit(
      pConfig,
      pHPF,
    );
  }

  late final _ma_hpf_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf_config>,
              ffi.Pointer<ma_hpf>)>>('ma_hpf_reinit');
  late final _ma_hpf_reinit = _ma_hpf_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf_config>, ffi.Pointer<ma_hpf>)>();

  int ma_hpf_process_pcm_frames(
    ffi.Pointer<ma_hpf> pHPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hpf_process_pcm_frames(
      pHPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hpf_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_hpf_process_pcm_frames');
  late final _ma_hpf_process_pcm_frames =
      _ma_hpf_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_hpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_hpf_get_latency(
    ffi.Pointer<ma_hpf> pHPF,
  ) {
    return _ma_hpf_get_latency(
      pHPF,
    );
  }

  late final _ma_hpf_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hpf>)>>(
          'ma_hpf_get_latency');
  late final _ma_hpf_get_latency =
      _ma_hpf_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_hpf>)>();

  ma_bpf2_config ma_bpf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    double q,
  ) {
    return _ma_bpf2_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      q,
    );
  }

  late final _ma_bpf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_bpf2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_bpf2_config_init');
  late final _ma_bpf2_config_init = _ma_bpf2_config_initPtr
      .asFunction<ma_bpf2_config Function(int, int, int, double, double)>();

  int ma_bpf2_get_heap_size(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_bpf2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_bpf2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_bpf2_get_heap_size');
  late final _ma_bpf2_get_heap_size = _ma_bpf2_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ffi.Size>)>();

  int ma_bpf2_init_preallocated(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_init_preallocated(
      pConfig,
      pHeap,
      pBPF,
    );
  }

  late final _ma_bpf2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_bpf2>)>>('ma_bpf2_init_preallocated');
  late final _ma_bpf2_init_preallocated =
      _ma_bpf2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_bpf2>)>();

  int ma_bpf2_init(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_init(
      pConfig,
      pAllocationCallbacks,
      pBPF,
    );
  }

  late final _ma_bpf2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_bpf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_bpf2>)>>('ma_bpf2_init');
  late final _ma_bpf2_init = _ma_bpf2_initPtr.asFunction<
      int Function(ffi.Pointer<ma_bpf2_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_bpf2>)>();

  void ma_bpf2_uninit(
    ffi.Pointer<ma_bpf2> pBPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_bpf2_uninit(
      pBPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_bpf2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_bpf2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_bpf2_uninit');
  late final _ma_bpf2_uninit = _ma_bpf2_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_bpf2>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_bpf2_reinit(
    ffi.Pointer<ma_bpf2_config> pConfig,
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_reinit(
      pConfig,
      pBPF,
    );
  }

  late final _ma_bpf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf2_config>,
              ffi.Pointer<ma_bpf2>)>>('ma_bpf2_reinit');
  late final _ma_bpf2_reinit = _ma_bpf2_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ma_bpf2>)>();

  int ma_bpf2_process_pcm_frames(
    ffi.Pointer<ma_bpf2> pBPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_bpf2_process_pcm_frames(
      pBPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_bpf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_bpf2_process_pcm_frames');
  late final _ma_bpf2_process_pcm_frames =
      _ma_bpf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_bpf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_bpf2_get_latency(
    ffi.Pointer<ma_bpf2> pBPF,
  ) {
    return _ma_bpf2_get_latency(
      pBPF,
    );
  }

  late final _ma_bpf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_bpf2>)>>(
          'ma_bpf2_get_latency');
  late final _ma_bpf2_get_latency =
      _ma_bpf2_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_bpf2>)>();

  ma_bpf_config ma_bpf_config_init(
    int format,
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_bpf_config_init(
      format,
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_bpf_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_bpf_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_bpf_config_init');
  late final _ma_bpf_config_init = _ma_bpf_config_initPtr
      .asFunction<ma_bpf_config Function(int, int, int, double, int)>();

  int ma_bpf_get_heap_size(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_bpf_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_bpf_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf_config>,
              ffi.Pointer<ffi.Size>)>>('ma_bpf_get_heap_size');
  late final _ma_bpf_get_heap_size = _ma_bpf_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_bpf_config>, ffi.Pointer<ffi.Size>)>();

  int ma_bpf_init_preallocated(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_init_preallocated(
      pConfig,
      pHeap,
      pBPF,
    );
  }

  late final _ma_bpf_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_bpf>)>>('ma_bpf_init_preallocated');
  late final _ma_bpf_init_preallocated =
      _ma_bpf_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_bpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_bpf>)>();

  int ma_bpf_init(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_init(
      pConfig,
      pAllocationCallbacks,
      pBPF,
    );
  }

  late final _ma_bpf_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_bpf_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_bpf>)>>('ma_bpf_init');
  late final _ma_bpf_init = _ma_bpf_initPtr.asFunction<
      int Function(ffi.Pointer<ma_bpf_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_bpf>)>();

  void ma_bpf_uninit(
    ffi.Pointer<ma_bpf> pBPF,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_bpf_uninit(
      pBPF,
      pAllocationCallbacks,
    );
  }

  late final _ma_bpf_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_bpf>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_bpf_uninit');
  late final _ma_bpf_uninit = _ma_bpf_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_bpf>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_bpf_reinit(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_reinit(
      pConfig,
      pBPF,
    );
  }

  late final _ma_bpf_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf_config>,
              ffi.Pointer<ma_bpf>)>>('ma_bpf_reinit');
  late final _ma_bpf_reinit = _ma_bpf_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_bpf_config>, ffi.Pointer<ma_bpf>)>();

  int ma_bpf_process_pcm_frames(
    ffi.Pointer<ma_bpf> pBPF,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_bpf_process_pcm_frames(
      pBPF,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_bpf_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ma_uint64)>>('ma_bpf_process_pcm_frames');
  late final _ma_bpf_process_pcm_frames =
      _ma_bpf_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_bpf>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_bpf_get_latency(
    ffi.Pointer<ma_bpf> pBPF,
  ) {
    return _ma_bpf_get_latency(
      pBPF,
    );
  }

  late final _ma_bpf_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_bpf>)>>(
          'ma_bpf_get_latency');
  late final _ma_bpf_get_latency =
      _ma_bpf_get_latencyPtr.asFunction<int Function(ffi.Pointer<ma_bpf>)>();

  ma_notch2_config ma_notch2_config_init(
    int format,
    int channels,
    int sampleRate,
    double q,
    double frequency,
  ) {
    return _ma_notch2_config_init(
      format,
      channels,
      sampleRate,
      q,
      frequency,
    );
  }

  late final _ma_notch2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_notch2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_notch2_config_init');
  late final _ma_notch2_config_init = _ma_notch2_config_initPtr
      .asFunction<ma_notch2_config Function(int, int, int, double, double)>();

  int ma_notch2_get_heap_size(
    ffi.Pointer<ma_notch2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_notch2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_notch2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_notch2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_notch2_get_heap_size');
  late final _ma_notch2_get_heap_size = _ma_notch2_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_notch2_config>, ffi.Pointer<ffi.Size>)>();

  int ma_notch2_init_preallocated(
    ffi.Pointer<ma_notch2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_init_preallocated(
      pConfig,
      pHeap,
      pFilter,
    );
  }

  late final _ma_notch2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_notch2_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_notch2>)>>('ma_notch2_init_preallocated');
  late final _ma_notch2_init_preallocated =
      _ma_notch2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_notch2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_notch2>)>();

  int ma_notch2_init(
    ffi.Pointer<ma_notch2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_init(
      pConfig,
      pAllocationCallbacks,
      pFilter,
    );
  }

  late final _ma_notch2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_notch2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_notch2>)>>('ma_notch2_init');
  late final _ma_notch2_init = _ma_notch2_initPtr.asFunction<
      int Function(ffi.Pointer<ma_notch2_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_notch2>)>();

  void ma_notch2_uninit(
    ffi.Pointer<ma_notch2> pFilter,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_notch2_uninit(
      pFilter,
      pAllocationCallbacks,
    );
  }

  late final _ma_notch2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_notch2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_notch2_uninit');
  late final _ma_notch2_uninit = _ma_notch2_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_notch2>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_notch2_reinit(
    ffi.Pointer<ma_notch2_config> pConfig,
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_notch2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_notch2_config>,
              ffi.Pointer<ma_notch2>)>>('ma_notch2_reinit');
  late final _ma_notch2_reinit = _ma_notch2_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_notch2_config>, ffi.Pointer<ma_notch2>)>();

  int ma_notch2_process_pcm_frames(
    ffi.Pointer<ma_notch2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_notch2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_notch2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_notch2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_notch2_process_pcm_frames');
  late final _ma_notch2_process_pcm_frames =
      _ma_notch2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_notch2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_notch2_get_latency(
    ffi.Pointer<ma_notch2> pFilter,
  ) {
    return _ma_notch2_get_latency(
      pFilter,
    );
  }

  late final _ma_notch2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_notch2>)>>(
          'ma_notch2_get_latency');
  late final _ma_notch2_get_latency = _ma_notch2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_notch2>)>();

  ma_peak2_config ma_peak2_config_init(
    int format,
    int channels,
    int sampleRate,
    double gainDB,
    double q,
    double frequency,
  ) {
    return _ma_peak2_config_init(
      format,
      channels,
      sampleRate,
      gainDB,
      q,
      frequency,
    );
  }

  late final _ma_peak2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_peak2_config Function(ffi.Int32, ma_uint32, ma_uint32, ffi.Double,
              ffi.Double, ffi.Double)>>('ma_peak2_config_init');
  late final _ma_peak2_config_init = _ma_peak2_config_initPtr.asFunction<
      ma_peak2_config Function(int, int, int, double, double, double)>();

  int ma_peak2_get_heap_size(
    ffi.Pointer<ma_peak2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_peak2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_peak2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_peak2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_peak2_get_heap_size');
  late final _ma_peak2_get_heap_size = _ma_peak2_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_peak2_config>, ffi.Pointer<ffi.Size>)>();

  int ma_peak2_init_preallocated(
    ffi.Pointer<ma_peak2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_init_preallocated(
      pConfig,
      pHeap,
      pFilter,
    );
  }

  late final _ma_peak2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_peak2_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_peak2>)>>('ma_peak2_init_preallocated');
  late final _ma_peak2_init_preallocated =
      _ma_peak2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_peak2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_peak2>)>();

  int ma_peak2_init(
    ffi.Pointer<ma_peak2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_init(
      pConfig,
      pAllocationCallbacks,
      pFilter,
    );
  }

  late final _ma_peak2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_peak2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_peak2>)>>('ma_peak2_init');
  late final _ma_peak2_init = _ma_peak2_initPtr.asFunction<
      int Function(ffi.Pointer<ma_peak2_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_peak2>)>();

  void ma_peak2_uninit(
    ffi.Pointer<ma_peak2> pFilter,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_peak2_uninit(
      pFilter,
      pAllocationCallbacks,
    );
  }

  late final _ma_peak2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_peak2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_peak2_uninit');
  late final _ma_peak2_uninit = _ma_peak2_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_peak2>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_peak2_reinit(
    ffi.Pointer<ma_peak2_config> pConfig,
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_peak2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_peak2_config>,
              ffi.Pointer<ma_peak2>)>>('ma_peak2_reinit');
  late final _ma_peak2_reinit = _ma_peak2_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_peak2_config>, ffi.Pointer<ma_peak2>)>();

  int ma_peak2_process_pcm_frames(
    ffi.Pointer<ma_peak2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_peak2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_peak2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_peak2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_peak2_process_pcm_frames');
  late final _ma_peak2_process_pcm_frames =
      _ma_peak2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_peak2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_peak2_get_latency(
    ffi.Pointer<ma_peak2> pFilter,
  ) {
    return _ma_peak2_get_latency(
      pFilter,
    );
  }

  late final _ma_peak2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_peak2>)>>(
          'ma_peak2_get_latency');
  late final _ma_peak2_get_latency = _ma_peak2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_peak2>)>();

  ma_loshelf2_config ma_loshelf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double gainDB,
    double shelfSlope,
    double frequency,
  ) {
    return _ma_loshelf2_config_init(
      format,
      channels,
      sampleRate,
      gainDB,
      shelfSlope,
      frequency,
    );
  }

  late final _ma_loshelf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_loshelf2_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double, ffi.Double, ffi.Double)>>('ma_loshelf2_config_init');
  late final _ma_loshelf2_config_init = _ma_loshelf2_config_initPtr.asFunction<
      ma_loshelf2_config Function(int, int, int, double, double, double)>();

  int ma_loshelf2_get_heap_size(
    ffi.Pointer<ma_loshelf2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_loshelf2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_loshelf2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_loshelf2_get_heap_size');
  late final _ma_loshelf2_get_heap_size =
      _ma_loshelf2_get_heap_sizePtr.asFunction<
          int Function(
              ffi.Pointer<ma_loshelf2_config>, ffi.Pointer<ffi.Size>)>();

  int ma_loshelf2_init_preallocated(
    ffi.Pointer<ma_loshelf2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_init_preallocated(
      pConfig,
      pHeap,
      pFilter,
    );
  }

  late final _ma_loshelf2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_loshelf2>)>>('ma_loshelf2_init_preallocated');
  late final _ma_loshelf2_init_preallocated =
      _ma_loshelf2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_loshelf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_loshelf2>)>();

  int ma_loshelf2_init(
    ffi.Pointer<ma_loshelf2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_init(
      pConfig,
      pAllocationCallbacks,
      pFilter,
    );
  }

  late final _ma_loshelf2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_loshelf2>)>>('ma_loshelf2_init');
  late final _ma_loshelf2_init = _ma_loshelf2_initPtr.asFunction<
      int Function(ffi.Pointer<ma_loshelf2_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_loshelf2>)>();

  void ma_loshelf2_uninit(
    ffi.Pointer<ma_loshelf2> pFilter,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_loshelf2_uninit(
      pFilter,
      pAllocationCallbacks,
    );
  }

  late final _ma_loshelf2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_loshelf2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_loshelf2_uninit');
  late final _ma_loshelf2_uninit = _ma_loshelf2_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_loshelf2>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_loshelf2_reinit(
    ffi.Pointer<ma_loshelf2_config> pConfig,
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_loshelf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ma_loshelf2>)>>('ma_loshelf2_reinit');
  late final _ma_loshelf2_reinit = _ma_loshelf2_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_loshelf2_config>, ffi.Pointer<ma_loshelf2>)>();

  int ma_loshelf2_process_pcm_frames(
    ffi.Pointer<ma_loshelf2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_loshelf2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_loshelf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_loshelf2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_loshelf2_process_pcm_frames');
  late final _ma_loshelf2_process_pcm_frames =
      _ma_loshelf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_loshelf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_loshelf2_get_latency(
    ffi.Pointer<ma_loshelf2> pFilter,
  ) {
    return _ma_loshelf2_get_latency(
      pFilter,
    );
  }

  late final _ma_loshelf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_loshelf2>)>>(
          'ma_loshelf2_get_latency');
  late final _ma_loshelf2_get_latency = _ma_loshelf2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_loshelf2>)>();

  ma_hishelf2_config ma_hishelf2_config_init(
    int format,
    int channels,
    int sampleRate,
    double gainDB,
    double shelfSlope,
    double frequency,
  ) {
    return _ma_hishelf2_config_init(
      format,
      channels,
      sampleRate,
      gainDB,
      shelfSlope,
      frequency,
    );
  }

  late final _ma_hishelf2_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hishelf2_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double, ffi.Double, ffi.Double)>>('ma_hishelf2_config_init');
  late final _ma_hishelf2_config_init = _ma_hishelf2_config_initPtr.asFunction<
      ma_hishelf2_config Function(int, int, int, double, double, double)>();

  int ma_hishelf2_get_heap_size(
    ffi.Pointer<ma_hishelf2_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_hishelf2_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_hishelf2_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ffi.Size>)>>('ma_hishelf2_get_heap_size');
  late final _ma_hishelf2_get_heap_size =
      _ma_hishelf2_get_heap_sizePtr.asFunction<
          int Function(
              ffi.Pointer<ma_hishelf2_config>, ffi.Pointer<ffi.Size>)>();

  int ma_hishelf2_init_preallocated(
    ffi.Pointer<ma_hishelf2_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_init_preallocated(
      pConfig,
      pHeap,
      pFilter,
    );
  }

  late final _ma_hishelf2_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hishelf2>)>>('ma_hishelf2_init_preallocated');
  late final _ma_hishelf2_init_preallocated =
      _ma_hishelf2_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_hishelf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hishelf2>)>();

  int ma_hishelf2_init(
    ffi.Pointer<ma_hishelf2_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_init(
      pConfig,
      pAllocationCallbacks,
      pFilter,
    );
  }

  late final _ma_hishelf2_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hishelf2>)>>('ma_hishelf2_init');
  late final _ma_hishelf2_init = _ma_hishelf2_initPtr.asFunction<
      int Function(ffi.Pointer<ma_hishelf2_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_hishelf2>)>();

  void ma_hishelf2_uninit(
    ffi.Pointer<ma_hishelf2> pFilter,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_hishelf2_uninit(
      pFilter,
      pAllocationCallbacks,
    );
  }

  late final _ma_hishelf2_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hishelf2>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_hishelf2_uninit');
  late final _ma_hishelf2_uninit = _ma_hishelf2_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_hishelf2>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_hishelf2_reinit(
    ffi.Pointer<ma_hishelf2_config> pConfig,
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_reinit(
      pConfig,
      pFilter,
    );
  }

  late final _ma_hishelf2_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ma_hishelf2>)>>('ma_hishelf2_reinit');
  late final _ma_hishelf2_reinit = _ma_hishelf2_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_hishelf2_config>, ffi.Pointer<ma_hishelf2>)>();

  int ma_hishelf2_process_pcm_frames(
    ffi.Pointer<ma_hishelf2> pFilter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_hishelf2_process_pcm_frames(
      pFilter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_hishelf2_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hishelf2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_hishelf2_process_pcm_frames');
  late final _ma_hishelf2_process_pcm_frames =
      _ma_hishelf2_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_hishelf2>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_hishelf2_get_latency(
    ffi.Pointer<ma_hishelf2> pFilter,
  ) {
    return _ma_hishelf2_get_latency(
      pFilter,
    );
  }

  late final _ma_hishelf2_get_latencyPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hishelf2>)>>(
          'ma_hishelf2_get_latency');
  late final _ma_hishelf2_get_latency = _ma_hishelf2_get_latencyPtr
      .asFunction<int Function(ffi.Pointer<ma_hishelf2>)>();

  ma_delay_config ma_delay_config_init(
    int channels,
    int sampleRate,
    int delayInFrames,
    double decay,
  ) {
    return _ma_delay_config_init(
      channels,
      sampleRate,
      delayInFrames,
      decay,
    );
  }

  late final _ma_delay_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_delay_config Function(ma_uint32, ma_uint32, ma_uint32,
              ffi.Float)>>('ma_delay_config_init');
  late final _ma_delay_config_init = _ma_delay_config_initPtr
      .asFunction<ma_delay_config Function(int, int, int, double)>();

  int ma_delay_init(
    ffi.Pointer<ma_delay_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_delay> pDelay,
  ) {
    return _ma_delay_init(
      pConfig,
      pAllocationCallbacks,
      pDelay,
    );
  }

  late final _ma_delay_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_delay_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_delay>)>>('ma_delay_init');
  late final _ma_delay_init = _ma_delay_initPtr.asFunction<
      int Function(ffi.Pointer<ma_delay_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_delay>)>();

  void ma_delay_uninit(
    ffi.Pointer<ma_delay> pDelay,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_delay_uninit(
      pDelay,
      pAllocationCallbacks,
    );
  }

  late final _ma_delay_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_delay>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_delay_uninit');
  late final _ma_delay_uninit = _ma_delay_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_delay>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_delay_process_pcm_frames(
    ffi.Pointer<ma_delay> pDelay,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_delay_process_pcm_frames(
      pDelay,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_delay_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_delay>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint32)>>('ma_delay_process_pcm_frames');
  late final _ma_delay_process_pcm_frames =
      _ma_delay_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_delay>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  void ma_delay_set_wet(
    ffi.Pointer<ma_delay> pDelay,
    double value,
  ) {
    return _ma_delay_set_wet(
      pDelay,
      value,
    );
  }

  late final _ma_delay_set_wetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_delay>, ffi.Float)>>('ma_delay_set_wet');
  late final _ma_delay_set_wet = _ma_delay_set_wetPtr
      .asFunction<void Function(ffi.Pointer<ma_delay>, double)>();

  double ma_delay_get_wet(
    ffi.Pointer<ma_delay> pDelay,
  ) {
    return _ma_delay_get_wet(
      pDelay,
    );
  }

  late final _ma_delay_get_wetPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay>)>>(
          'ma_delay_get_wet');
  late final _ma_delay_get_wet =
      _ma_delay_get_wetPtr.asFunction<double Function(ffi.Pointer<ma_delay>)>();

  void ma_delay_set_dry(
    ffi.Pointer<ma_delay> pDelay,
    double value,
  ) {
    return _ma_delay_set_dry(
      pDelay,
      value,
    );
  }

  late final _ma_delay_set_dryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_delay>, ffi.Float)>>('ma_delay_set_dry');
  late final _ma_delay_set_dry = _ma_delay_set_dryPtr
      .asFunction<void Function(ffi.Pointer<ma_delay>, double)>();

  double ma_delay_get_dry(
    ffi.Pointer<ma_delay> pDelay,
  ) {
    return _ma_delay_get_dry(
      pDelay,
    );
  }

  late final _ma_delay_get_dryPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay>)>>(
          'ma_delay_get_dry');
  late final _ma_delay_get_dry =
      _ma_delay_get_dryPtr.asFunction<double Function(ffi.Pointer<ma_delay>)>();

  void ma_delay_set_decay(
    ffi.Pointer<ma_delay> pDelay,
    double value,
  ) {
    return _ma_delay_set_decay(
      pDelay,
      value,
    );
  }

  late final _ma_delay_set_decayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_delay>, ffi.Float)>>('ma_delay_set_decay');
  late final _ma_delay_set_decay = _ma_delay_set_decayPtr
      .asFunction<void Function(ffi.Pointer<ma_delay>, double)>();

  double ma_delay_get_decay(
    ffi.Pointer<ma_delay> pDelay,
  ) {
    return _ma_delay_get_decay(
      pDelay,
    );
  }

  late final _ma_delay_get_decayPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay>)>>(
          'ma_delay_get_decay');
  late final _ma_delay_get_decay = _ma_delay_get_decayPtr
      .asFunction<double Function(ffi.Pointer<ma_delay>)>();

  ma_gainer_config ma_gainer_config_init(
    int channels,
    int smoothTimeInFrames,
  ) {
    return _ma_gainer_config_init(
      channels,
      smoothTimeInFrames,
    );
  }

  late final _ma_gainer_config_initPtr = _lookup<
          ffi.NativeFunction<ma_gainer_config Function(ma_uint32, ma_uint32)>>(
      'ma_gainer_config_init');
  late final _ma_gainer_config_init = _ma_gainer_config_initPtr
      .asFunction<ma_gainer_config Function(int, int)>();

  int ma_gainer_get_heap_size(
    ffi.Pointer<ma_gainer_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_gainer_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_gainer_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_gainer_config>,
              ffi.Pointer<ffi.Size>)>>('ma_gainer_get_heap_size');
  late final _ma_gainer_get_heap_size = _ma_gainer_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_gainer_config>, ffi.Pointer<ffi.Size>)>();

  int ma_gainer_init_preallocated(
    ffi.Pointer<ma_gainer_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_gainer> pGainer,
  ) {
    return _ma_gainer_init_preallocated(
      pConfig,
      pHeap,
      pGainer,
    );
  }

  late final _ma_gainer_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_gainer_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_gainer>)>>('ma_gainer_init_preallocated');
  late final _ma_gainer_init_preallocated =
      _ma_gainer_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_gainer_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_gainer>)>();

  int ma_gainer_init(
    ffi.Pointer<ma_gainer_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_gainer> pGainer,
  ) {
    return _ma_gainer_init(
      pConfig,
      pAllocationCallbacks,
      pGainer,
    );
  }

  late final _ma_gainer_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_gainer_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_gainer>)>>('ma_gainer_init');
  late final _ma_gainer_init = _ma_gainer_initPtr.asFunction<
      int Function(ffi.Pointer<ma_gainer_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_gainer>)>();

  void ma_gainer_uninit(
    ffi.Pointer<ma_gainer> pGainer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_gainer_uninit(
      pGainer,
      pAllocationCallbacks,
    );
  }

  late final _ma_gainer_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_gainer>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_gainer_uninit');
  late final _ma_gainer_uninit = _ma_gainer_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_gainer>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_gainer_process_pcm_frames(
    ffi.Pointer<ma_gainer> pGainer,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_gainer_process_pcm_frames(
      pGainer,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_gainer_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_gainer>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_gainer_process_pcm_frames');
  late final _ma_gainer_process_pcm_frames =
      _ma_gainer_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_gainer>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_gainer_set_gain(
    ffi.Pointer<ma_gainer> pGainer,
    double newGain,
  ) {
    return _ma_gainer_set_gain(
      pGainer,
      newGain,
    );
  }

  late final _ma_gainer_set_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_gainer>, ffi.Float)>>('ma_gainer_set_gain');
  late final _ma_gainer_set_gain = _ma_gainer_set_gainPtr
      .asFunction<int Function(ffi.Pointer<ma_gainer>, double)>();

  int ma_gainer_set_gains(
    ffi.Pointer<ma_gainer> pGainer,
    ffi.Pointer<ffi.Float> pNewGains,
  ) {
    return _ma_gainer_set_gains(
      pGainer,
      pNewGains,
    );
  }

  late final _ma_gainer_set_gainsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_gainer>,
              ffi.Pointer<ffi.Float>)>>('ma_gainer_set_gains');
  late final _ma_gainer_set_gains = _ma_gainer_set_gainsPtr.asFunction<
      int Function(ffi.Pointer<ma_gainer>, ffi.Pointer<ffi.Float>)>();

  int ma_gainer_set_master_volume(
    ffi.Pointer<ma_gainer> pGainer,
    double volume,
  ) {
    return _ma_gainer_set_master_volume(
      pGainer,
      volume,
    );
  }

  late final _ma_gainer_set_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_gainer>,
              ffi.Float)>>('ma_gainer_set_master_volume');
  late final _ma_gainer_set_master_volume = _ma_gainer_set_master_volumePtr
      .asFunction<int Function(ffi.Pointer<ma_gainer>, double)>();

  int ma_gainer_get_master_volume(
    ffi.Pointer<ma_gainer> pGainer,
    ffi.Pointer<ffi.Float> pVolume,
  ) {
    return _ma_gainer_get_master_volume(
      pGainer,
      pVolume,
    );
  }

  late final _ma_gainer_get_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_gainer>,
              ffi.Pointer<ffi.Float>)>>('ma_gainer_get_master_volume');
  late final _ma_gainer_get_master_volume =
      _ma_gainer_get_master_volumePtr.asFunction<
          int Function(ffi.Pointer<ma_gainer>, ffi.Pointer<ffi.Float>)>();

  ma_panner_config ma_panner_config_init(
    int format,
    int channels,
  ) {
    return _ma_panner_config_init(
      format,
      channels,
    );
  }

  late final _ma_panner_config_initPtr = _lookup<
          ffi.NativeFunction<ma_panner_config Function(ffi.Int32, ma_uint32)>>(
      'ma_panner_config_init');
  late final _ma_panner_config_init = _ma_panner_config_initPtr
      .asFunction<ma_panner_config Function(int, int)>();

  int ma_panner_init(
    ffi.Pointer<ma_panner_config> pConfig,
    ffi.Pointer<ma_panner> pPanner,
  ) {
    return _ma_panner_init(
      pConfig,
      pPanner,
    );
  }

  late final _ma_panner_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_panner_config>,
              ffi.Pointer<ma_panner>)>>('ma_panner_init');
  late final _ma_panner_init = _ma_panner_initPtr.asFunction<
      int Function(ffi.Pointer<ma_panner_config>, ffi.Pointer<ma_panner>)>();

  int ma_panner_process_pcm_frames(
    ffi.Pointer<ma_panner> pPanner,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_panner_process_pcm_frames(
      pPanner,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_panner_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_panner>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_panner_process_pcm_frames');
  late final _ma_panner_process_pcm_frames =
      _ma_panner_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_panner>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  void ma_panner_set_mode(
    ffi.Pointer<ma_panner> pPanner,
    int mode,
  ) {
    return _ma_panner_set_mode(
      pPanner,
      mode,
    );
  }

  late final _ma_panner_set_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_panner>, ffi.Int32)>>('ma_panner_set_mode');
  late final _ma_panner_set_mode = _ma_panner_set_modePtr
      .asFunction<void Function(ffi.Pointer<ma_panner>, int)>();

  int ma_panner_get_mode(
    ffi.Pointer<ma_panner> pPanner,
  ) {
    return _ma_panner_get_mode(
      pPanner,
    );
  }

  late final _ma_panner_get_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_panner>)>>(
          'ma_panner_get_mode');
  late final _ma_panner_get_mode =
      _ma_panner_get_modePtr.asFunction<int Function(ffi.Pointer<ma_panner>)>();

  void ma_panner_set_pan(
    ffi.Pointer<ma_panner> pPanner,
    double pan,
  ) {
    return _ma_panner_set_pan(
      pPanner,
      pan,
    );
  }

  late final _ma_panner_set_panPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_panner>, ffi.Float)>>('ma_panner_set_pan');
  late final _ma_panner_set_pan = _ma_panner_set_panPtr
      .asFunction<void Function(ffi.Pointer<ma_panner>, double)>();

  double ma_panner_get_pan(
    ffi.Pointer<ma_panner> pPanner,
  ) {
    return _ma_panner_get_pan(
      pPanner,
    );
  }

  late final _ma_panner_get_panPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_panner>)>>(
          'ma_panner_get_pan');
  late final _ma_panner_get_pan = _ma_panner_get_panPtr
      .asFunction<double Function(ffi.Pointer<ma_panner>)>();

  ma_fader_config ma_fader_config_init(
    int format,
    int channels,
    int sampleRate,
  ) {
    return _ma_fader_config_init(
      format,
      channels,
      sampleRate,
    );
  }

  late final _ma_fader_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_fader_config Function(
              ffi.Int32, ma_uint32, ma_uint32)>>('ma_fader_config_init');
  late final _ma_fader_config_init = _ma_fader_config_initPtr
      .asFunction<ma_fader_config Function(int, int, int)>();

  int ma_fader_init(
    ffi.Pointer<ma_fader_config> pConfig,
    ffi.Pointer<ma_fader> pFader,
  ) {
    return _ma_fader_init(
      pConfig,
      pFader,
    );
  }

  late final _ma_fader_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_fader_config>,
              ffi.Pointer<ma_fader>)>>('ma_fader_init');
  late final _ma_fader_init = _ma_fader_initPtr.asFunction<
      int Function(ffi.Pointer<ma_fader_config>, ffi.Pointer<ma_fader>)>();

  int ma_fader_process_pcm_frames(
    ffi.Pointer<ma_fader> pFader,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_fader_process_pcm_frames(
      pFader,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_fader_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_fader>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_fader_process_pcm_frames');
  late final _ma_fader_process_pcm_frames =
      _ma_fader_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_fader>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  void ma_fader_get_data_format(
    ffi.Pointer<ma_fader> pFader,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
  ) {
    return _ma_fader_get_data_format(
      pFader,
      pFormat,
      pChannels,
      pSampleRate,
    );
  }

  late final _ma_fader_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_fader>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>)>>('ma_fader_get_data_format');
  late final _ma_fader_get_data_format =
      _ma_fader_get_data_formatPtr.asFunction<
          void Function(ffi.Pointer<ma_fader>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>, ffi.Pointer<ma_uint32>)>();

  void ma_fader_set_fade(
    ffi.Pointer<ma_fader> pFader,
    double volumeBeg,
    double volumeEnd,
    int lengthInFrames,
  ) {
    return _ma_fader_set_fade(
      pFader,
      volumeBeg,
      volumeEnd,
      lengthInFrames,
    );
  }

  late final _ma_fader_set_fadePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_fader>, ffi.Float, ffi.Float,
              ma_uint64)>>('ma_fader_set_fade');
  late final _ma_fader_set_fade = _ma_fader_set_fadePtr
      .asFunction<void Function(ffi.Pointer<ma_fader>, double, double, int)>();

  void ma_fader_set_fade_ex(
    ffi.Pointer<ma_fader> pFader,
    double volumeBeg,
    double volumeEnd,
    int lengthInFrames,
    int startOffsetInFrames,
  ) {
    return _ma_fader_set_fade_ex(
      pFader,
      volumeBeg,
      volumeEnd,
      lengthInFrames,
      startOffsetInFrames,
    );
  }

  late final _ma_fader_set_fade_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_fader>, ffi.Float, ffi.Float,
              ma_uint64, ma_int64)>>('ma_fader_set_fade_ex');
  late final _ma_fader_set_fade_ex = _ma_fader_set_fade_exPtr.asFunction<
      void Function(ffi.Pointer<ma_fader>, double, double, int, int)>();

  double ma_fader_get_current_volume(
    ffi.Pointer<ma_fader> pFader,
  ) {
    return _ma_fader_get_current_volume(
      pFader,
    );
  }

  late final _ma_fader_get_current_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_fader>)>>(
          'ma_fader_get_current_volume');
  late final _ma_fader_get_current_volume = _ma_fader_get_current_volumePtr
      .asFunction<double Function(ffi.Pointer<ma_fader>)>();

  ma_spatializer_listener_config ma_spatializer_listener_config_init(
    int channelsOut,
  ) {
    return _ma_spatializer_listener_config_init(
      channelsOut,
    );
  }

  late final _ma_spatializer_listener_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_spatializer_listener_config Function(
              ma_uint32)>>('ma_spatializer_listener_config_init');
  late final _ma_spatializer_listener_config_init =
      _ma_spatializer_listener_config_initPtr
          .asFunction<ma_spatializer_listener_config Function(int)>();

  int ma_spatializer_listener_get_heap_size(
    ffi.Pointer<ma_spatializer_listener_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_spatializer_listener_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_spatializer_listener_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_spatializer_listener_config>,
              ffi.Pointer<ffi.Size>)>>('ma_spatializer_listener_get_heap_size');
  late final _ma_spatializer_listener_get_heap_size =
      _ma_spatializer_listener_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_spatializer_listener_config>,
              ffi.Pointer<ffi.Size>)>();

  int ma_spatializer_listener_init_preallocated(
    ffi.Pointer<ma_spatializer_listener_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_init_preallocated(
      pConfig,
      pHeap,
      pListener,
    );
  }

  late final _ma_spatializer_listener_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_spatializer_listener_config>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_init_preallocated');
  late final _ma_spatializer_listener_init_preallocated =
      _ma_spatializer_listener_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_spatializer_listener_config>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ma_spatializer_listener>)>();

  int ma_spatializer_listener_init(
    ffi.Pointer<ma_spatializer_listener_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_init(
      pConfig,
      pAllocationCallbacks,
      pListener,
    );
  }

  late final _ma_spatializer_listener_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_spatializer_listener_config>,
                  ffi.Pointer<ma_allocation_callbacks>,
                  ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_init');
  late final _ma_spatializer_listener_init =
      _ma_spatializer_listener_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_spatializer_listener_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_spatializer_listener>)>();

  void ma_spatializer_listener_uninit(
    ffi.Pointer<ma_spatializer_listener> pListener,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_spatializer_listener_uninit(
      pListener,
      pAllocationCallbacks,
    );
  }

  late final _ma_spatializer_listener_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer_listener>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_spatializer_listener_uninit');
  late final _ma_spatializer_listener_uninit =
      _ma_spatializer_listener_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  ffi.Pointer<ma_channel> ma_spatializer_listener_get_channel_map(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_get_channel_map(
      pListener,
    );
  }

  late final _ma_spatializer_listener_get_channel_mapPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ma_channel> Function(
                  ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_get_channel_map');
  late final _ma_spatializer_listener_get_channel_map =
      _ma_spatializer_listener_get_channel_mapPtr.asFunction<
          ffi.Pointer<ma_channel> Function(
              ffi.Pointer<ma_spatializer_listener>)>();

  void ma_spatializer_listener_set_cone(
    ffi.Pointer<ma_spatializer_listener> pListener,
    double innerAngleInRadians,
    double outerAngleInRadians,
    double outerGain,
  ) {
    return _ma_spatializer_listener_set_cone(
      pListener,
      innerAngleInRadians,
      outerAngleInRadians,
      outerGain,
    );
  }

  late final _ma_spatializer_listener_set_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_spatializer_listener_set_cone');
  late final _ma_spatializer_listener_set_cone =
      _ma_spatializer_listener_set_conePtr.asFunction<
          void Function(
              ffi.Pointer<ma_spatializer_listener>, double, double, double)>();

  void ma_spatializer_listener_get_cone(
    ffi.Pointer<ma_spatializer_listener> pListener,
    ffi.Pointer<ffi.Float> pInnerAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterGain,
  ) {
    return _ma_spatializer_listener_get_cone(
      pListener,
      pInnerAngleInRadians,
      pOuterAngleInRadians,
      pOuterGain,
    );
  }

  late final _ma_spatializer_listener_get_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('ma_spatializer_listener_get_cone');
  late final _ma_spatializer_listener_get_cone =
      _ma_spatializer_listener_get_conePtr.asFunction<
          void Function(
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>();

  void ma_spatializer_listener_set_position(
    ffi.Pointer<ma_spatializer_listener> pListener,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_listener_set_position(
      pListener,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_listener_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_spatializer_listener_set_position');
  late final _ma_spatializer_listener_set_position =
      _ma_spatializer_listener_set_positionPtr.asFunction<
          void Function(
              ffi.Pointer<ma_spatializer_listener>, double, double, double)>();

  ma_vec3f ma_spatializer_listener_get_position(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_get_position(
      pListener,
    );
  }

  late final _ma_spatializer_listener_get_positionPtr = _lookup<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_get_position');
  late final _ma_spatializer_listener_get_position =
      _ma_spatializer_listener_get_positionPtr.asFunction<
          ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>();

  void ma_spatializer_listener_set_direction(
    ffi.Pointer<ma_spatializer_listener> pListener,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_listener_set_direction(
      pListener,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_listener_set_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_spatializer_listener_set_direction');
  late final _ma_spatializer_listener_set_direction =
      _ma_spatializer_listener_set_directionPtr.asFunction<
          void Function(
              ffi.Pointer<ma_spatializer_listener>, double, double, double)>();

  ma_vec3f ma_spatializer_listener_get_direction(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_get_direction(
      pListener,
    );
  }

  late final _ma_spatializer_listener_get_directionPtr = _lookup<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_get_direction');
  late final _ma_spatializer_listener_get_direction =
      _ma_spatializer_listener_get_directionPtr.asFunction<
          ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>();

  void ma_spatializer_listener_set_velocity(
    ffi.Pointer<ma_spatializer_listener> pListener,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_listener_set_velocity(
      pListener,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_listener_set_velocityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_spatializer_listener_set_velocity');
  late final _ma_spatializer_listener_set_velocity =
      _ma_spatializer_listener_set_velocityPtr.asFunction<
          void Function(
              ffi.Pointer<ma_spatializer_listener>, double, double, double)>();

  ma_vec3f ma_spatializer_listener_get_velocity(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_get_velocity(
      pListener,
    );
  }

  late final _ma_spatializer_listener_get_velocityPtr = _lookup<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_get_velocity');
  late final _ma_spatializer_listener_get_velocity =
      _ma_spatializer_listener_get_velocityPtr.asFunction<
          ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>();

  void ma_spatializer_listener_set_speed_of_sound(
    ffi.Pointer<ma_spatializer_listener> pListener,
    double speedOfSound,
  ) {
    return _ma_spatializer_listener_set_speed_of_sound(
      pListener,
      speedOfSound,
    );
  }

  late final _ma_spatializer_listener_set_speed_of_soundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>,
              ffi.Float)>>('ma_spatializer_listener_set_speed_of_sound');
  late final _ma_spatializer_listener_set_speed_of_sound =
      _ma_spatializer_listener_set_speed_of_soundPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer_listener>, double)>();

  double ma_spatializer_listener_get_speed_of_sound(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_get_speed_of_sound(
      pListener,
    );
  }

  late final _ma_spatializer_listener_get_speed_of_soundPtr = _lookup<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_get_speed_of_sound');
  late final _ma_spatializer_listener_get_speed_of_sound =
      _ma_spatializer_listener_get_speed_of_soundPtr
          .asFunction<double Function(ffi.Pointer<ma_spatializer_listener>)>();

  void ma_spatializer_listener_set_world_up(
    ffi.Pointer<ma_spatializer_listener> pListener,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_listener_set_world_up(
      pListener,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_listener_set_world_upPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_spatializer_listener_set_world_up');
  late final _ma_spatializer_listener_set_world_up =
      _ma_spatializer_listener_set_world_upPtr.asFunction<
          void Function(
              ffi.Pointer<ma_spatializer_listener>, double, double, double)>();

  ma_vec3f ma_spatializer_listener_get_world_up(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_get_world_up(
      pListener,
    );
  }

  late final _ma_spatializer_listener_get_world_upPtr = _lookup<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_get_world_up');
  late final _ma_spatializer_listener_get_world_up =
      _ma_spatializer_listener_get_world_upPtr.asFunction<
          ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>();

  void ma_spatializer_listener_set_enabled(
    ffi.Pointer<ma_spatializer_listener> pListener,
    int isEnabled,
  ) {
    return _ma_spatializer_listener_set_enabled(
      pListener,
      isEnabled,
    );
  }

  late final _ma_spatializer_listener_set_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer_listener>,
              ma_bool32)>>('ma_spatializer_listener_set_enabled');
  late final _ma_spatializer_listener_set_enabled =
      _ma_spatializer_listener_set_enabledPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer_listener>, int)>();

  int ma_spatializer_listener_is_enabled(
    ffi.Pointer<ma_spatializer_listener> pListener,
  ) {
    return _ma_spatializer_listener_is_enabled(
      pListener,
    );
  }

  late final _ma_spatializer_listener_is_enabledPtr = _lookup<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_spatializer_listener>)>>(
      'ma_spatializer_listener_is_enabled');
  late final _ma_spatializer_listener_is_enabled =
      _ma_spatializer_listener_is_enabledPtr
          .asFunction<int Function(ffi.Pointer<ma_spatializer_listener>)>();

  ma_spatializer_config ma_spatializer_config_init(
    int channelsIn,
    int channelsOut,
  ) {
    return _ma_spatializer_config_init(
      channelsIn,
      channelsOut,
    );
  }

  late final _ma_spatializer_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_spatializer_config Function(
              ma_uint32, ma_uint32)>>('ma_spatializer_config_init');
  late final _ma_spatializer_config_init = _ma_spatializer_config_initPtr
      .asFunction<ma_spatializer_config Function(int, int)>();

  int ma_spatializer_get_heap_size(
    ffi.Pointer<ma_spatializer_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_spatializer_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_spatializer_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_spatializer_config>,
              ffi.Pointer<ffi.Size>)>>('ma_spatializer_get_heap_size');
  late final _ma_spatializer_get_heap_size =
      _ma_spatializer_get_heap_sizePtr.asFunction<
          int Function(
              ffi.Pointer<ma_spatializer_config>, ffi.Pointer<ffi.Size>)>();

  int ma_spatializer_init_preallocated(
    ffi.Pointer<ma_spatializer_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_init_preallocated(
      pConfig,
      pHeap,
      pSpatializer,
    );
  }

  late final _ma_spatializer_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_spatializer_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_init_preallocated');
  late final _ma_spatializer_init_preallocated =
      _ma_spatializer_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_spatializer_config>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ma_spatializer>)>();

  int ma_spatializer_init(
    ffi.Pointer<ma_spatializer_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_init(
      pConfig,
      pAllocationCallbacks,
      pSpatializer,
    );
  }

  late final _ma_spatializer_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_spatializer_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_spatializer>)>>('ma_spatializer_init');
  late final _ma_spatializer_init = _ma_spatializer_initPtr.asFunction<
      int Function(ffi.Pointer<ma_spatializer_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_uninit(
    ffi.Pointer<ma_spatializer> pSpatializer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_spatializer_uninit(
      pSpatializer,
      pAllocationCallbacks,
    );
  }

  late final _ma_spatializer_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_spatializer_uninit');
  late final _ma_spatializer_uninit = _ma_spatializer_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_spatializer>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_spatializer_process_pcm_frames(
    ffi.Pointer<ma_spatializer> pSpatializer,
    ffi.Pointer<ma_spatializer_listener> pListener,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_spatializer_process_pcm_frames(
      pSpatializer,
      pListener,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_spatializer_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_spatializer_process_pcm_frames');
  late final _ma_spatializer_process_pcm_frames =
      _ma_spatializer_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  int ma_spatializer_set_master_volume(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double volume,
  ) {
    return _ma_spatializer_set_master_volume(
      pSpatializer,
      volume,
    );
  }

  late final _ma_spatializer_set_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_master_volume');
  late final _ma_spatializer_set_master_volume =
      _ma_spatializer_set_master_volumePtr
          .asFunction<int Function(ffi.Pointer<ma_spatializer>, double)>();

  int ma_spatializer_get_master_volume(
    ffi.Pointer<ma_spatializer> pSpatializer,
    ffi.Pointer<ffi.Float> pVolume,
  ) {
    return _ma_spatializer_get_master_volume(
      pSpatializer,
      pVolume,
    );
  }

  late final _ma_spatializer_get_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ffi.Float>)>>('ma_spatializer_get_master_volume');
  late final _ma_spatializer_get_master_volume =
      _ma_spatializer_get_master_volumePtr.asFunction<
          int Function(ffi.Pointer<ma_spatializer>, ffi.Pointer<ffi.Float>)>();

  int ma_spatializer_get_input_channels(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_input_channels(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_input_channelsPtr = _lookup<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_input_channels');
  late final _ma_spatializer_get_input_channels =
      _ma_spatializer_get_input_channelsPtr
          .asFunction<int Function(ffi.Pointer<ma_spatializer>)>();

  int ma_spatializer_get_output_channels(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_output_channels(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_output_channelsPtr = _lookup<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_output_channels');
  late final _ma_spatializer_get_output_channels =
      _ma_spatializer_get_output_channelsPtr
          .asFunction<int Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_set_attenuation_model(
    ffi.Pointer<ma_spatializer> pSpatializer,
    int attenuationModel,
  ) {
    return _ma_spatializer_set_attenuation_model(
      pSpatializer,
      attenuationModel,
    );
  }

  late final _ma_spatializer_set_attenuation_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Int32)>>('ma_spatializer_set_attenuation_model');
  late final _ma_spatializer_set_attenuation_model =
      _ma_spatializer_set_attenuation_modelPtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer>, int)>();

  int ma_spatializer_get_attenuation_model(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_attenuation_model(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_attenuation_modelPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_attenuation_model');
  late final _ma_spatializer_get_attenuation_model =
      _ma_spatializer_get_attenuation_modelPtr
          .asFunction<int Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_set_positioning(
    ffi.Pointer<ma_spatializer> pSpatializer,
    int positioning,
  ) {
    return _ma_spatializer_set_positioning(
      pSpatializer,
      positioning,
    );
  }

  late final _ma_spatializer_set_positioningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Int32)>>('ma_spatializer_set_positioning');
  late final _ma_spatializer_set_positioning =
      _ma_spatializer_set_positioningPtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer>, int)>();

  int ma_spatializer_get_positioning(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_positioning(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_positioningPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_positioning');
  late final _ma_spatializer_get_positioning =
      _ma_spatializer_get_positioningPtr
          .asFunction<int Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_set_rolloff(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double rolloff,
  ) {
    return _ma_spatializer_set_rolloff(
      pSpatializer,
      rolloff,
    );
  }

  late final _ma_spatializer_set_rolloffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_rolloff');
  late final _ma_spatializer_set_rolloff = _ma_spatializer_set_rolloffPtr
      .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>();

  double ma_spatializer_get_rolloff(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_rolloff(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_rolloffPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_rolloff');
  late final _ma_spatializer_get_rolloff = _ma_spatializer_get_rolloffPtr
      .asFunction<double Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_set_min_gain(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double minGain,
  ) {
    return _ma_spatializer_set_min_gain(
      pSpatializer,
      minGain,
    );
  }

  late final _ma_spatializer_set_min_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_min_gain');
  late final _ma_spatializer_set_min_gain = _ma_spatializer_set_min_gainPtr
      .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>();

  double ma_spatializer_get_min_gain(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_min_gain(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_min_gainPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_min_gain');
  late final _ma_spatializer_get_min_gain = _ma_spatializer_get_min_gainPtr
      .asFunction<double Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_set_max_gain(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double maxGain,
  ) {
    return _ma_spatializer_set_max_gain(
      pSpatializer,
      maxGain,
    );
  }

  late final _ma_spatializer_set_max_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_max_gain');
  late final _ma_spatializer_set_max_gain = _ma_spatializer_set_max_gainPtr
      .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>();

  double ma_spatializer_get_max_gain(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_max_gain(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_max_gainPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_max_gain');
  late final _ma_spatializer_get_max_gain = _ma_spatializer_get_max_gainPtr
      .asFunction<double Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_set_min_distance(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double minDistance,
  ) {
    return _ma_spatializer_set_min_distance(
      pSpatializer,
      minDistance,
    );
  }

  late final _ma_spatializer_set_min_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_min_distance');
  late final _ma_spatializer_set_min_distance =
      _ma_spatializer_set_min_distancePtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>();

  double ma_spatializer_get_min_distance(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_min_distance(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_min_distancePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_min_distance');
  late final _ma_spatializer_get_min_distance =
      _ma_spatializer_get_min_distancePtr
          .asFunction<double Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_set_max_distance(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double maxDistance,
  ) {
    return _ma_spatializer_set_max_distance(
      pSpatializer,
      maxDistance,
    );
  }

  late final _ma_spatializer_set_max_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_max_distance');
  late final _ma_spatializer_set_max_distance =
      _ma_spatializer_set_max_distancePtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>();

  double ma_spatializer_get_max_distance(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_max_distance(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_max_distancePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_max_distance');
  late final _ma_spatializer_get_max_distance =
      _ma_spatializer_get_max_distancePtr
          .asFunction<double Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_set_cone(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double innerAngleInRadians,
    double outerAngleInRadians,
    double outerGain,
  ) {
    return _ma_spatializer_set_cone(
      pSpatializer,
      innerAngleInRadians,
      outerAngleInRadians,
      outerGain,
    );
  }

  late final _ma_spatializer_set_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_spatializer_set_cone');
  late final _ma_spatializer_set_cone = _ma_spatializer_set_conePtr.asFunction<
      void Function(ffi.Pointer<ma_spatializer>, double, double, double)>();

  void ma_spatializer_get_cone(
    ffi.Pointer<ma_spatializer> pSpatializer,
    ffi.Pointer<ffi.Float> pInnerAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterGain,
  ) {
    return _ma_spatializer_get_cone(
      pSpatializer,
      pInnerAngleInRadians,
      pOuterAngleInRadians,
      pOuterGain,
    );
  }

  late final _ma_spatializer_get_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('ma_spatializer_get_cone');
  late final _ma_spatializer_get_cone = _ma_spatializer_get_conePtr.asFunction<
      void Function(ffi.Pointer<ma_spatializer>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  void ma_spatializer_set_doppler_factor(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double dopplerFactor,
  ) {
    return _ma_spatializer_set_doppler_factor(
      pSpatializer,
      dopplerFactor,
    );
  }

  late final _ma_spatializer_set_doppler_factorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_doppler_factor');
  late final _ma_spatializer_set_doppler_factor =
      _ma_spatializer_set_doppler_factorPtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>();

  double ma_spatializer_get_doppler_factor(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_doppler_factor(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_doppler_factorPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_doppler_factor');
  late final _ma_spatializer_get_doppler_factor =
      _ma_spatializer_get_doppler_factorPtr
          .asFunction<double Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_set_directional_attenuation_factor(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double directionalAttenuationFactor,
  ) {
    return _ma_spatializer_set_directional_attenuation_factor(
      pSpatializer,
      directionalAttenuationFactor,
    );
  }

  late final _ma_spatializer_set_directional_attenuation_factorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>,
              ffi.Float)>>('ma_spatializer_set_directional_attenuation_factor');
  late final _ma_spatializer_set_directional_attenuation_factor =
      _ma_spatializer_set_directional_attenuation_factorPtr
          .asFunction<void Function(ffi.Pointer<ma_spatializer>, double)>();

  double ma_spatializer_get_directional_attenuation_factor(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_directional_attenuation_factor(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_directional_attenuation_factorPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_directional_attenuation_factor');
  late final _ma_spatializer_get_directional_attenuation_factor =
      _ma_spatializer_get_directional_attenuation_factorPtr
          .asFunction<double Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_set_position(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_set_position(
      pSpatializer,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_spatializer_set_position');
  late final _ma_spatializer_set_position =
      _ma_spatializer_set_positionPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer>, double, double, double)>();

  ma_vec3f ma_spatializer_get_position(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_position(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_positionPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_position');
  late final _ma_spatializer_get_position = _ma_spatializer_get_positionPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_set_direction(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_set_direction(
      pSpatializer,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_set_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_spatializer_set_direction');
  late final _ma_spatializer_set_direction =
      _ma_spatializer_set_directionPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer>, double, double, double)>();

  ma_vec3f ma_spatializer_get_direction(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_direction(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_directionPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_direction');
  late final _ma_spatializer_get_direction = _ma_spatializer_get_directionPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_set_velocity(
    ffi.Pointer<ma_spatializer> pSpatializer,
    double x,
    double y,
    double z,
  ) {
    return _ma_spatializer_set_velocity(
      pSpatializer,
      x,
      y,
      z,
    );
  }

  late final _ma_spatializer_set_velocityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_spatializer_set_velocity');
  late final _ma_spatializer_set_velocity =
      _ma_spatializer_set_velocityPtr.asFunction<
          void Function(ffi.Pointer<ma_spatializer>, double, double, double)>();

  ma_vec3f ma_spatializer_get_velocity(
    ffi.Pointer<ma_spatializer> pSpatializer,
  ) {
    return _ma_spatializer_get_velocity(
      pSpatializer,
    );
  }

  late final _ma_spatializer_get_velocityPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>>(
      'ma_spatializer_get_velocity');
  late final _ma_spatializer_get_velocity = _ma_spatializer_get_velocityPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>();

  void ma_spatializer_get_relative_position_and_direction(
    ffi.Pointer<ma_spatializer> pSpatializer,
    ffi.Pointer<ma_spatializer_listener> pListener,
    ffi.Pointer<ma_vec3f> pRelativePos,
    ffi.Pointer<ma_vec3f> pRelativeDir,
  ) {
    return _ma_spatializer_get_relative_position_and_direction(
      pSpatializer,
      pListener,
      pRelativePos,
      pRelativeDir,
    );
  }

  late final _ma_spatializer_get_relative_position_and_directionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_spatializer>,
                  ffi.Pointer<ma_spatializer_listener>,
                  ffi.Pointer<ma_vec3f>,
                  ffi.Pointer<ma_vec3f>)>>(
      'ma_spatializer_get_relative_position_and_direction');
  late final _ma_spatializer_get_relative_position_and_direction =
      _ma_spatializer_get_relative_position_and_directionPtr.asFunction<
          void Function(
              ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ma_vec3f>,
              ffi.Pointer<ma_vec3f>)>();

  ma_linear_resampler_config ma_linear_resampler_config_init(
    int format,
    int channels,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_linear_resampler_config_init(
      format,
      channels,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_linear_resampler_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_linear_resampler_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ma_uint32)>>('ma_linear_resampler_config_init');
  late final _ma_linear_resampler_config_init =
      _ma_linear_resampler_config_initPtr.asFunction<
          ma_linear_resampler_config Function(int, int, int, int)>();

  int ma_linear_resampler_get_heap_size(
    ffi.Pointer<ma_linear_resampler_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_linear_resampler_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_linear_resampler_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ffi.Size>)>>('ma_linear_resampler_get_heap_size');
  late final _ma_linear_resampler_get_heap_size =
      _ma_linear_resampler_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ffi.Size>)>();

  int ma_linear_resampler_init_preallocated(
    ffi.Pointer<ma_linear_resampler_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_init_preallocated(
      pConfig,
      pHeap,
      pResampler,
    );
  }

  late final _ma_linear_resampler_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_linear_resampler_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_linear_resampler>)>>(
      'ma_linear_resampler_init_preallocated');
  late final _ma_linear_resampler_init_preallocated =
      _ma_linear_resampler_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ma_linear_resampler>)>();

  int ma_linear_resampler_init(
    ffi.Pointer<ma_linear_resampler_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_init(
      pConfig,
      pAllocationCallbacks,
      pResampler,
    );
  }

  late final _ma_linear_resampler_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_linear_resampler>)>>('ma_linear_resampler_init');
  late final _ma_linear_resampler_init =
      _ma_linear_resampler_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_linear_resampler>)>();

  void ma_linear_resampler_uninit(
    ffi.Pointer<ma_linear_resampler> pResampler,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_linear_resampler_uninit(
      pResampler,
      pAllocationCallbacks,
    );
  }

  late final _ma_linear_resampler_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_linear_resampler>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_linear_resampler_uninit');
  late final _ma_linear_resampler_uninit =
      _ma_linear_resampler_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_linear_resampler>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_linear_resampler_process_pcm_frames(
    ffi.Pointer<ma_linear_resampler> pResampler,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ma_uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ma_uint64> pFrameCountOut,
  ) {
    return _ma_linear_resampler_process_pcm_frames(
      pResampler,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _ma_linear_resampler_process_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_linear_resampler>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_uint64>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_linear_resampler_process_pcm_frames');
  late final _ma_linear_resampler_process_pcm_frames =
      _ma_linear_resampler_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_linear_resampler>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>();

  int ma_linear_resampler_set_rate(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_linear_resampler_set_rate(
      pResampler,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_linear_resampler_set_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_linear_resampler>, ma_uint32,
              ma_uint32)>>('ma_linear_resampler_set_rate');
  late final _ma_linear_resampler_set_rate = _ma_linear_resampler_set_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_linear_resampler>, int, int)>();

  int ma_linear_resampler_set_rate_ratio(
    ffi.Pointer<ma_linear_resampler> pResampler,
    double ratioInOut,
  ) {
    return _ma_linear_resampler_set_rate_ratio(
      pResampler,
      ratioInOut,
    );
  }

  late final _ma_linear_resampler_set_rate_ratioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_linear_resampler>,
              ffi.Float)>>('ma_linear_resampler_set_rate_ratio');
  late final _ma_linear_resampler_set_rate_ratio =
      _ma_linear_resampler_set_rate_ratioPtr
          .asFunction<int Function(ffi.Pointer<ma_linear_resampler>, double)>();

  int ma_linear_resampler_get_input_latency(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_get_input_latency(
      pResampler,
    );
  }

  late final _ma_linear_resampler_get_input_latencyPtr = _lookup<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_linear_resampler>)>>(
      'ma_linear_resampler_get_input_latency');
  late final _ma_linear_resampler_get_input_latency =
      _ma_linear_resampler_get_input_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_linear_resampler>)>();

  int ma_linear_resampler_get_output_latency(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_get_output_latency(
      pResampler,
    );
  }

  late final _ma_linear_resampler_get_output_latencyPtr = _lookup<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_linear_resampler>)>>(
      'ma_linear_resampler_get_output_latency');
  late final _ma_linear_resampler_get_output_latency =
      _ma_linear_resampler_get_output_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_linear_resampler>)>();

  int ma_linear_resampler_get_required_input_frame_count(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int outputFrameCount,
    ffi.Pointer<ma_uint64> pInputFrameCount,
  ) {
    return _ma_linear_resampler_get_required_input_frame_count(
      pResampler,
      outputFrameCount,
      pInputFrameCount,
    );
  }

  late final _ma_linear_resampler_get_required_input_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_linear_resampler>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_linear_resampler_get_required_input_frame_count');
  late final _ma_linear_resampler_get_required_input_frame_count =
      _ma_linear_resampler_get_required_input_frame_countPtr.asFunction<
          int Function(
              ffi.Pointer<ma_linear_resampler>, int, ffi.Pointer<ma_uint64>)>();

  int ma_linear_resampler_get_expected_output_frame_count(
    ffi.Pointer<ma_linear_resampler> pResampler,
    int inputFrameCount,
    ffi.Pointer<ma_uint64> pOutputFrameCount,
  ) {
    return _ma_linear_resampler_get_expected_output_frame_count(
      pResampler,
      inputFrameCount,
      pOutputFrameCount,
    );
  }

  late final _ma_linear_resampler_get_expected_output_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_linear_resampler>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_linear_resampler_get_expected_output_frame_count');
  late final _ma_linear_resampler_get_expected_output_frame_count =
      _ma_linear_resampler_get_expected_output_frame_countPtr.asFunction<
          int Function(
              ffi.Pointer<ma_linear_resampler>, int, ffi.Pointer<ma_uint64>)>();

  int ma_linear_resampler_reset(
    ffi.Pointer<ma_linear_resampler> pResampler,
  ) {
    return _ma_linear_resampler_reset(
      pResampler,
    );
  }

  late final _ma_linear_resampler_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_linear_resampler>)>>('ma_linear_resampler_reset');
  late final _ma_linear_resampler_reset = _ma_linear_resampler_resetPtr
      .asFunction<int Function(ffi.Pointer<ma_linear_resampler>)>();

  ma_resampler_config ma_resampler_config_init(
    int format,
    int channels,
    int sampleRateIn,
    int sampleRateOut,
    int algorithm,
  ) {
    return _ma_resampler_config_init(
      format,
      channels,
      sampleRateIn,
      sampleRateOut,
      algorithm,
    );
  }

  late final _ma_resampler_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_resampler_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ma_uint32, ffi.Int32)>>('ma_resampler_config_init');
  late final _ma_resampler_config_init = _ma_resampler_config_initPtr
      .asFunction<ma_resampler_config Function(int, int, int, int, int)>();

  int ma_resampler_get_heap_size(
    ffi.Pointer<ma_resampler_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_resampler_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_resampler_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resampler_config>,
              ffi.Pointer<ffi.Size>)>>('ma_resampler_get_heap_size');
  late final _ma_resampler_get_heap_size =
      _ma_resampler_get_heap_sizePtr.asFunction<
          int Function(
              ffi.Pointer<ma_resampler_config>, ffi.Pointer<ffi.Size>)>();

  int ma_resampler_init_preallocated(
    ffi.Pointer<ma_resampler_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_init_preallocated(
      pConfig,
      pHeap,
      pResampler,
    );
  }

  late final _ma_resampler_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resampler_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_resampler>)>>('ma_resampler_init_preallocated');
  late final _ma_resampler_init_preallocated =
      _ma_resampler_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_resampler_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_resampler>)>();

  /// Initializes a new resampler object from a config.
  int ma_resampler_init(
    ffi.Pointer<ma_resampler_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_init(
      pConfig,
      pAllocationCallbacks,
      pResampler,
    );
  }

  late final _ma_resampler_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resampler_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_resampler>)>>('ma_resampler_init');
  late final _ma_resampler_init = _ma_resampler_initPtr.asFunction<
      int Function(ffi.Pointer<ma_resampler_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_resampler>)>();

  /// Uninitializes a resampler.
  void ma_resampler_uninit(
    ffi.Pointer<ma_resampler> pResampler,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_resampler_uninit(
      pResampler,
      pAllocationCallbacks,
    );
  }

  late final _ma_resampler_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_resampler>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_resampler_uninit');
  late final _ma_resampler_uninit = _ma_resampler_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_resampler>, ffi.Pointer<ma_allocation_callbacks>)>();

  /// Converts the given input data.
  ///
  /// Both the input and output frames must be in the format specified in the config when the resampler was initilized.
  ///
  /// On input, [pFrameCountOut] contains the number of output frames to process. On output it contains the number of output frames that
  /// were actually processed, which may be less than the requested amount which will happen if there's not enough input data. You can use
  /// ma_resampler_get_expected_output_frame_count() to know how many output frames will be processed for a given number of input frames.
  ///
  /// On input, [pFrameCountIn] contains the number of input frames contained in [pFramesIn]. On output it contains the number of whole
  /// input frames that were actually processed. You can use ma_resampler_get_required_input_frame_count() to know how many input frames
  /// you should provide for a given number of output frames. [pFramesIn] can be NULL, in which case zeroes will be used instead.
  ///
  /// If [pFramesOut] is NULL, a seek is performed. In this case, if [pFrameCountOut] is not NULL it will seek by the specified number of
  /// output frames. Otherwise, if [pFramesCountOut] is NULL and [pFrameCountIn] is not NULL, it will seek by the specified number of input
  /// frames. When seeking, [pFramesIn] is allowed to NULL, in which case the internal timing state will be updated, but no input will be
  /// processed. In this case, any internal filter state will be updated as if zeroes were passed in.
  ///
  /// It is an error for [pFramesOut] to be non-NULL and [pFrameCountOut] to be NULL.
  ///
  /// It is an error for both [pFrameCountOut] and [pFrameCountIn] to be NULL.
  int ma_resampler_process_pcm_frames(
    ffi.Pointer<ma_resampler> pResampler,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ma_uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ma_uint64> pFrameCountOut,
  ) {
    return _ma_resampler_process_pcm_frames(
      pResampler,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _ma_resampler_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resampler>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>>('ma_resampler_process_pcm_frames');
  late final _ma_resampler_process_pcm_frames =
      _ma_resampler_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resampler>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>();

  /// Sets the input and output sample rate.
  int ma_resampler_set_rate(
    ffi.Pointer<ma_resampler> pResampler,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_resampler_set_rate(
      pResampler,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_resampler_set_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resampler>, ma_uint32,
              ma_uint32)>>('ma_resampler_set_rate');
  late final _ma_resampler_set_rate = _ma_resampler_set_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_resampler>, int, int)>();

  /// Sets the input and output sample rate as a ratio.
  ///
  /// The ration is in/out.
  int ma_resampler_set_rate_ratio(
    ffi.Pointer<ma_resampler> pResampler,
    double ratio,
  ) {
    return _ma_resampler_set_rate_ratio(
      pResampler,
      ratio,
    );
  }

  late final _ma_resampler_set_rate_ratioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resampler>,
              ffi.Float)>>('ma_resampler_set_rate_ratio');
  late final _ma_resampler_set_rate_ratio = _ma_resampler_set_rate_ratioPtr
      .asFunction<int Function(ffi.Pointer<ma_resampler>, double)>();

  /// Retrieves the latency introduced by the resampler in input frames.
  int ma_resampler_get_input_latency(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_get_input_latency(
      pResampler,
    );
  }

  late final _ma_resampler_get_input_latencyPtr = _lookup<
          ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_resampler>)>>(
      'ma_resampler_get_input_latency');
  late final _ma_resampler_get_input_latency =
      _ma_resampler_get_input_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_resampler>)>();

  /// Retrieves the latency introduced by the resampler in output frames.
  int ma_resampler_get_output_latency(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_get_output_latency(
      pResampler,
    );
  }

  late final _ma_resampler_get_output_latencyPtr = _lookup<
          ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_resampler>)>>(
      'ma_resampler_get_output_latency');
  late final _ma_resampler_get_output_latency =
      _ma_resampler_get_output_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_resampler>)>();

  /// Calculates the number of whole input frames that would need to be read from the client in order to output the specified
  /// number of output frames.
  ///
  /// The returned value does not include cached input frames. It only returns the number of extra frames that would need to be
  /// read from the input buffer in order to output the specified number of output frames.
  int ma_resampler_get_required_input_frame_count(
    ffi.Pointer<ma_resampler> pResampler,
    int outputFrameCount,
    ffi.Pointer<ma_uint64> pInputFrameCount,
  ) {
    return _ma_resampler_get_required_input_frame_count(
      pResampler,
      outputFrameCount,
      pInputFrameCount,
    );
  }

  late final _ma_resampler_get_required_input_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resampler>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_resampler_get_required_input_frame_count');
  late final _ma_resampler_get_required_input_frame_count =
      _ma_resampler_get_required_input_frame_countPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resampler>, int, ffi.Pointer<ma_uint64>)>();

  /// Calculates the number of whole output frames that would be output after fully reading and consuming the specified number of
  /// input frames.
  int ma_resampler_get_expected_output_frame_count(
    ffi.Pointer<ma_resampler> pResampler,
    int inputFrameCount,
    ffi.Pointer<ma_uint64> pOutputFrameCount,
  ) {
    return _ma_resampler_get_expected_output_frame_count(
      pResampler,
      inputFrameCount,
      pOutputFrameCount,
    );
  }

  late final _ma_resampler_get_expected_output_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resampler>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_resampler_get_expected_output_frame_count');
  late final _ma_resampler_get_expected_output_frame_count =
      _ma_resampler_get_expected_output_frame_countPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resampler>, int, ffi.Pointer<ma_uint64>)>();

  /// Resets the resampler's timer and clears it's internal cache.
  int ma_resampler_reset(
    ffi.Pointer<ma_resampler> pResampler,
  ) {
    return _ma_resampler_reset(
      pResampler,
    );
  }

  late final _ma_resampler_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_resampler>)>>(
      'ma_resampler_reset');
  late final _ma_resampler_reset = _ma_resampler_resetPtr
      .asFunction<int Function(ffi.Pointer<ma_resampler>)>();

  ma_channel_converter_config ma_channel_converter_config_init(
    int format,
    int channelsIn,
    ffi.Pointer<ma_channel> pChannelMapIn,
    int channelsOut,
    ffi.Pointer<ma_channel> pChannelMapOut,
    int mixingMode,
  ) {
    return _ma_channel_converter_config_init(
      format,
      channelsIn,
      pChannelMapIn,
      channelsOut,
      pChannelMapOut,
      mixingMode,
    );
  }

  late final _ma_channel_converter_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_channel_converter_config Function(
              ffi.Int32,
              ma_uint32,
              ffi.Pointer<ma_channel>,
              ma_uint32,
              ffi.Pointer<ma_channel>,
              ffi.Int32)>>('ma_channel_converter_config_init');
  late final _ma_channel_converter_config_init =
      _ma_channel_converter_config_initPtr.asFunction<
          ma_channel_converter_config Function(int, int,
              ffi.Pointer<ma_channel>, int, ffi.Pointer<ma_channel>, int)>();

  int ma_channel_converter_get_heap_size(
    ffi.Pointer<ma_channel_converter_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_channel_converter_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_channel_converter_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ffi.Size>)>>('ma_channel_converter_get_heap_size');
  late final _ma_channel_converter_get_heap_size =
      _ma_channel_converter_get_heap_sizePtr.asFunction<
          int Function(ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ffi.Size>)>();

  int ma_channel_converter_init_preallocated(
    ffi.Pointer<ma_channel_converter_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_channel_converter> pConverter,
  ) {
    return _ma_channel_converter_init_preallocated(
      pConfig,
      pHeap,
      pConverter,
    );
  }

  late final _ma_channel_converter_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_channel_converter_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_channel_converter>)>>(
      'ma_channel_converter_init_preallocated');
  late final _ma_channel_converter_init_preallocated =
      _ma_channel_converter_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ma_channel_converter>)>();

  int ma_channel_converter_init(
    ffi.Pointer<ma_channel_converter_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_channel_converter> pConverter,
  ) {
    return _ma_channel_converter_init(
      pConfig,
      pAllocationCallbacks,
      pConverter,
    );
  }

  late final _ma_channel_converter_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_channel_converter>)>>('ma_channel_converter_init');
  late final _ma_channel_converter_init =
      _ma_channel_converter_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_channel_converter>)>();

  void ma_channel_converter_uninit(
    ffi.Pointer<ma_channel_converter> pConverter,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_channel_converter_uninit(
      pConverter,
      pAllocationCallbacks,
    );
  }

  late final _ma_channel_converter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_channel_converter>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_channel_converter_uninit');
  late final _ma_channel_converter_uninit =
      _ma_channel_converter_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_channel_converter_process_pcm_frames(
    ffi.Pointer<ma_channel_converter> pConverter,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
  ) {
    return _ma_channel_converter_process_pcm_frames(
      pConverter,
      pFramesOut,
      pFramesIn,
      frameCount,
    );
  }

  late final _ma_channel_converter_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_channel_converter_process_pcm_frames');
  late final _ma_channel_converter_process_pcm_frames =
      _ma_channel_converter_process_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_channel_converter>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_channel_converter_get_input_channel_map(
    ffi.Pointer<ma_channel_converter> pConverter,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_channel_converter_get_input_channel_map(
      pConverter,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_channel_converter_get_input_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_channel_converter_get_input_channel_map');
  late final _ma_channel_converter_get_input_channel_map =
      _ma_channel_converter_get_input_channel_mapPtr.asFunction<
          int Function(ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ma_channel>, int)>();

  int ma_channel_converter_get_output_channel_map(
    ffi.Pointer<ma_channel_converter> pConverter,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_channel_converter_get_output_channel_map(
      pConverter,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_channel_converter_get_output_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_channel_converter_get_output_channel_map');
  late final _ma_channel_converter_get_output_channel_map =
      _ma_channel_converter_get_output_channel_mapPtr.asFunction<
          int Function(ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ma_channel>, int)>();

  ma_data_converter_config ma_data_converter_config_init_default() {
    return _ma_data_converter_config_init_default();
  }

  late final _ma_data_converter_config_init_defaultPtr =
      _lookup<ffi.NativeFunction<ma_data_converter_config Function()>>(
          'ma_data_converter_config_init_default');
  late final _ma_data_converter_config_init_default =
      _ma_data_converter_config_init_defaultPtr
          .asFunction<ma_data_converter_config Function()>();

  ma_data_converter_config ma_data_converter_config_init(
    int formatIn,
    int formatOut,
    int channelsIn,
    int channelsOut,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_data_converter_config_init(
      formatIn,
      formatOut,
      channelsIn,
      channelsOut,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_data_converter_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_data_converter_config Function(
              ffi.Int32,
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ma_uint32)>>('ma_data_converter_config_init');
  late final _ma_data_converter_config_init =
      _ma_data_converter_config_initPtr.asFunction<
          ma_data_converter_config Function(int, int, int, int, int, int)>();

  int ma_data_converter_get_heap_size(
    ffi.Pointer<ma_data_converter_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_data_converter_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_data_converter_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_converter_config>,
              ffi.Pointer<ffi.Size>)>>('ma_data_converter_get_heap_size');
  late final _ma_data_converter_get_heap_size =
      _ma_data_converter_get_heap_sizePtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_converter_config>, ffi.Pointer<ffi.Size>)>();

  int ma_data_converter_init_preallocated(
    ffi.Pointer<ma_data_converter_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_init_preallocated(
      pConfig,
      pHeap,
      pConverter,
    );
  }

  late final _ma_data_converter_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_converter_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_data_converter>)>>(
      'ma_data_converter_init_preallocated');
  late final _ma_data_converter_init_preallocated =
      _ma_data_converter_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_data_converter_config>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ma_data_converter>)>();

  int ma_data_converter_init(
    ffi.Pointer<ma_data_converter_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_init(
      pConfig,
      pAllocationCallbacks,
      pConverter,
    );
  }

  late final _ma_data_converter_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_converter_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_data_converter>)>>('ma_data_converter_init');
  late final _ma_data_converter_init = _ma_data_converter_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_data_converter_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_data_converter>)>();

  void ma_data_converter_uninit(
    ffi.Pointer<ma_data_converter> pConverter,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_data_converter_uninit(
      pConverter,
      pAllocationCallbacks,
    );
  }

  late final _ma_data_converter_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_data_converter>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_data_converter_uninit');
  late final _ma_data_converter_uninit =
      _ma_data_converter_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_data_converter_process_pcm_frames(
    ffi.Pointer<ma_data_converter> pConverter,
    ffi.Pointer<ffi.Void> pFramesIn,
    ffi.Pointer<ma_uint64> pFrameCountIn,
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ma_uint64> pFrameCountOut,
  ) {
    return _ma_data_converter_process_pcm_frames(
      pConverter,
      pFramesIn,
      pFrameCountIn,
      pFramesOut,
      pFrameCountOut,
    );
  }

  late final _ma_data_converter_process_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>>('ma_data_converter_process_pcm_frames');
  late final _ma_data_converter_process_pcm_frames =
      _ma_data_converter_process_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>();

  int ma_data_converter_set_rate(
    ffi.Pointer<ma_data_converter> pConverter,
    int sampleRateIn,
    int sampleRateOut,
  ) {
    return _ma_data_converter_set_rate(
      pConverter,
      sampleRateIn,
      sampleRateOut,
    );
  }

  late final _ma_data_converter_set_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_converter>, ma_uint32,
              ma_uint32)>>('ma_data_converter_set_rate');
  late final _ma_data_converter_set_rate = _ma_data_converter_set_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_data_converter>, int, int)>();

  int ma_data_converter_set_rate_ratio(
    ffi.Pointer<ma_data_converter> pConverter,
    double ratioInOut,
  ) {
    return _ma_data_converter_set_rate_ratio(
      pConverter,
      ratioInOut,
    );
  }

  late final _ma_data_converter_set_rate_ratioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_converter>,
              ffi.Float)>>('ma_data_converter_set_rate_ratio');
  late final _ma_data_converter_set_rate_ratio =
      _ma_data_converter_set_rate_ratioPtr
          .asFunction<int Function(ffi.Pointer<ma_data_converter>, double)>();

  int ma_data_converter_get_input_latency(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_get_input_latency(
      pConverter,
    );
  }

  late final _ma_data_converter_get_input_latencyPtr = _lookup<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_data_converter>)>>(
      'ma_data_converter_get_input_latency');
  late final _ma_data_converter_get_input_latency =
      _ma_data_converter_get_input_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_data_converter>)>();

  int ma_data_converter_get_output_latency(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_get_output_latency(
      pConverter,
    );
  }

  late final _ma_data_converter_get_output_latencyPtr = _lookup<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_data_converter>)>>(
      'ma_data_converter_get_output_latency');
  late final _ma_data_converter_get_output_latency =
      _ma_data_converter_get_output_latencyPtr
          .asFunction<int Function(ffi.Pointer<ma_data_converter>)>();

  int ma_data_converter_get_required_input_frame_count(
    ffi.Pointer<ma_data_converter> pConverter,
    int outputFrameCount,
    ffi.Pointer<ma_uint64> pInputFrameCount,
  ) {
    return _ma_data_converter_get_required_input_frame_count(
      pConverter,
      outputFrameCount,
      pInputFrameCount,
    );
  }

  late final _ma_data_converter_get_required_input_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_converter>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_data_converter_get_required_input_frame_count');
  late final _ma_data_converter_get_required_input_frame_count =
      _ma_data_converter_get_required_input_frame_countPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_converter>, int, ffi.Pointer<ma_uint64>)>();

  int ma_data_converter_get_expected_output_frame_count(
    ffi.Pointer<ma_data_converter> pConverter,
    int inputFrameCount,
    ffi.Pointer<ma_uint64> pOutputFrameCount,
  ) {
    return _ma_data_converter_get_expected_output_frame_count(
      pConverter,
      inputFrameCount,
      pOutputFrameCount,
    );
  }

  late final _ma_data_converter_get_expected_output_frame_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_converter>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_data_converter_get_expected_output_frame_count');
  late final _ma_data_converter_get_expected_output_frame_count =
      _ma_data_converter_get_expected_output_frame_countPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_converter>, int, ffi.Pointer<ma_uint64>)>();

  int ma_data_converter_get_input_channel_map(
    ffi.Pointer<ma_data_converter> pConverter,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_data_converter_get_input_channel_map(
      pConverter,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_data_converter_get_input_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_data_converter_get_input_channel_map');
  late final _ma_data_converter_get_input_channel_map =
      _ma_data_converter_get_input_channel_mapPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_converter>, ffi.Pointer<ma_channel>, int)>();

  int ma_data_converter_get_output_channel_map(
    ffi.Pointer<ma_data_converter> pConverter,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_data_converter_get_output_channel_map(
      pConverter,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_data_converter_get_output_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_data_converter_get_output_channel_map');
  late final _ma_data_converter_get_output_channel_map =
      _ma_data_converter_get_output_channel_mapPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_converter>, ffi.Pointer<ma_channel>, int)>();

  int ma_data_converter_reset(
    ffi.Pointer<ma_data_converter> pConverter,
  ) {
    return _ma_data_converter_reset(
      pConverter,
    );
  }

  late final _ma_data_converter_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_converter>)>>('ma_data_converter_reset');
  late final _ma_data_converter_reset = _ma_data_converter_resetPtr
      .asFunction<int Function(ffi.Pointer<ma_data_converter>)>();

  /// Format Conversion
  void ma_pcm_u8_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_u8_to_s16');
  late final _ma_pcm_u8_to_s16 = _ma_pcm_u8_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_u8_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_u8_to_s24');
  late final _ma_pcm_u8_to_s24 = _ma_pcm_u8_to_s24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_u8_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_u8_to_s32');
  late final _ma_pcm_u8_to_s32 = _ma_pcm_u8_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_u8_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_u8_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_u8_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_u8_to_f32');
  late final _ma_pcm_u8_to_f32 = _ma_pcm_u8_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s16_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s16_to_u8');
  late final _ma_pcm_s16_to_u8 = _ma_pcm_s16_to_u8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s16_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s16_to_s24');
  late final _ma_pcm_s16_to_s24 = _ma_pcm_s16_to_s24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s16_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s16_to_s32');
  late final _ma_pcm_s16_to_s32 = _ma_pcm_s16_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s16_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s16_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s16_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s16_to_f32');
  late final _ma_pcm_s16_to_f32 = _ma_pcm_s16_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s24_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s24_to_u8');
  late final _ma_pcm_s24_to_u8 = _ma_pcm_s24_to_u8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s24_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s24_to_s16');
  late final _ma_pcm_s24_to_s16 = _ma_pcm_s24_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s24_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s24_to_s32');
  late final _ma_pcm_s24_to_s32 = _ma_pcm_s24_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s24_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s24_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s24_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s24_to_f32');
  late final _ma_pcm_s24_to_f32 = _ma_pcm_s24_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s32_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s32_to_u8');
  late final _ma_pcm_s32_to_u8 = _ma_pcm_s32_to_u8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s32_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s32_to_s16');
  late final _ma_pcm_s32_to_s16 = _ma_pcm_s32_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s32_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s32_to_s24');
  late final _ma_pcm_s32_to_s24 = _ma_pcm_s32_to_s24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_s32_to_f32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_s32_to_f32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_s32_to_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_s32_to_f32');
  late final _ma_pcm_s32_to_f32 = _ma_pcm_s32_to_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_f32_to_u8(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_u8(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_f32_to_u8');
  late final _ma_pcm_f32_to_u8 = _ma_pcm_f32_to_u8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_f32_to_s16(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_s16(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_f32_to_s16');
  late final _ma_pcm_f32_to_s16 = _ma_pcm_f32_to_s16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_f32_to_s24(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_s24(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_f32_to_s24');
  late final _ma_pcm_f32_to_s24 = _ma_pcm_f32_to_s24Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_f32_to_s32(
    ffi.Pointer<ffi.Void> pOut,
    ffi.Pointer<ffi.Void> pIn,
    int count,
    int ditherMode,
  ) {
    return _ma_pcm_f32_to_s32(
      pOut,
      pIn,
      count,
      ditherMode,
    );
  }

  late final _ma_pcm_f32_to_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32)>>('ma_pcm_f32_to_s32');
  late final _ma_pcm_f32_to_s32 = _ma_pcm_f32_to_s32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  void ma_pcm_convert(
    ffi.Pointer<ffi.Void> pOut,
    int formatOut,
    ffi.Pointer<ffi.Void> pIn,
    int formatIn,
    int sampleCount,
    int ditherMode,
  ) {
    return _ma_pcm_convert(
      pOut,
      formatOut,
      pIn,
      formatIn,
      sampleCount,
      ditherMode,
    );
  }

  late final _ma_pcm_convertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ma_uint64,
              ffi.Int32)>>('ma_pcm_convert');
  late final _ma_pcm_convert = _ma_pcm_convertPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int, int, int)>();

  void ma_convert_pcm_frames_format(
    ffi.Pointer<ffi.Void> pOut,
    int formatOut,
    ffi.Pointer<ffi.Void> pIn,
    int formatIn,
    int frameCount,
    int channels,
    int ditherMode,
  ) {
    return _ma_convert_pcm_frames_format(
      pOut,
      formatOut,
      pIn,
      formatIn,
      frameCount,
      channels,
      ditherMode,
    );
  }

  late final _ma_convert_pcm_frames_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ma_uint64,
              ma_uint32,
              ffi.Int32)>>('ma_convert_pcm_frames_format');
  late final _ma_convert_pcm_frames_format =
      _ma_convert_pcm_frames_formatPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int,
              int, int, int)>();

  /// Deinterleaves an interleaved buffer.
  void ma_deinterleave_pcm_frames(
    int format,
    int channels,
    int frameCount,
    ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
  ) {
    return _ma_deinterleave_pcm_frames(
      format,
      channels,
      frameCount,
      pInterleavedPCMFrames,
      ppDeinterleavedPCMFrames,
    );
  }

  late final _ma_deinterleave_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int32, ma_uint32, ma_uint64,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'ma_deinterleave_pcm_frames');
  late final _ma_deinterleave_pcm_frames =
      _ma_deinterleave_pcm_framesPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Interleaves a group of deinterleaved buffers.
  void ma_interleave_pcm_frames(
    int format,
    int channels,
    int frameCount,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppDeinterleavedPCMFrames,
    ffi.Pointer<ffi.Void> pInterleavedPCMFrames,
  ) {
    return _ma_interleave_pcm_frames(
      format,
      channels,
      frameCount,
      ppDeinterleavedPCMFrames,
      pInterleavedPCMFrames,
    );
  }

  late final _ma_interleave_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ma_uint32,
              ma_uint64,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>)>>('ma_interleave_pcm_frames');
  late final _ma_interleave_pcm_frames =
      _ma_interleave_pcm_framesPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>)>();

  /// Retrieves the channel position of the specified channel in the given channel map.
  ///
  /// The pChannelMap parameter can be null, in which case miniaudio's default channel map will be assumed.
  int ma_channel_map_get_channel(
    ffi.Pointer<ma_channel> pChannelMap,
    int channelCount,
    int channelIndex,
  ) {
    return _ma_channel_map_get_channel(
      pChannelMap,
      channelCount,
      channelIndex,
    );
  }

  late final _ma_channel_map_get_channelPtr = _lookup<
      ffi.NativeFunction<
          ma_channel Function(ffi.Pointer<ma_channel>, ma_uint32,
              ma_uint32)>>('ma_channel_map_get_channel');
  late final _ma_channel_map_get_channel = _ma_channel_map_get_channelPtr
      .asFunction<int Function(ffi.Pointer<ma_channel>, int, int)>();

  /// Initializes a blank channel map.
  ///
  /// When a blank channel map is specified anywhere it indicates that the native channel map should be used.
  void ma_channel_map_init_blank(
    ffi.Pointer<ma_channel> pChannelMap,
    int channels,
  ) {
    return _ma_channel_map_init_blank(
      pChannelMap,
      channels,
    );
  }

  late final _ma_channel_map_init_blankPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_channel>,
              ma_uint32)>>('ma_channel_map_init_blank');
  late final _ma_channel_map_init_blank = _ma_channel_map_init_blankPtr
      .asFunction<void Function(ffi.Pointer<ma_channel>, int)>();

  /// Helper for retrieving a standard channel map.
  ///
  /// The output channel map buffer must have a capacity of at least `channelMapCap`.
  void ma_channel_map_init_standard(
    int standardChannelMap,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
    int channels,
  ) {
    return _ma_channel_map_init_standard(
      standardChannelMap,
      pChannelMap,
      channelMapCap,
      channels,
    );
  }

  late final _ma_channel_map_init_standardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ma_channel>, ffi.Size,
              ma_uint32)>>('ma_channel_map_init_standard');
  late final _ma_channel_map_init_standard = _ma_channel_map_init_standardPtr
      .asFunction<void Function(int, ffi.Pointer<ma_channel>, int, int)>();

  /// Copies a channel map.
  ///
  /// Both input and output channel map buffers must have a capacity of at at least `channels`.
  void ma_channel_map_copy(
    ffi.Pointer<ma_channel> pOut,
    ffi.Pointer<ma_channel> pIn,
    int channels,
  ) {
    return _ma_channel_map_copy(
      pOut,
      pIn,
      channels,
    );
  }

  late final _ma_channel_map_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>,
              ma_uint32)>>('ma_channel_map_copy');
  late final _ma_channel_map_copy = _ma_channel_map_copyPtr.asFunction<
      void Function(ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>, int)>();

  /// Copies a channel map if one is specified, otherwise copies the default channel map.
  ///
  /// The output buffer must have a capacity of at least `channels`. If not NULL, the input channel map must also have a capacity of at least `channels`.
  void ma_channel_map_copy_or_default(
    ffi.Pointer<ma_channel> pOut,
    int channelMapCapOut,
    ffi.Pointer<ma_channel> pIn,
    int channels,
  ) {
    return _ma_channel_map_copy_or_default(
      pOut,
      channelMapCapOut,
      pIn,
      channels,
    );
  }

  late final _ma_channel_map_copy_or_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_channel>,
              ffi.Size,
              ffi.Pointer<ma_channel>,
              ma_uint32)>>('ma_channel_map_copy_or_default');
  late final _ma_channel_map_copy_or_default =
      _ma_channel_map_copy_or_defaultPtr.asFunction<
          void Function(
              ffi.Pointer<ma_channel>, int, ffi.Pointer<ma_channel>, int)>();

  /// Determines whether or not a channel map is valid.
  ///
  /// A blank channel map is valid (all channels set to MA_CHANNEL_NONE). The way a blank channel map is handled is context specific, but
  /// is usually treated as a passthrough.
  ///
  /// Invalid channel maps:
  /// - A channel map with no channels
  /// - A channel map with more than one channel and a mono channel
  ///
  /// The channel map buffer must have a capacity of at least `channels`.
  int ma_channel_map_is_valid(
    ffi.Pointer<ma_channel> pChannelMap,
    int channels,
  ) {
    return _ma_channel_map_is_valid(
      pChannelMap,
      channels,
    );
  }

  late final _ma_channel_map_is_validPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(
              ffi.Pointer<ma_channel>, ma_uint32)>>('ma_channel_map_is_valid');
  late final _ma_channel_map_is_valid = _ma_channel_map_is_validPtr
      .asFunction<int Function(ffi.Pointer<ma_channel>, int)>();

  /// Helper for comparing two channel maps for equality.
  ///
  /// This assumes the channel count is the same between the two.
  ///
  /// Both channels map buffers must have a capacity of at least `channels`.
  int ma_channel_map_is_equal(
    ffi.Pointer<ma_channel> pChannelMapA,
    ffi.Pointer<ma_channel> pChannelMapB,
    int channels,
  ) {
    return _ma_channel_map_is_equal(
      pChannelMapA,
      pChannelMapB,
      channels,
    );
  }

  late final _ma_channel_map_is_equalPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>,
              ma_uint32)>>('ma_channel_map_is_equal');
  late final _ma_channel_map_is_equal = _ma_channel_map_is_equalPtr.asFunction<
      int Function(ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>, int)>();

  /// Helper for determining if a channel map is blank (all channels set to MA_CHANNEL_NONE).
  ///
  /// The channel map buffer must have a capacity of at least `channels`.
  int ma_channel_map_is_blank(
    ffi.Pointer<ma_channel> pChannelMap,
    int channels,
  ) {
    return _ma_channel_map_is_blank(
      pChannelMap,
      channels,
    );
  }

  late final _ma_channel_map_is_blankPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(
              ffi.Pointer<ma_channel>, ma_uint32)>>('ma_channel_map_is_blank');
  late final _ma_channel_map_is_blank = _ma_channel_map_is_blankPtr
      .asFunction<int Function(ffi.Pointer<ma_channel>, int)>();

  /// Helper for determining whether or not a channel is present in the given channel map.
  ///
  /// The channel map buffer must have a capacity of at least `channels`.
  int ma_channel_map_contains_channel_position(
    int channels,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelPosition,
  ) {
    return _ma_channel_map_contains_channel_position(
      channels,
      pChannelMap,
      channelPosition,
    );
  }

  late final _ma_channel_map_contains_channel_positionPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(ma_uint32, ffi.Pointer<ma_channel>,
              ma_channel)>>('ma_channel_map_contains_channel_position');
  late final _ma_channel_map_contains_channel_position =
      _ma_channel_map_contains_channel_positionPtr
          .asFunction<int Function(int, ffi.Pointer<ma_channel>, int)>();

  /// Find a channel position in the given channel map. Returns MA_TRUE if the channel is found; MA_FALSE otherwise. The
  /// index of the channel is output to `pChannelIndex`.
  ///
  /// The channel map buffer must have a capacity of at least `channels`.
  int ma_channel_map_find_channel_position(
    int channels,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelPosition,
    ffi.Pointer<ma_uint32> pChannelIndex,
  ) {
    return _ma_channel_map_find_channel_position(
      channels,
      pChannelMap,
      channelPosition,
      pChannelIndex,
    );
  }

  late final _ma_channel_map_find_channel_positionPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(ma_uint32, ffi.Pointer<ma_channel>, ma_channel,
              ffi.Pointer<ma_uint32>)>>('ma_channel_map_find_channel_position');
  late final _ma_channel_map_find_channel_position =
      _ma_channel_map_find_channel_positionPtr.asFunction<
          int Function(
              int, ffi.Pointer<ma_channel>, int, ffi.Pointer<ma_uint32>)>();

  /// Generates a string representing the given channel map.
  ///
  /// This is for printing and debugging purposes, not serialization/deserialization.
  ///
  /// Returns the length of the string, not including the null terminator.
  int ma_channel_map_to_string(
    ffi.Pointer<ma_channel> pChannelMap,
    int channels,
    ffi.Pointer<ffi.Char> pBufferOut,
    int bufferCap,
  ) {
    return _ma_channel_map_to_string(
      pChannelMap,
      channels,
      pBufferOut,
      bufferCap,
    );
  }

  late final _ma_channel_map_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ma_channel>, ma_uint32,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('ma_channel_map_to_string');
  late final _ma_channel_map_to_string =
      _ma_channel_map_to_stringPtr.asFunction<
          int Function(
              ffi.Pointer<ma_channel>, int, ffi.Pointer<ffi.Char>, int)>();

  /// Retrieves a human readable version of a channel position.
  ffi.Pointer<ffi.Char> ma_channel_position_to_string(
    int channel,
  ) {
    return _ma_channel_position_to_string(
      channel,
    );
  }

  late final _ma_channel_position_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ma_channel)>>(
          'ma_channel_position_to_string');
  late final _ma_channel_position_to_string = _ma_channel_position_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// High-level helper for doing a full format conversion in one go. Returns the number of output frames. Call this with pOut set to NULL to
  /// determine the required size of the output buffer. frameCountOut should be set to the capacity of pOut. If pOut is NULL, frameCountOut is
  /// ignored.
  ///
  /// A return value of 0 indicates an error.
  ///
  /// This function is useful for one-off bulk conversions, but if you're streaming data you should use the ma_data_converter APIs instead.
  int ma_convert_frames(
    ffi.Pointer<ffi.Void> pOut,
    int frameCountOut,
    int formatOut,
    int channelsOut,
    int sampleRateOut,
    ffi.Pointer<ffi.Void> pIn,
    int frameCountIn,
    int formatIn,
    int channelsIn,
    int sampleRateIn,
  ) {
    return _ma_convert_frames(
      pOut,
      frameCountOut,
      formatOut,
      channelsOut,
      sampleRateOut,
      pIn,
      frameCountIn,
      formatIn,
      channelsIn,
      sampleRateIn,
    );
  }

  late final _ma_convert_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32)>>('ma_convert_frames');
  late final _ma_convert_frames = _ma_convert_framesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, int,
          ffi.Pointer<ffi.Void>, int, int, int, int)>();

  int ma_convert_frames_ex(
    ffi.Pointer<ffi.Void> pOut,
    int frameCountOut,
    ffi.Pointer<ffi.Void> pIn,
    int frameCountIn,
    ffi.Pointer<ma_data_converter_config> pConfig,
  ) {
    return _ma_convert_frames_ex(
      pOut,
      frameCountOut,
      pIn,
      frameCountIn,
      pConfig,
    );
  }

  late final _ma_convert_frames_exPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_data_converter_config>)>>('ma_convert_frames_ex');
  late final _ma_convert_frames_ex = _ma_convert_frames_exPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ma_data_converter_config>)>();

  ma_data_source_config ma_data_source_config_init() {
    return _ma_data_source_config_init();
  }

  late final _ma_data_source_config_initPtr =
      _lookup<ffi.NativeFunction<ma_data_source_config Function()>>(
          'ma_data_source_config_init');
  late final _ma_data_source_config_init = _ma_data_source_config_initPtr
      .asFunction<ma_data_source_config Function()>();

  int ma_data_source_init(
    ffi.Pointer<ma_data_source_config> pConfig,
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_init(
      pConfig,
      pDataSource,
    );
  }

  late final _ma_data_source_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source_config>,
              ffi.Pointer<ma_data_source>)>>('ma_data_source_init');
  late final _ma_data_source_init = _ma_data_source_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_data_source_config>, ffi.Pointer<ma_data_source>)>();

  void ma_data_source_uninit(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_uninit(
      pDataSource,
    );
  }

  late final _ma_data_source_uninitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_data_source>)>>(
      'ma_data_source_uninit');
  late final _ma_data_source_uninit = _ma_data_source_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_data_source>)>();

  int ma_data_source_read_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_data_source_read_pcm_frames(
      pDataSource,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_data_source_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_data_source_read_pcm_frames');
  late final _ma_data_source_read_pcm_frames =
      _ma_data_source_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>();

  int ma_data_source_seek_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesSeeked,
  ) {
    return _ma_data_source_seek_pcm_frames(
      pDataSource,
      frameCount,
      pFramesSeeked,
    );
  }

  late final _ma_data_source_seek_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>, ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_data_source_seek_pcm_frames');
  late final _ma_data_source_seek_pcm_frames =
      _ma_data_source_seek_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_source>, int, ffi.Pointer<ma_uint64>)>();

  int ma_data_source_seek_to_pcm_frame(
    ffi.Pointer<ma_data_source> pDataSource,
    int frameIndex,
  ) {
    return _ma_data_source_seek_to_pcm_frame(
      pDataSource,
      frameIndex,
    );
  }

  late final _ma_data_source_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>,
              ma_uint64)>>('ma_data_source_seek_to_pcm_frame');
  late final _ma_data_source_seek_to_pcm_frame =
      _ma_data_source_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_data_source>, int)>();

  int ma_data_source_get_data_format(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_data_source_get_data_format(
      pDataSource,
      pFormat,
      pChannels,
      pSampleRate,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_data_source_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_data_source_get_data_format');
  late final _ma_data_source_get_data_format =
      _ma_data_source_get_data_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              int)>();

  int ma_data_source_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_data_source_get_cursor_in_pcm_frames(
      pDataSource,
      pCursor,
    );
  }

  late final _ma_data_source_get_cursor_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>>(
      'ma_data_source_get_cursor_in_pcm_frames');
  late final _ma_data_source_get_cursor_in_pcm_frames =
      _ma_data_source_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>();

  int ma_data_source_get_length_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_data_source_get_length_in_pcm_frames(
      pDataSource,
      pLength,
    );
  }

  late final _ma_data_source_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>>(
      'ma_data_source_get_length_in_pcm_frames');
  late final _ma_data_source_get_length_in_pcm_frames =
      _ma_data_source_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>();

  int ma_data_source_get_cursor_in_seconds(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ffi.Float> pCursor,
  ) {
    return _ma_data_source_get_cursor_in_seconds(
      pDataSource,
      pCursor,
    );
  }

  late final _ma_data_source_get_cursor_in_secondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Float>)>>('ma_data_source_get_cursor_in_seconds');
  late final _ma_data_source_get_cursor_in_seconds =
      _ma_data_source_get_cursor_in_secondsPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ffi.Float>)>();

  int ma_data_source_get_length_in_seconds(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ffi.Float> pLength,
  ) {
    return _ma_data_source_get_length_in_seconds(
      pDataSource,
      pLength,
    );
  }

  late final _ma_data_source_get_length_in_secondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Float>)>>('ma_data_source_get_length_in_seconds');
  late final _ma_data_source_get_length_in_seconds =
      _ma_data_source_get_length_in_secondsPtr.asFunction<
          int Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ffi.Float>)>();

  int ma_data_source_set_looping(
    ffi.Pointer<ma_data_source> pDataSource,
    int isLooping,
  ) {
    return _ma_data_source_set_looping(
      pDataSource,
      isLooping,
    );
  }

  late final _ma_data_source_set_loopingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>,
              ma_bool32)>>('ma_data_source_set_looping');
  late final _ma_data_source_set_looping = _ma_data_source_set_loopingPtr
      .asFunction<int Function(ffi.Pointer<ma_data_source>, int)>();

  int ma_data_source_is_looping(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_is_looping(
      pDataSource,
    );
  }

  late final _ma_data_source_is_loopingPtr = _lookup<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_data_source>)>>(
      'ma_data_source_is_looping');
  late final _ma_data_source_is_looping = _ma_data_source_is_loopingPtr
      .asFunction<int Function(ffi.Pointer<ma_data_source>)>();

  int ma_data_source_set_range_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    int rangeBegInFrames,
    int rangeEndInFrames,
  ) {
    return _ma_data_source_set_range_in_pcm_frames(
      pDataSource,
      rangeBegInFrames,
      rangeEndInFrames,
    );
  }

  late final _ma_data_source_set_range_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>, ma_uint64,
              ma_uint64)>>('ma_data_source_set_range_in_pcm_frames');
  late final _ma_data_source_set_range_in_pcm_frames =
      _ma_data_source_set_range_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_data_source>, int, int)>();

  void ma_data_source_get_range_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pRangeBegInFrames,
    ffi.Pointer<ma_uint64> pRangeEndInFrames,
  ) {
    return _ma_data_source_get_range_in_pcm_frames(
      pDataSource,
      pRangeBegInFrames,
      pRangeEndInFrames,
    );
  }

  late final _ma_data_source_get_range_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_data_source>,
                  ffi.Pointer<ma_uint64>, ffi.Pointer<ma_uint64>)>>(
      'ma_data_source_get_range_in_pcm_frames');
  late final _ma_data_source_get_range_in_pcm_frames =
      _ma_data_source_get_range_in_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>,
              ffi.Pointer<ma_uint64>)>();

  int ma_data_source_set_loop_point_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    int loopBegInFrames,
    int loopEndInFrames,
  ) {
    return _ma_data_source_set_loop_point_in_pcm_frames(
      pDataSource,
      loopBegInFrames,
      loopEndInFrames,
    );
  }

  late final _ma_data_source_set_loop_point_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>, ma_uint64,
              ma_uint64)>>('ma_data_source_set_loop_point_in_pcm_frames');
  late final _ma_data_source_set_loop_point_in_pcm_frames =
      _ma_data_source_set_loop_point_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_data_source>, int, int)>();

  void ma_data_source_get_loop_point_in_pcm_frames(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pLoopBegInFrames,
    ffi.Pointer<ma_uint64> pLoopEndInFrames,
  ) {
    return _ma_data_source_get_loop_point_in_pcm_frames(
      pDataSource,
      pLoopBegInFrames,
      pLoopEndInFrames,
    );
  }

  late final _ma_data_source_get_loop_point_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_data_source>,
                  ffi.Pointer<ma_uint64>, ffi.Pointer<ma_uint64>)>>(
      'ma_data_source_get_loop_point_in_pcm_frames');
  late final _ma_data_source_get_loop_point_in_pcm_frames =
      _ma_data_source_get_loop_point_in_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>,
              ffi.Pointer<ma_uint64>)>();

  int ma_data_source_set_current(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_data_source> pCurrentDataSource,
  ) {
    return _ma_data_source_set_current(
      pDataSource,
      pCurrentDataSource,
    );
  }

  late final _ma_data_source_set_currentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ma_data_source>)>>('ma_data_source_set_current');
  late final _ma_data_source_set_current =
      _ma_data_source_set_currentPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_source>, ffi.Pointer<ma_data_source>)>();

  ffi.Pointer<ma_data_source> ma_data_source_get_current(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_get_current(
      pDataSource,
    );
  }

  late final _ma_data_source_get_currentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_data_source> Function(
              ffi.Pointer<ma_data_source>)>>('ma_data_source_get_current');
  late final _ma_data_source_get_current =
      _ma_data_source_get_currentPtr.asFunction<
          ffi.Pointer<ma_data_source> Function(ffi.Pointer<ma_data_source>)>();

  int ma_data_source_set_next(
    ffi.Pointer<ma_data_source> pDataSource,
    ffi.Pointer<ma_data_source> pNextDataSource,
  ) {
    return _ma_data_source_set_next(
      pDataSource,
      pNextDataSource,
    );
  }

  late final _ma_data_source_set_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>,
              ffi.Pointer<ma_data_source>)>>('ma_data_source_set_next');
  late final _ma_data_source_set_next = _ma_data_source_set_nextPtr.asFunction<
      int Function(ffi.Pointer<ma_data_source>, ffi.Pointer<ma_data_source>)>();

  ffi.Pointer<ma_data_source> ma_data_source_get_next(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_get_next(
      pDataSource,
    );
  }

  late final _ma_data_source_get_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_data_source> Function(
              ffi.Pointer<ma_data_source>)>>('ma_data_source_get_next');
  late final _ma_data_source_get_next = _ma_data_source_get_nextPtr.asFunction<
      ffi.Pointer<ma_data_source> Function(ffi.Pointer<ma_data_source>)>();

  int ma_data_source_set_next_callback(
    ffi.Pointer<ma_data_source> pDataSource,
    ma_data_source_get_next_proc onGetNext,
  ) {
    return _ma_data_source_set_next_callback(
      pDataSource,
      onGetNext,
    );
  }

  late final _ma_data_source_set_next_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ma_data_source_get_next_proc)>>(
      'ma_data_source_set_next_callback');
  late final _ma_data_source_set_next_callback =
      _ma_data_source_set_next_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<ma_data_source>, ma_data_source_get_next_proc)>();

  ma_data_source_get_next_proc ma_data_source_get_next_callback(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_get_next_callback(
      pDataSource,
    );
  }

  late final _ma_data_source_get_next_callbackPtr = _lookup<
          ffi.NativeFunction<
              ma_data_source_get_next_proc Function(
                  ffi.Pointer<ma_data_source>)>>(
      'ma_data_source_get_next_callback');
  late final _ma_data_source_get_next_callback =
      _ma_data_source_get_next_callbackPtr.asFunction<
          ma_data_source_get_next_proc Function(ffi.Pointer<ma_data_source>)>();

  int ma_audio_buffer_ref_init(
    int format,
    int channels,
    ffi.Pointer<ffi.Void> pData,
    int sizeInFrames,
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ) {
    return _ma_audio_buffer_ref_init(
      format,
      channels,
      pData,
      sizeInFrames,
      pAudioBufferRef,
    );
  }

  late final _ma_audio_buffer_ref_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_audio_buffer_ref>)>>('ma_audio_buffer_ref_init');
  late final _ma_audio_buffer_ref_init =
      _ma_audio_buffer_ref_initPtr.asFunction<
          int Function(int, int, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_audio_buffer_ref>)>();

  void ma_audio_buffer_ref_uninit(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ) {
    return _ma_audio_buffer_ref_uninit(
      pAudioBufferRef,
    );
  }

  late final _ma_audio_buffer_ref_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_audio_buffer_ref>)>>('ma_audio_buffer_ref_uninit');
  late final _ma_audio_buffer_ref_uninit = _ma_audio_buffer_ref_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_audio_buffer_ref>)>();

  int ma_audio_buffer_ref_set_data(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Void> pData,
    int sizeInFrames,
  ) {
    return _ma_audio_buffer_ref_set_data(
      pAudioBufferRef,
      pData,
      sizeInFrames,
    );
  }

  late final _ma_audio_buffer_ref_set_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>>('ma_audio_buffer_ref_set_data');
  late final _ma_audio_buffer_ref_set_data =
      _ma_audio_buffer_ref_set_dataPtr.asFunction<
          int Function(
              ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ffi.Void>, int)>();

  int ma_audio_buffer_ref_read_pcm_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    int loop,
  ) {
    return _ma_audio_buffer_ref_read_pcm_frames(
      pAudioBufferRef,
      pFramesOut,
      frameCount,
      loop,
    );
  }

  late final _ma_audio_buffer_ref_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ma_bool32)>>('ma_audio_buffer_ref_read_pcm_frames');
  late final _ma_audio_buffer_ref_read_pcm_frames =
      _ma_audio_buffer_ref_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ffi.Void>,
              int, int)>();

  int ma_audio_buffer_ref_seek_to_pcm_frame(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    int frameIndex,
  ) {
    return _ma_audio_buffer_ref_seek_to_pcm_frame(
      pAudioBufferRef,
      frameIndex,
    );
  }

  late final _ma_audio_buffer_ref_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_ref>,
              ma_uint64)>>('ma_audio_buffer_ref_seek_to_pcm_frame');
  late final _ma_audio_buffer_ref_seek_to_pcm_frame =
      _ma_audio_buffer_ref_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_audio_buffer_ref>, int)>();

  int ma_audio_buffer_ref_map(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
    ffi.Pointer<ma_uint64> pFrameCount,
  ) {
    return _ma_audio_buffer_ref_map(
      pAudioBufferRef,
      ppFramesOut,
      pFrameCount,
    );
  }

  late final _ma_audio_buffer_ref_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ma_uint64>)>>('ma_audio_buffer_ref_map');
  late final _ma_audio_buffer_ref_map = _ma_audio_buffer_ref_mapPtr.asFunction<
      int Function(ffi.Pointer<ma_audio_buffer_ref>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_ref_unmap(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    int frameCount,
  ) {
    return _ma_audio_buffer_ref_unmap(
      pAudioBufferRef,
      frameCount,
    );
  }

  late final _ma_audio_buffer_ref_unmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_ref>,
              ma_uint64)>>('ma_audio_buffer_ref_unmap');
  late final _ma_audio_buffer_ref_unmap = _ma_audio_buffer_ref_unmapPtr
      .asFunction<int Function(ffi.Pointer<ma_audio_buffer_ref>, int)>();

  int ma_audio_buffer_ref_at_end(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
  ) {
    return _ma_audio_buffer_ref_at_end(
      pAudioBufferRef,
    );
  }

  late final _ma_audio_buffer_ref_at_endPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(
              ffi.Pointer<ma_audio_buffer_ref>)>>('ma_audio_buffer_ref_at_end');
  late final _ma_audio_buffer_ref_at_end = _ma_audio_buffer_ref_at_endPtr
      .asFunction<int Function(ffi.Pointer<ma_audio_buffer_ref>)>();

  int ma_audio_buffer_ref_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_audio_buffer_ref_get_cursor_in_pcm_frames(
      pAudioBufferRef,
      pCursor,
    );
  }

  late final _ma_audio_buffer_ref_get_cursor_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_ref_get_cursor_in_pcm_frames');
  late final _ma_audio_buffer_ref_get_cursor_in_pcm_frames =
      _ma_audio_buffer_ref_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_ref_get_length_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_audio_buffer_ref_get_length_in_pcm_frames(
      pAudioBufferRef,
      pLength,
    );
  }

  late final _ma_audio_buffer_ref_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_ref_get_length_in_pcm_frames');
  late final _ma_audio_buffer_ref_get_length_in_pcm_frames =
      _ma_audio_buffer_ref_get_length_in_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_ref_get_available_frames(
    ffi.Pointer<ma_audio_buffer_ref> pAudioBufferRef,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_audio_buffer_ref_get_available_frames(
      pAudioBufferRef,
      pAvailableFrames,
    );
  }

  late final _ma_audio_buffer_ref_get_available_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_ref_get_available_frames');
  late final _ma_audio_buffer_ref_get_available_frames =
      _ma_audio_buffer_ref_get_available_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>();

  ma_audio_buffer_config ma_audio_buffer_config_init(
    int format,
    int channels,
    int sizeInFrames,
    ffi.Pointer<ffi.Void> pData,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_audio_buffer_config_init(
      format,
      channels,
      sizeInFrames,
      pData,
      pAllocationCallbacks,
    );
  }

  late final _ma_audio_buffer_config_initPtr = _lookup<
          ffi.NativeFunction<
              ma_audio_buffer_config Function(
                  ffi.Int32,
                  ma_uint32,
                  ma_uint64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_audio_buffer_config_init');
  late final _ma_audio_buffer_config_init =
      _ma_audio_buffer_config_initPtr.asFunction<
          ma_audio_buffer_config Function(int, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_audio_buffer_init(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_init(
      pConfig,
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ma_audio_buffer>)>>('ma_audio_buffer_init');
  late final _ma_audio_buffer_init = _ma_audio_buffer_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_audio_buffer_config>, ffi.Pointer<ma_audio_buffer>)>();

  int ma_audio_buffer_init_copy(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_init_copy(
      pConfig,
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_init_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ma_audio_buffer>)>>('ma_audio_buffer_init_copy');
  late final _ma_audio_buffer_init_copy =
      _ma_audio_buffer_init_copyPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ma_audio_buffer>)>();

  int ma_audio_buffer_alloc_and_init(
    ffi.Pointer<ma_audio_buffer_config> pConfig,
    ffi.Pointer<ffi.Pointer<ma_audio_buffer>> ppAudioBuffer,
  ) {
    return _ma_audio_buffer_alloc_and_init(
      pConfig,
      ppAudioBuffer,
    );
  }

  late final _ma_audio_buffer_alloc_and_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_config>,
                  ffi.Pointer<ffi.Pointer<ma_audio_buffer>>)>>(
      'ma_audio_buffer_alloc_and_init');
  late final _ma_audio_buffer_alloc_and_init =
      _ma_audio_buffer_alloc_and_initPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ffi.Pointer<ma_audio_buffer>>)>();

  void ma_audio_buffer_uninit(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_uninit(
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_uninitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_audio_buffer>)>>(
      'ma_audio_buffer_uninit');
  late final _ma_audio_buffer_uninit = _ma_audio_buffer_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_audio_buffer>)>();

  void ma_audio_buffer_uninit_and_free(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_uninit_and_free(
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_uninit_and_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_audio_buffer>)>>(
      'ma_audio_buffer_uninit_and_free');
  late final _ma_audio_buffer_uninit_and_free =
      _ma_audio_buffer_uninit_and_freePtr
          .asFunction<void Function(ffi.Pointer<ma_audio_buffer>)>();

  int ma_audio_buffer_read_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    int loop,
  ) {
    return _ma_audio_buffer_read_pcm_frames(
      pAudioBuffer,
      pFramesOut,
      frameCount,
      loop,
    );
  }

  late final _ma_audio_buffer_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ma_bool32)>>('ma_audio_buffer_read_pcm_frames');
  late final _ma_audio_buffer_read_pcm_frames =
      _ma_audio_buffer_read_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ffi.Void>, int, int)>();

  int ma_audio_buffer_seek_to_pcm_frame(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    int frameIndex,
  ) {
    return _ma_audio_buffer_seek_to_pcm_frame(
      pAudioBuffer,
      frameIndex,
    );
  }

  late final _ma_audio_buffer_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer>,
              ma_uint64)>>('ma_audio_buffer_seek_to_pcm_frame');
  late final _ma_audio_buffer_seek_to_pcm_frame =
      _ma_audio_buffer_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_audio_buffer>, int)>();

  int ma_audio_buffer_map(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppFramesOut,
    ffi.Pointer<ma_uint64> pFrameCount,
  ) {
    return _ma_audio_buffer_map(
      pAudioBuffer,
      ppFramesOut,
      pFrameCount,
    );
  }

  late final _ma_audio_buffer_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ma_uint64>)>>('ma_audio_buffer_map');
  late final _ma_audio_buffer_map = _ma_audio_buffer_mapPtr.asFunction<
      int Function(ffi.Pointer<ma_audio_buffer>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_unmap(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    int frameCount,
  ) {
    return _ma_audio_buffer_unmap(
      pAudioBuffer,
      frameCount,
    );
  }

  late final _ma_audio_buffer_unmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer>,
              ma_uint64)>>('ma_audio_buffer_unmap');
  late final _ma_audio_buffer_unmap = _ma_audio_buffer_unmapPtr
      .asFunction<int Function(ffi.Pointer<ma_audio_buffer>, int)>();

  int ma_audio_buffer_at_end(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
  ) {
    return _ma_audio_buffer_at_end(
      pAudioBuffer,
    );
  }

  late final _ma_audio_buffer_at_endPtr = _lookup<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_audio_buffer>)>>(
      'ma_audio_buffer_at_end');
  late final _ma_audio_buffer_at_end = _ma_audio_buffer_at_endPtr
      .asFunction<int Function(ffi.Pointer<ma_audio_buffer>)>();

  int ma_audio_buffer_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_audio_buffer_get_cursor_in_pcm_frames(
      pAudioBuffer,
      pCursor,
    );
  }

  late final _ma_audio_buffer_get_cursor_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_get_cursor_in_pcm_frames');
  late final _ma_audio_buffer_get_cursor_in_pcm_frames =
      _ma_audio_buffer_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_get_length_in_pcm_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_audio_buffer_get_length_in_pcm_frames(
      pAudioBuffer,
      pLength,
    );
  }

  late final _ma_audio_buffer_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>>(
      'ma_audio_buffer_get_length_in_pcm_frames');
  late final _ma_audio_buffer_get_length_in_pcm_frames =
      _ma_audio_buffer_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>();

  int ma_audio_buffer_get_available_frames(
    ffi.Pointer<ma_audio_buffer> pAudioBuffer,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_audio_buffer_get_available_frames(
      pAudioBuffer,
      pAvailableFrames,
    );
  }

  late final _ma_audio_buffer_get_available_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ma_uint64>)>>('ma_audio_buffer_get_available_frames');
  late final _ma_audio_buffer_get_available_frames =
      _ma_audio_buffer_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>();

  int ma_paged_audio_buffer_data_init(
    int format,
    int channels,
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
  ) {
    return _ma_paged_audio_buffer_data_init(
      format,
      channels,
      pData,
    );
  }

  late final _ma_paged_audio_buffer_data_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Int32, ma_uint32,
                  ffi.Pointer<ma_paged_audio_buffer_data>)>>(
      'ma_paged_audio_buffer_data_init');
  late final _ma_paged_audio_buffer_data_init =
      _ma_paged_audio_buffer_data_initPtr.asFunction<
          int Function(int, int, ffi.Pointer<ma_paged_audio_buffer_data>)>();

  void ma_paged_audio_buffer_data_uninit(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_paged_audio_buffer_data_uninit(
      pData,
      pAllocationCallbacks,
    );
  }

  late final _ma_paged_audio_buffer_data_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_paged_audio_buffer_data>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_paged_audio_buffer_data_uninit');
  late final _ma_paged_audio_buffer_data_uninit =
      _ma_paged_audio_buffer_data_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_paged_audio_buffer_data>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  ffi.Pointer<ma_paged_audio_buffer_page> ma_paged_audio_buffer_data_get_head(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
  ) {
    return _ma_paged_audio_buffer_data_get_head(
      pData,
    );
  }

  late final _ma_paged_audio_buffer_data_get_headPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ma_paged_audio_buffer_page> Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>)>>(
      'ma_paged_audio_buffer_data_get_head');
  late final _ma_paged_audio_buffer_data_get_head =
      _ma_paged_audio_buffer_data_get_headPtr.asFunction<
          ffi.Pointer<ma_paged_audio_buffer_page> Function(
              ffi.Pointer<ma_paged_audio_buffer_data>)>();

  ffi.Pointer<ma_paged_audio_buffer_page> ma_paged_audio_buffer_data_get_tail(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
  ) {
    return _ma_paged_audio_buffer_data_get_tail(
      pData,
    );
  }

  late final _ma_paged_audio_buffer_data_get_tailPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ma_paged_audio_buffer_page> Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>)>>(
      'ma_paged_audio_buffer_data_get_tail');
  late final _ma_paged_audio_buffer_data_get_tail =
      _ma_paged_audio_buffer_data_get_tailPtr.asFunction<
          ffi.Pointer<ma_paged_audio_buffer_page> Function(
              ffi.Pointer<ma_paged_audio_buffer_data>)>();

  int ma_paged_audio_buffer_data_get_length_in_pcm_frames(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_paged_audio_buffer_data_get_length_in_pcm_frames(
      pData,
      pLength,
    );
  }

  late final _ma_paged_audio_buffer_data_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer_data>,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_paged_audio_buffer_data_get_length_in_pcm_frames');
  late final _ma_paged_audio_buffer_data_get_length_in_pcm_frames =
      _ma_paged_audio_buffer_data_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_paged_audio_buffer_data>,
              ffi.Pointer<ma_uint64>)>();

  int ma_paged_audio_buffer_data_allocate_page(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
    int pageSizeInFrames,
    ffi.Pointer<ffi.Void> pInitialData,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ffi.Pointer<ma_paged_audio_buffer_page>> ppPage,
  ) {
    return _ma_paged_audio_buffer_data_allocate_page(
      pData,
      pageSizeInFrames,
      pInitialData,
      pAllocationCallbacks,
      ppPage,
    );
  }

  late final _ma_paged_audio_buffer_data_allocate_pagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>,
                  ma_uint64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_allocation_callbacks>,
                  ffi.Pointer<ffi.Pointer<ma_paged_audio_buffer_page>>)>>(
      'ma_paged_audio_buffer_data_allocate_page');
  late final _ma_paged_audio_buffer_data_allocate_page =
      _ma_paged_audio_buffer_data_allocate_pagePtr.asFunction<
          int Function(
              ffi.Pointer<ma_paged_audio_buffer_data>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ffi.Pointer<ma_paged_audio_buffer_page>>)>();

  int ma_paged_audio_buffer_data_free_page(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
    ffi.Pointer<ma_paged_audio_buffer_page> pPage,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_paged_audio_buffer_data_free_page(
      pData,
      pPage,
      pAllocationCallbacks,
    );
  }

  late final _ma_paged_audio_buffer_data_free_pagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>,
                  ffi.Pointer<ma_paged_audio_buffer_page>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_paged_audio_buffer_data_free_page');
  late final _ma_paged_audio_buffer_data_free_page =
      _ma_paged_audio_buffer_data_free_pagePtr.asFunction<
          int Function(
              ffi.Pointer<ma_paged_audio_buffer_data>,
              ffi.Pointer<ma_paged_audio_buffer_page>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_paged_audio_buffer_data_append_page(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
    ffi.Pointer<ma_paged_audio_buffer_page> pPage,
  ) {
    return _ma_paged_audio_buffer_data_append_page(
      pData,
      pPage,
    );
  }

  late final _ma_paged_audio_buffer_data_append_pagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer_data>,
                  ffi.Pointer<ma_paged_audio_buffer_page>)>>(
      'ma_paged_audio_buffer_data_append_page');
  late final _ma_paged_audio_buffer_data_append_page =
      _ma_paged_audio_buffer_data_append_pagePtr.asFunction<
          int Function(ffi.Pointer<ma_paged_audio_buffer_data>,
              ffi.Pointer<ma_paged_audio_buffer_page>)>();

  int ma_paged_audio_buffer_data_allocate_and_append_page(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
    int pageSizeInFrames,
    ffi.Pointer<ffi.Void> pInitialData,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_paged_audio_buffer_data_allocate_and_append_page(
      pData,
      pageSizeInFrames,
      pInitialData,
      pAllocationCallbacks,
    );
  }

  late final _ma_paged_audio_buffer_data_allocate_and_append_pagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>,
                  ma_uint32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_paged_audio_buffer_data_allocate_and_append_page');
  late final _ma_paged_audio_buffer_data_allocate_and_append_page =
      _ma_paged_audio_buffer_data_allocate_and_append_pagePtr.asFunction<
          int Function(ffi.Pointer<ma_paged_audio_buffer_data>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ma_allocation_callbacks>)>();

  ma_paged_audio_buffer_config ma_paged_audio_buffer_config_init(
    ffi.Pointer<ma_paged_audio_buffer_data> pData,
  ) {
    return _ma_paged_audio_buffer_config_init(
      pData,
    );
  }

  late final _ma_paged_audio_buffer_config_initPtr = _lookup<
          ffi.NativeFunction<
              ma_paged_audio_buffer_config Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>)>>(
      'ma_paged_audio_buffer_config_init');
  late final _ma_paged_audio_buffer_config_init =
      _ma_paged_audio_buffer_config_initPtr.asFunction<
          ma_paged_audio_buffer_config Function(
              ffi.Pointer<ma_paged_audio_buffer_data>)>();

  int ma_paged_audio_buffer_init(
    ffi.Pointer<ma_paged_audio_buffer_config> pConfig,
    ffi.Pointer<ma_paged_audio_buffer> pPagedAudioBuffer,
  ) {
    return _ma_paged_audio_buffer_init(
      pConfig,
      pPagedAudioBuffer,
    );
  }

  late final _ma_paged_audio_buffer_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer_config>,
                  ffi.Pointer<ma_paged_audio_buffer>)>>(
      'ma_paged_audio_buffer_init');
  late final _ma_paged_audio_buffer_init =
      _ma_paged_audio_buffer_initPtr.asFunction<
          int Function(ffi.Pointer<ma_paged_audio_buffer_config>,
              ffi.Pointer<ma_paged_audio_buffer>)>();

  void ma_paged_audio_buffer_uninit(
    ffi.Pointer<ma_paged_audio_buffer> pPagedAudioBuffer,
  ) {
    return _ma_paged_audio_buffer_uninit(
      pPagedAudioBuffer,
    );
  }

  late final _ma_paged_audio_buffer_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_paged_audio_buffer>)>>(
      'ma_paged_audio_buffer_uninit');
  late final _ma_paged_audio_buffer_uninit = _ma_paged_audio_buffer_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_paged_audio_buffer>)>();

  int ma_paged_audio_buffer_read_pcm_frames(
    ffi.Pointer<ma_paged_audio_buffer> pPagedAudioBuffer,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_paged_audio_buffer_read_pcm_frames(
      pPagedAudioBuffer,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_paged_audio_buffer_read_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer>,
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Pointer<ma_uint64>)>>(
      'ma_paged_audio_buffer_read_pcm_frames');
  late final _ma_paged_audio_buffer_read_pcm_frames =
      _ma_paged_audio_buffer_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_paged_audio_buffer>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ma_uint64>)>();

  int ma_paged_audio_buffer_seek_to_pcm_frame(
    ffi.Pointer<ma_paged_audio_buffer> pPagedAudioBuffer,
    int frameIndex,
  ) {
    return _ma_paged_audio_buffer_seek_to_pcm_frame(
      pPagedAudioBuffer,
      frameIndex,
    );
  }

  late final _ma_paged_audio_buffer_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer>,
              ma_uint64)>>('ma_paged_audio_buffer_seek_to_pcm_frame');
  late final _ma_paged_audio_buffer_seek_to_pcm_frame =
      _ma_paged_audio_buffer_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_paged_audio_buffer>, int)>();

  int ma_paged_audio_buffer_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_paged_audio_buffer> pPagedAudioBuffer,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_paged_audio_buffer_get_cursor_in_pcm_frames(
      pPagedAudioBuffer,
      pCursor,
    );
  }

  late final _ma_paged_audio_buffer_get_cursor_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer>, ffi.Pointer<ma_uint64>)>>(
      'ma_paged_audio_buffer_get_cursor_in_pcm_frames');
  late final _ma_paged_audio_buffer_get_cursor_in_pcm_frames =
      _ma_paged_audio_buffer_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_paged_audio_buffer>, ffi.Pointer<ma_uint64>)>();

  int ma_paged_audio_buffer_get_length_in_pcm_frames(
    ffi.Pointer<ma_paged_audio_buffer> pPagedAudioBuffer,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_paged_audio_buffer_get_length_in_pcm_frames(
      pPagedAudioBuffer,
      pLength,
    );
  }

  late final _ma_paged_audio_buffer_get_length_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer>, ffi.Pointer<ma_uint64>)>>(
      'ma_paged_audio_buffer_get_length_in_pcm_frames');
  late final _ma_paged_audio_buffer_get_length_in_pcm_frames =
      _ma_paged_audio_buffer_get_length_in_pcm_framesPtr.asFunction<
          int Function(
              ffi.Pointer<ma_paged_audio_buffer>, ffi.Pointer<ma_uint64>)>();

  int ma_rb_init_ex(
    int subbufferSizeInBytes,
    int subbufferCount,
    int subbufferStrideInBytes,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_init_ex(
      subbufferSizeInBytes,
      subbufferCount,
      subbufferStrideInBytes,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_rb_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_rb>)>>('ma_rb_init_ex');
  late final _ma_rb_init_ex = _ma_rb_init_exPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_rb>)>();

  int ma_rb_init(
    int bufferSizeInBytes,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_init(
      bufferSizeInBytes,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_rb_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_rb>)>>('ma_rb_init');
  late final _ma_rb_init = _ma_rb_initPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_rb>)>();

  void ma_rb_uninit(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_uninit(
      pRB,
    );
  }

  late final _ma_rb_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_uninit');
  late final _ma_rb_uninit =
      _ma_rb_uninitPtr.asFunction<void Function(ffi.Pointer<ma_rb>)>();

  void ma_rb_reset(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_reset(
      pRB,
    );
  }

  late final _ma_rb_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_reset');
  late final _ma_rb_reset =
      _ma_rb_resetPtr.asFunction<void Function(ffi.Pointer<ma_rb>)>();

  int ma_rb_acquire_read(
    ffi.Pointer<ma_rb> pRB,
    ffi.Pointer<ffi.Size> pSizeInBytes,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_rb_acquire_read(
      pRB,
      pSizeInBytes,
      ppBufferOut,
    );
  }

  late final _ma_rb_acquire_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_rb_acquire_read');
  late final _ma_rb_acquire_read = _ma_rb_acquire_readPtr.asFunction<
      int Function(ffi.Pointer<ma_rb>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_rb_commit_read(
    ffi.Pointer<ma_rb> pRB,
    int sizeInBytes,
  ) {
    return _ma_rb_commit_read(
      pRB,
      sizeInBytes,
    );
  }

  late final _ma_rb_commit_readPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Size)>>(
      'ma_rb_commit_read');
  late final _ma_rb_commit_read =
      _ma_rb_commit_readPtr.asFunction<int Function(ffi.Pointer<ma_rb>, int)>();

  int ma_rb_acquire_write(
    ffi.Pointer<ma_rb> pRB,
    ffi.Pointer<ffi.Size> pSizeInBytes,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_rb_acquire_write(
      pRB,
      pSizeInBytes,
      ppBufferOut,
    );
  }

  late final _ma_rb_acquire_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_rb_acquire_write');
  late final _ma_rb_acquire_write = _ma_rb_acquire_writePtr.asFunction<
      int Function(ffi.Pointer<ma_rb>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_rb_commit_write(
    ffi.Pointer<ma_rb> pRB,
    int sizeInBytes,
  ) {
    return _ma_rb_commit_write(
      pRB,
      sizeInBytes,
    );
  }

  late final _ma_rb_commit_writePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Size)>>(
      'ma_rb_commit_write');
  late final _ma_rb_commit_write = _ma_rb_commit_writePtr
      .asFunction<int Function(ffi.Pointer<ma_rb>, int)>();

  int ma_rb_seek_read(
    ffi.Pointer<ma_rb> pRB,
    int offsetInBytes,
  ) {
    return _ma_rb_seek_read(
      pRB,
      offsetInBytes,
    );
  }

  late final _ma_rb_seek_readPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Size)>>(
      'ma_rb_seek_read');
  late final _ma_rb_seek_read =
      _ma_rb_seek_readPtr.asFunction<int Function(ffi.Pointer<ma_rb>, int)>();

  int ma_rb_seek_write(
    ffi.Pointer<ma_rb> pRB,
    int offsetInBytes,
  ) {
    return _ma_rb_seek_write(
      pRB,
      offsetInBytes,
    );
  }

  late final _ma_rb_seek_writePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Size)>>(
      'ma_rb_seek_write');
  late final _ma_rb_seek_write =
      _ma_rb_seek_writePtr.asFunction<int Function(ffi.Pointer<ma_rb>, int)>();

  int ma_rb_pointer_distance(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_pointer_distance(
      pRB,
    );
  }

  late final _ma_rb_pointer_distancePtr =
      _lookup<ffi.NativeFunction<ma_int32 Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_pointer_distance');
  late final _ma_rb_pointer_distance =
      _ma_rb_pointer_distancePtr.asFunction<int Function(ffi.Pointer<ma_rb>)>();

  int ma_rb_available_read(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_available_read(
      pRB,
    );
  }

  late final _ma_rb_available_readPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_available_read');
  late final _ma_rb_available_read =
      _ma_rb_available_readPtr.asFunction<int Function(ffi.Pointer<ma_rb>)>();

  int ma_rb_available_write(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_available_write(
      pRB,
    );
  }

  late final _ma_rb_available_writePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_available_write');
  late final _ma_rb_available_write =
      _ma_rb_available_writePtr.asFunction<int Function(ffi.Pointer<ma_rb>)>();

  int ma_rb_get_subbuffer_size(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_get_subbuffer_size(
      pRB,
    );
  }

  late final _ma_rb_get_subbuffer_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_get_subbuffer_size');
  late final _ma_rb_get_subbuffer_size = _ma_rb_get_subbuffer_sizePtr
      .asFunction<int Function(ffi.Pointer<ma_rb>)>();

  int ma_rb_get_subbuffer_stride(
    ffi.Pointer<ma_rb> pRB,
  ) {
    return _ma_rb_get_subbuffer_stride(
      pRB,
    );
  }

  late final _ma_rb_get_subbuffer_stridePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ma_rb>)>>(
          'ma_rb_get_subbuffer_stride');
  late final _ma_rb_get_subbuffer_stride = _ma_rb_get_subbuffer_stridePtr
      .asFunction<int Function(ffi.Pointer<ma_rb>)>();

  int ma_rb_get_subbuffer_offset(
    ffi.Pointer<ma_rb> pRB,
    int subbufferIndex,
  ) {
    return _ma_rb_get_subbuffer_offset(
      pRB,
      subbufferIndex,
    );
  }

  late final _ma_rb_get_subbuffer_offsetPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ma_rb>, ffi.Size)>>(
      'ma_rb_get_subbuffer_offset');
  late final _ma_rb_get_subbuffer_offset = _ma_rb_get_subbuffer_offsetPtr
      .asFunction<int Function(ffi.Pointer<ma_rb>, int)>();

  ffi.Pointer<ffi.Void> ma_rb_get_subbuffer_ptr(
    ffi.Pointer<ma_rb> pRB,
    int subbufferIndex,
    ffi.Pointer<ffi.Void> pBuffer,
  ) {
    return _ma_rb_get_subbuffer_ptr(
      pRB,
      subbufferIndex,
      pBuffer,
    );
  }

  late final _ma_rb_get_subbuffer_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ma_rb>, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('ma_rb_get_subbuffer_ptr');
  late final _ma_rb_get_subbuffer_ptr = _ma_rb_get_subbuffer_ptrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ma_rb>, int, ffi.Pointer<ffi.Void>)>();

  int ma_pcm_rb_init_ex(
    int format,
    int channels,
    int subbufferSizeInFrames,
    int subbufferCount,
    int subbufferStrideInFrames,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_init_ex(
      format,
      channels,
      subbufferSizeInFrames,
      subbufferCount,
      subbufferStrideInFrames,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_pcm_rb_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_pcm_rb>)>>('ma_pcm_rb_init_ex');
  late final _ma_pcm_rb_init_ex = _ma_pcm_rb_init_exPtr.asFunction<
      int Function(int, int, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_init(
    int format,
    int channels,
    int bufferSizeInFrames,
    ffi.Pointer<ffi.Void> pOptionalPreallocatedBuffer,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_init(
      format,
      channels,
      bufferSizeInFrames,
      pOptionalPreallocatedBuffer,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_pcm_rb_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_pcm_rb>)>>('ma_pcm_rb_init');
  late final _ma_pcm_rb_init = _ma_pcm_rb_initPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_pcm_rb>)>();

  void ma_pcm_rb_uninit(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_uninit(
      pRB,
    );
  }

  late final _ma_pcm_rb_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_uninit');
  late final _ma_pcm_rb_uninit =
      _ma_pcm_rb_uninitPtr.asFunction<void Function(ffi.Pointer<ma_pcm_rb>)>();

  void ma_pcm_rb_reset(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_reset(
      pRB,
    );
  }

  late final _ma_pcm_rb_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_reset');
  late final _ma_pcm_rb_reset =
      _ma_pcm_rb_resetPtr.asFunction<void Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_acquire_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    ffi.Pointer<ma_uint32> pSizeInFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_pcm_rb_acquire_read(
      pRB,
      pSizeInFrames,
      ppBufferOut,
    );
  }

  late final _ma_pcm_rb_acquire_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_pcm_rb_acquire_read');
  late final _ma_pcm_rb_acquire_read = _ma_pcm_rb_acquire_readPtr.asFunction<
      int Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_pcm_rb_commit_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    int sizeInFrames,
  ) {
    return _ma_pcm_rb_commit_read(
      pRB,
      sizeInFrames,
    );
  }

  late final _ma_pcm_rb_commit_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_pcm_rb>, ma_uint32)>>('ma_pcm_rb_commit_read');
  late final _ma_pcm_rb_commit_read = _ma_pcm_rb_commit_readPtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>();

  int ma_pcm_rb_acquire_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    ffi.Pointer<ma_uint32> pSizeInFrames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppBufferOut,
  ) {
    return _ma_pcm_rb_acquire_write(
      pRB,
      pSizeInFrames,
      ppBufferOut,
    );
  }

  late final _ma_pcm_rb_acquire_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_pcm_rb_acquire_write');
  late final _ma_pcm_rb_acquire_write = _ma_pcm_rb_acquire_writePtr.asFunction<
      int Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_pcm_rb_commit_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    int sizeInFrames,
  ) {
    return _ma_pcm_rb_commit_write(
      pRB,
      sizeInFrames,
    );
  }

  late final _ma_pcm_rb_commit_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_pcm_rb>, ma_uint32)>>('ma_pcm_rb_commit_write');
  late final _ma_pcm_rb_commit_write = _ma_pcm_rb_commit_writePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>();

  int ma_pcm_rb_seek_read(
    ffi.Pointer<ma_pcm_rb> pRB,
    int offsetInFrames,
  ) {
    return _ma_pcm_rb_seek_read(
      pRB,
      offsetInFrames,
    );
  }

  late final _ma_pcm_rb_seek_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_pcm_rb>, ma_uint32)>>('ma_pcm_rb_seek_read');
  late final _ma_pcm_rb_seek_read = _ma_pcm_rb_seek_readPtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>();

  int ma_pcm_rb_seek_write(
    ffi.Pointer<ma_pcm_rb> pRB,
    int offsetInFrames,
  ) {
    return _ma_pcm_rb_seek_write(
      pRB,
      offsetInFrames,
    );
  }

  late final _ma_pcm_rb_seek_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_pcm_rb>, ma_uint32)>>('ma_pcm_rb_seek_write');
  late final _ma_pcm_rb_seek_write = _ma_pcm_rb_seek_writePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>();

  int ma_pcm_rb_pointer_distance(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_pointer_distance(
      pRB,
    );
  }

  late final _ma_pcm_rb_pointer_distancePtr =
      _lookup<ffi.NativeFunction<ma_int32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_pointer_distance');
  late final _ma_pcm_rb_pointer_distance = _ma_pcm_rb_pointer_distancePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_available_read(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_available_read(
      pRB,
    );
  }

  late final _ma_pcm_rb_available_readPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_available_read');
  late final _ma_pcm_rb_available_read = _ma_pcm_rb_available_readPtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_available_write(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_available_write(
      pRB,
    );
  }

  late final _ma_pcm_rb_available_writePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_available_write');
  late final _ma_pcm_rb_available_write = _ma_pcm_rb_available_writePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_get_subbuffer_size(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_subbuffer_size(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_sizePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_get_subbuffer_size');
  late final _ma_pcm_rb_get_subbuffer_size = _ma_pcm_rb_get_subbuffer_sizePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_get_subbuffer_stride(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_subbuffer_stride(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_stridePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_get_subbuffer_stride');
  late final _ma_pcm_rb_get_subbuffer_stride =
      _ma_pcm_rb_get_subbuffer_stridePtr
          .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_get_subbuffer_offset(
    ffi.Pointer<ma_pcm_rb> pRB,
    int subbufferIndex,
  ) {
    return _ma_pcm_rb_get_subbuffer_offset(
      pRB,
      subbufferIndex,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_offsetPtr = _lookup<
      ffi.NativeFunction<
          ma_uint32 Function(ffi.Pointer<ma_pcm_rb>,
              ma_uint32)>>('ma_pcm_rb_get_subbuffer_offset');
  late final _ma_pcm_rb_get_subbuffer_offset =
      _ma_pcm_rb_get_subbuffer_offsetPtr
          .asFunction<int Function(ffi.Pointer<ma_pcm_rb>, int)>();

  ffi.Pointer<ffi.Void> ma_pcm_rb_get_subbuffer_ptr(
    ffi.Pointer<ma_pcm_rb> pRB,
    int subbufferIndex,
    ffi.Pointer<ffi.Void> pBuffer,
  ) {
    return _ma_pcm_rb_get_subbuffer_ptr(
      pRB,
      subbufferIndex,
      pBuffer,
    );
  }

  late final _ma_pcm_rb_get_subbuffer_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ma_pcm_rb>, ma_uint32,
              ffi.Pointer<ffi.Void>)>>('ma_pcm_rb_get_subbuffer_ptr');
  late final _ma_pcm_rb_get_subbuffer_ptr =
      _ma_pcm_rb_get_subbuffer_ptrPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ma_pcm_rb>, int, ffi.Pointer<ffi.Void>)>();

  int ma_pcm_rb_get_format(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_format(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_formatPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_get_format');
  late final _ma_pcm_rb_get_format = _ma_pcm_rb_get_formatPtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_get_channels(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_channels(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_channelsPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_get_channels');
  late final _ma_pcm_rb_get_channels = _ma_pcm_rb_get_channelsPtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  int ma_pcm_rb_get_sample_rate(
    ffi.Pointer<ma_pcm_rb> pRB,
  ) {
    return _ma_pcm_rb_get_sample_rate(
      pRB,
    );
  }

  late final _ma_pcm_rb_get_sample_ratePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>(
          'ma_pcm_rb_get_sample_rate');
  late final _ma_pcm_rb_get_sample_rate = _ma_pcm_rb_get_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_pcm_rb>)>();

  void ma_pcm_rb_set_sample_rate(
    ffi.Pointer<ma_pcm_rb> pRB,
    int sampleRate,
  ) {
    return _ma_pcm_rb_set_sample_rate(
      pRB,
      sampleRate,
    );
  }

  late final _ma_pcm_rb_set_sample_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_pcm_rb>, ma_uint32)>>('ma_pcm_rb_set_sample_rate');
  late final _ma_pcm_rb_set_sample_rate = _ma_pcm_rb_set_sample_ratePtr
      .asFunction<void Function(ffi.Pointer<ma_pcm_rb>, int)>();

  int ma_duplex_rb_init(
    int captureFormat,
    int captureChannels,
    int sampleRate,
    int captureInternalSampleRate,
    int captureInternalPeriodSizeInFrames,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_duplex_rb> pRB,
  ) {
    return _ma_duplex_rb_init(
      captureFormat,
      captureChannels,
      sampleRate,
      captureInternalSampleRate,
      captureInternalPeriodSizeInFrames,
      pAllocationCallbacks,
      pRB,
    );
  }

  late final _ma_duplex_rb_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_duplex_rb>)>>('ma_duplex_rb_init');
  late final _ma_duplex_rb_init = _ma_duplex_rb_initPtr.asFunction<
      int Function(int, int, int, int, int,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_duplex_rb>)>();

  int ma_duplex_rb_uninit(
    ffi.Pointer<ma_duplex_rb> pRB,
  ) {
    return _ma_duplex_rb_uninit(
      pRB,
    );
  }

  late final _ma_duplex_rb_uninitPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_duplex_rb>)>>(
      'ma_duplex_rb_uninit');
  late final _ma_duplex_rb_uninit = _ma_duplex_rb_uninitPtr
      .asFunction<int Function(ffi.Pointer<ma_duplex_rb>)>();

  /// Miscellaneous Helpers
  ///
  /// /
  /// /*
  /// Retrieves a human readable description of the given result code.
  ffi.Pointer<ffi.Char> ma_result_description(
    int result,
  ) {
    return _ma_result_description(
      result,
    );
  }

  late final _ma_result_descriptionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'ma_result_description');
  late final _ma_result_description = _ma_result_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// malloc()
  ffi.Pointer<ffi.Void> ma_malloc(
    int sz,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_malloc(
      sz,
      pAllocationCallbacks,
    );
  }

  late final _ma_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<ma_allocation_callbacks>)>>('ma_malloc');
  late final _ma_malloc = _ma_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          int, ffi.Pointer<ma_allocation_callbacks>)>();

  /// calloc()
  ffi.Pointer<ffi.Void> ma_calloc(
    int sz,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_calloc(
      sz,
      pAllocationCallbacks,
    );
  }

  late final _ma_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<ma_allocation_callbacks>)>>('ma_calloc');
  late final _ma_calloc = _ma_callocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          int, ffi.Pointer<ma_allocation_callbacks>)>();

  /// realloc()
  ffi.Pointer<ffi.Void> ma_realloc(
    ffi.Pointer<ffi.Void> p,
    int sz,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_realloc(
      p,
      sz,
      pAllocationCallbacks,
    );
  }

  late final _ma_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_realloc');
  late final _ma_realloc = _ma_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ma_allocation_callbacks>)>();

  /// free()
  void ma_free(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_free(
      p,
      pAllocationCallbacks,
    );
  }

  late final _ma_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_free');
  late final _ma_free = _ma_freePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ma_allocation_callbacks>)>();

  /// Performs an aligned malloc, with the assumption that the alignment is a power of 2.
  ffi.Pointer<ffi.Void> ma_aligned_malloc(
    int sz,
    int alignment,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_aligned_malloc(
      sz,
      alignment,
      pAllocationCallbacks,
    );
  }

  late final _ma_aligned_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_aligned_malloc');
  late final _ma_aligned_malloc = _ma_aligned_mallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          int, int, ffi.Pointer<ma_allocation_callbacks>)>();

  /// Free's an aligned malloc'd buffer.
  void ma_aligned_free(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_aligned_free(
      p,
      pAllocationCallbacks,
    );
  }

  late final _ma_aligned_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_aligned_free');
  late final _ma_aligned_free = _ma_aligned_freePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ma_allocation_callbacks>)>();

  /// Retrieves a friendly name for a format.
  ffi.Pointer<ffi.Char> ma_get_format_name(
    int format,
  ) {
    return _ma_get_format_name(
      format,
    );
  }

  late final _ma_get_format_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'ma_get_format_name');
  late final _ma_get_format_name =
      _ma_get_format_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Blends two frames in floating point format.
  void ma_blend_f32(
    ffi.Pointer<ffi.Float> pOut,
    ffi.Pointer<ffi.Float> pInA,
    ffi.Pointer<ffi.Float> pInB,
    double factor,
    int channels,
  ) {
    return _ma_blend_f32(
      pOut,
      pInA,
      pInB,
      factor,
      channels,
    );
  }

  late final _ma_blend_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>, ffi.Float, ma_uint32)>>('ma_blend_f32');
  late final _ma_blend_f32 = _ma_blend_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, double, int)>();

  /// Retrieves the size of a sample in bytes for the given format.
  ///
  /// This API is efficient and is implemented using a lookup table.
  ///
  /// Thread Safety: SAFE
  /// This API is pure.
  int ma_get_bytes_per_sample(
    int format,
  ) {
    return _ma_get_bytes_per_sample(
      format,
    );
  }

  late final _ma_get_bytes_per_samplePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Int32)>>(
          'ma_get_bytes_per_sample');
  late final _ma_get_bytes_per_sample =
      _ma_get_bytes_per_samplePtr.asFunction<int Function(int)>();

  /// Converts a log level to a string.
  ffi.Pointer<ffi.Char> ma_log_level_to_string(
    int logLevel,
  ) {
    return _ma_log_level_to_string(
      logLevel,
    );
  }

  late final _ma_log_level_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ma_uint32)>>(
          'ma_log_level_to_string');
  late final _ma_log_level_to_string = _ma_log_level_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Synchronization
  ///
  /// /
  /// /*
  /// Locks a spinlock.
  int ma_spinlock_lock(
    ffi.Pointer<ma_spinlock> pSpinlock,
  ) {
    return _ma_spinlock_lock(
      pSpinlock,
    );
  }

  late final _ma_spinlock_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spinlock>)>>(
          'ma_spinlock_lock');
  late final _ma_spinlock_lock =
      _ma_spinlock_lockPtr.asFunction<int Function(ffi.Pointer<ma_spinlock>)>();

  /// Locks a spinlock, but does not yield() when looping.
  int ma_spinlock_lock_noyield(
    ffi.Pointer<ma_spinlock> pSpinlock,
  ) {
    return _ma_spinlock_lock_noyield(
      pSpinlock,
    );
  }

  late final _ma_spinlock_lock_noyieldPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spinlock>)>>(
          'ma_spinlock_lock_noyield');
  late final _ma_spinlock_lock_noyield = _ma_spinlock_lock_noyieldPtr
      .asFunction<int Function(ffi.Pointer<ma_spinlock>)>();

  /// Unlocks a spinlock.
  int ma_spinlock_unlock(
    ffi.Pointer<ma_spinlock> pSpinlock,
  ) {
    return _ma_spinlock_unlock(
      pSpinlock,
    );
  }

  late final _ma_spinlock_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spinlock>)>>(
          'ma_spinlock_unlock');
  late final _ma_spinlock_unlock = _ma_spinlock_unlockPtr
      .asFunction<int Function(ffi.Pointer<ma_spinlock>)>();

  /// Creates a mutex.
  ///
  /// A mutex must be created from a valid context. A mutex is initially unlocked.
  int ma_mutex_init(
    ffi.Pointer<ma_mutex> pMutex,
  ) {
    return _ma_mutex_init(
      pMutex,
    );
  }

  late final _ma_mutex_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_mutex>)>>(
          'ma_mutex_init');
  late final _ma_mutex_init =
      _ma_mutex_initPtr.asFunction<int Function(ffi.Pointer<ma_mutex>)>();

  /// Deletes a mutex.
  void ma_mutex_uninit(
    ffi.Pointer<ma_mutex> pMutex,
  ) {
    return _ma_mutex_uninit(
      pMutex,
    );
  }

  late final _ma_mutex_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_mutex>)>>(
          'ma_mutex_uninit');
  late final _ma_mutex_uninit =
      _ma_mutex_uninitPtr.asFunction<void Function(ffi.Pointer<ma_mutex>)>();

  /// Locks a mutex with an infinite timeout.
  void ma_mutex_lock(
    ffi.Pointer<ma_mutex> pMutex,
  ) {
    return _ma_mutex_lock(
      pMutex,
    );
  }

  late final _ma_mutex_lockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_mutex>)>>(
          'ma_mutex_lock');
  late final _ma_mutex_lock =
      _ma_mutex_lockPtr.asFunction<void Function(ffi.Pointer<ma_mutex>)>();

  /// Unlocks a mutex.
  void ma_mutex_unlock(
    ffi.Pointer<ma_mutex> pMutex,
  ) {
    return _ma_mutex_unlock(
      pMutex,
    );
  }

  late final _ma_mutex_unlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_mutex>)>>(
          'ma_mutex_unlock');
  late final _ma_mutex_unlock =
      _ma_mutex_unlockPtr.asFunction<void Function(ffi.Pointer<ma_mutex>)>();

  /// Initializes an auto-reset event.
  int ma_event_init(
    ffi.Pointer<ma_event> pEvent,
  ) {
    return _ma_event_init(
      pEvent,
    );
  }

  late final _ma_event_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_event>)>>(
          'ma_event_init');
  late final _ma_event_init =
      _ma_event_initPtr.asFunction<int Function(ffi.Pointer<ma_event>)>();

  /// Uninitializes an auto-reset event.
  void ma_event_uninit(
    ffi.Pointer<ma_event> pEvent,
  ) {
    return _ma_event_uninit(
      pEvent,
    );
  }

  late final _ma_event_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_event>)>>(
          'ma_event_uninit');
  late final _ma_event_uninit =
      _ma_event_uninitPtr.asFunction<void Function(ffi.Pointer<ma_event>)>();

  /// Waits for the specified auto-reset event to become signalled.
  int ma_event_wait(
    ffi.Pointer<ma_event> pEvent,
  ) {
    return _ma_event_wait(
      pEvent,
    );
  }

  late final _ma_event_waitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_event>)>>(
          'ma_event_wait');
  late final _ma_event_wait =
      _ma_event_waitPtr.asFunction<int Function(ffi.Pointer<ma_event>)>();

  /// Signals the specified auto-reset event.
  int ma_event_signal(
    ffi.Pointer<ma_event> pEvent,
  ) {
    return _ma_event_signal(
      pEvent,
    );
  }

  late final _ma_event_signalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_event>)>>(
          'ma_event_signal');
  late final _ma_event_signal =
      _ma_event_signalPtr.asFunction<int Function(ffi.Pointer<ma_event>)>();

  int ma_fence_init(
    ffi.Pointer<ma_fence> pFence,
  ) {
    return _ma_fence_init(
      pFence,
    );
  }

  late final _ma_fence_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_fence>)>>(
          'ma_fence_init');
  late final _ma_fence_init =
      _ma_fence_initPtr.asFunction<int Function(ffi.Pointer<ma_fence>)>();

  void ma_fence_uninit(
    ffi.Pointer<ma_fence> pFence,
  ) {
    return _ma_fence_uninit(
      pFence,
    );
  }

  late final _ma_fence_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_fence>)>>(
          'ma_fence_uninit');
  late final _ma_fence_uninit =
      _ma_fence_uninitPtr.asFunction<void Function(ffi.Pointer<ma_fence>)>();

  int ma_fence_acquire(
    ffi.Pointer<ma_fence> pFence,
  ) {
    return _ma_fence_acquire(
      pFence,
    );
  }

  late final _ma_fence_acquirePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_fence>)>>(
          'ma_fence_acquire');
  late final _ma_fence_acquire =
      _ma_fence_acquirePtr.asFunction<int Function(ffi.Pointer<ma_fence>)>();

  int ma_fence_release(
    ffi.Pointer<ma_fence> pFence,
  ) {
    return _ma_fence_release(
      pFence,
    );
  }

  late final _ma_fence_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_fence>)>>(
          'ma_fence_release');
  late final _ma_fence_release =
      _ma_fence_releasePtr.asFunction<int Function(ffi.Pointer<ma_fence>)>();

  int ma_fence_wait(
    ffi.Pointer<ma_fence> pFence,
  ) {
    return _ma_fence_wait(
      pFence,
    );
  }

  late final _ma_fence_waitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_fence>)>>(
          'ma_fence_wait');
  late final _ma_fence_wait =
      _ma_fence_waitPtr.asFunction<int Function(ffi.Pointer<ma_fence>)>();

  int ma_async_notification_signal(
    ffi.Pointer<ma_async_notification> pNotification,
  ) {
    return _ma_async_notification_signal(
      pNotification,
    );
  }

  late final _ma_async_notification_signalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification>)>>(
      'ma_async_notification_signal');
  late final _ma_async_notification_signal = _ma_async_notification_signalPtr
      .asFunction<int Function(ffi.Pointer<ma_async_notification>)>();

  int ma_async_notification_poll_init(
    ffi.Pointer<ma_async_notification_poll> pNotificationPoll,
  ) {
    return _ma_async_notification_poll_init(
      pNotificationPoll,
    );
  }

  late final _ma_async_notification_poll_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_poll>)>>(
      'ma_async_notification_poll_init');
  late final _ma_async_notification_poll_init =
      _ma_async_notification_poll_initPtr
          .asFunction<int Function(ffi.Pointer<ma_async_notification_poll>)>();

  int ma_async_notification_poll_is_signalled(
    ffi.Pointer<ma_async_notification_poll> pNotificationPoll,
  ) {
    return _ma_async_notification_poll_is_signalled(
      pNotificationPoll,
    );
  }

  late final _ma_async_notification_poll_is_signalledPtr = _lookup<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_async_notification_poll>)>>(
      'ma_async_notification_poll_is_signalled');
  late final _ma_async_notification_poll_is_signalled =
      _ma_async_notification_poll_is_signalledPtr
          .asFunction<int Function(ffi.Pointer<ma_async_notification_poll>)>();

  int ma_async_notification_event_init(
    ffi.Pointer<ma_async_notification_event> pNotificationEvent,
  ) {
    return _ma_async_notification_event_init(
      pNotificationEvent,
    );
  }

  late final _ma_async_notification_event_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_event>)>>(
      'ma_async_notification_event_init');
  late final _ma_async_notification_event_init =
      _ma_async_notification_event_initPtr
          .asFunction<int Function(ffi.Pointer<ma_async_notification_event>)>();

  int ma_async_notification_event_uninit(
    ffi.Pointer<ma_async_notification_event> pNotificationEvent,
  ) {
    return _ma_async_notification_event_uninit(
      pNotificationEvent,
    );
  }

  late final _ma_async_notification_event_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_event>)>>(
      'ma_async_notification_event_uninit');
  late final _ma_async_notification_event_uninit =
      _ma_async_notification_event_uninitPtr
          .asFunction<int Function(ffi.Pointer<ma_async_notification_event>)>();

  int ma_async_notification_event_wait(
    ffi.Pointer<ma_async_notification_event> pNotificationEvent,
  ) {
    return _ma_async_notification_event_wait(
      pNotificationEvent,
    );
  }

  late final _ma_async_notification_event_waitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_event>)>>(
      'ma_async_notification_event_wait');
  late final _ma_async_notification_event_wait =
      _ma_async_notification_event_waitPtr
          .asFunction<int Function(ffi.Pointer<ma_async_notification_event>)>();

  int ma_async_notification_event_signal(
    ffi.Pointer<ma_async_notification_event> pNotificationEvent,
  ) {
    return _ma_async_notification_event_signal(
      pNotificationEvent,
    );
  }

  late final _ma_async_notification_event_signalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_event>)>>(
      'ma_async_notification_event_signal');
  late final _ma_async_notification_event_signal =
      _ma_async_notification_event_signalPtr
          .asFunction<int Function(ffi.Pointer<ma_async_notification_event>)>();

  ma_slot_allocator_config ma_slot_allocator_config_init(
    int capacity,
  ) {
    return _ma_slot_allocator_config_init(
      capacity,
    );
  }

  late final _ma_slot_allocator_config_initPtr =
      _lookup<ffi.NativeFunction<ma_slot_allocator_config Function(ma_uint32)>>(
          'ma_slot_allocator_config_init');
  late final _ma_slot_allocator_config_init = _ma_slot_allocator_config_initPtr
      .asFunction<ma_slot_allocator_config Function(int)>();

  int ma_slot_allocator_get_heap_size(
    ffi.Pointer<ma_slot_allocator_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_slot_allocator_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_slot_allocator_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_slot_allocator_config>,
              ffi.Pointer<ffi.Size>)>>('ma_slot_allocator_get_heap_size');
  late final _ma_slot_allocator_get_heap_size =
      _ma_slot_allocator_get_heap_sizePtr.asFunction<
          int Function(
              ffi.Pointer<ma_slot_allocator_config>, ffi.Pointer<ffi.Size>)>();

  int ma_slot_allocator_init_preallocated(
    ffi.Pointer<ma_slot_allocator_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_slot_allocator> pAllocator,
  ) {
    return _ma_slot_allocator_init_preallocated(
      pConfig,
      pHeap,
      pAllocator,
    );
  }

  late final _ma_slot_allocator_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_slot_allocator_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_slot_allocator>)>>(
      'ma_slot_allocator_init_preallocated');
  late final _ma_slot_allocator_init_preallocated =
      _ma_slot_allocator_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_slot_allocator_config>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ma_slot_allocator>)>();

  int ma_slot_allocator_init(
    ffi.Pointer<ma_slot_allocator_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_slot_allocator> pAllocator,
  ) {
    return _ma_slot_allocator_init(
      pConfig,
      pAllocationCallbacks,
      pAllocator,
    );
  }

  late final _ma_slot_allocator_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_slot_allocator_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_slot_allocator>)>>('ma_slot_allocator_init');
  late final _ma_slot_allocator_init = _ma_slot_allocator_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_slot_allocator_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_slot_allocator>)>();

  void ma_slot_allocator_uninit(
    ffi.Pointer<ma_slot_allocator> pAllocator,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_slot_allocator_uninit(
      pAllocator,
      pAllocationCallbacks,
    );
  }

  late final _ma_slot_allocator_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_slot_allocator>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_slot_allocator_uninit');
  late final _ma_slot_allocator_uninit =
      _ma_slot_allocator_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_slot_allocator>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_slot_allocator_alloc(
    ffi.Pointer<ma_slot_allocator> pAllocator,
    ffi.Pointer<ma_uint64> pSlot,
  ) {
    return _ma_slot_allocator_alloc(
      pAllocator,
      pSlot,
    );
  }

  late final _ma_slot_allocator_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_slot_allocator>,
              ffi.Pointer<ma_uint64>)>>('ma_slot_allocator_alloc');
  late final _ma_slot_allocator_alloc = _ma_slot_allocator_allocPtr.asFunction<
      int Function(ffi.Pointer<ma_slot_allocator>, ffi.Pointer<ma_uint64>)>();

  int ma_slot_allocator_free(
    ffi.Pointer<ma_slot_allocator> pAllocator,
    int slot,
  ) {
    return _ma_slot_allocator_free(
      pAllocator,
      slot,
    );
  }

  late final _ma_slot_allocator_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_slot_allocator>,
              ma_uint64)>>('ma_slot_allocator_free');
  late final _ma_slot_allocator_free = _ma_slot_allocator_freePtr
      .asFunction<int Function(ffi.Pointer<ma_slot_allocator>, int)>();

  ma_job ma_job_init(
    int code,
  ) {
    return _ma_job_init(
      code,
    );
  }

  late final _ma_job_initPtr =
      _lookup<ffi.NativeFunction<ma_job Function(ma_uint16)>>('ma_job_init');
  late final _ma_job_init = _ma_job_initPtr.asFunction<ma_job Function(int)>();

  int ma_job_process(
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_job_process(
      pJob,
    );
  }

  late final _ma_job_processPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_job>)>>(
          'ma_job_process');
  late final _ma_job_process =
      _ma_job_processPtr.asFunction<int Function(ffi.Pointer<ma_job>)>();

  ma_job_queue_config ma_job_queue_config_init(
    int flags,
    int capacity,
  ) {
    return _ma_job_queue_config_init(
      flags,
      capacity,
    );
  }

  late final _ma_job_queue_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_job_queue_config Function(
              ma_uint32, ma_uint32)>>('ma_job_queue_config_init');
  late final _ma_job_queue_config_init = _ma_job_queue_config_initPtr
      .asFunction<ma_job_queue_config Function(int, int)>();

  int ma_job_queue_get_heap_size(
    ffi.Pointer<ma_job_queue_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_job_queue_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_job_queue_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_job_queue_config>,
              ffi.Pointer<ffi.Size>)>>('ma_job_queue_get_heap_size');
  late final _ma_job_queue_get_heap_size =
      _ma_job_queue_get_heap_sizePtr.asFunction<
          int Function(
              ffi.Pointer<ma_job_queue_config>, ffi.Pointer<ffi.Size>)>();

  int ma_job_queue_init_preallocated(
    ffi.Pointer<ma_job_queue_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_job_queue> pQueue,
  ) {
    return _ma_job_queue_init_preallocated(
      pConfig,
      pHeap,
      pQueue,
    );
  }

  late final _ma_job_queue_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_job_queue_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_job_queue>)>>('ma_job_queue_init_preallocated');
  late final _ma_job_queue_init_preallocated =
      _ma_job_queue_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_job_queue_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_job_queue>)>();

  int ma_job_queue_init(
    ffi.Pointer<ma_job_queue_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_job_queue> pQueue,
  ) {
    return _ma_job_queue_init(
      pConfig,
      pAllocationCallbacks,
      pQueue,
    );
  }

  late final _ma_job_queue_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_job_queue_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_job_queue>)>>('ma_job_queue_init');
  late final _ma_job_queue_init = _ma_job_queue_initPtr.asFunction<
      int Function(ffi.Pointer<ma_job_queue_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_job_queue>)>();

  void ma_job_queue_uninit(
    ffi.Pointer<ma_job_queue> pQueue,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_job_queue_uninit(
      pQueue,
      pAllocationCallbacks,
    );
  }

  late final _ma_job_queue_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_job_queue>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_job_queue_uninit');
  late final _ma_job_queue_uninit = _ma_job_queue_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_job_queue>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_job_queue_post(
    ffi.Pointer<ma_job_queue> pQueue,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_job_queue_post(
      pQueue,
      pJob,
    );
  }

  late final _ma_job_queue_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_job_queue>,
              ffi.Pointer<ma_job>)>>('ma_job_queue_post');
  late final _ma_job_queue_post = _ma_job_queue_postPtr.asFunction<
      int Function(ffi.Pointer<ma_job_queue>, ffi.Pointer<ma_job>)>();

  int ma_job_queue_next(
    ffi.Pointer<ma_job_queue> pQueue,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_job_queue_next(
      pQueue,
      pJob,
    );
  }

  late final _ma_job_queue_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_job_queue>,
              ffi.Pointer<ma_job>)>>('ma_job_queue_next');
  late final _ma_job_queue_next = _ma_job_queue_nextPtr.asFunction<
      int Function(ffi.Pointer<ma_job_queue>, ffi.Pointer<ma_job>)>();

  ma_device_job_thread_config ma_device_job_thread_config_init() {
    return _ma_device_job_thread_config_init();
  }

  late final _ma_device_job_thread_config_initPtr =
      _lookup<ffi.NativeFunction<ma_device_job_thread_config Function()>>(
          'ma_device_job_thread_config_init');
  late final _ma_device_job_thread_config_init =
      _ma_device_job_thread_config_initPtr
          .asFunction<ma_device_job_thread_config Function()>();

  int ma_device_job_thread_init(
    ffi.Pointer<ma_device_job_thread_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_device_job_thread> pJobThread,
  ) {
    return _ma_device_job_thread_init(
      pConfig,
      pAllocationCallbacks,
      pJobThread,
    );
  }

  late final _ma_device_job_thread_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device_job_thread_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_device_job_thread>)>>('ma_device_job_thread_init');
  late final _ma_device_job_thread_init =
      _ma_device_job_thread_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_device_job_thread_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_device_job_thread>)>();

  void ma_device_job_thread_uninit(
    ffi.Pointer<ma_device_job_thread> pJobThread,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_device_job_thread_uninit(
      pJobThread,
      pAllocationCallbacks,
    );
  }

  late final _ma_device_job_thread_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_device_job_thread>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_device_job_thread_uninit');
  late final _ma_device_job_thread_uninit =
      _ma_device_job_thread_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_device_job_thread>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_device_job_thread_post(
    ffi.Pointer<ma_device_job_thread> pJobThread,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_device_job_thread_post(
      pJobThread,
      pJob,
    );
  }

  late final _ma_device_job_thread_postPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device_job_thread>,
              ffi.Pointer<ma_job>)>>('ma_device_job_thread_post');
  late final _ma_device_job_thread_post =
      _ma_device_job_thread_postPtr.asFunction<
          int Function(
              ffi.Pointer<ma_device_job_thread>, ffi.Pointer<ma_job>)>();

  int ma_device_job_thread_next(
    ffi.Pointer<ma_device_job_thread> pJobThread,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_device_job_thread_next(
      pJobThread,
      pJob,
    );
  }

  late final _ma_device_job_thread_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device_job_thread>,
              ffi.Pointer<ma_job>)>>('ma_device_job_thread_next');
  late final _ma_device_job_thread_next =
      _ma_device_job_thread_nextPtr.asFunction<
          int Function(
              ffi.Pointer<ma_device_job_thread>, ffi.Pointer<ma_job>)>();

  /// Initializes a `ma_context_config` object.
  ///
  ///
  /// Return Value
  /// ------------
  /// A `ma_context_config` initialized to defaults.
  ///
  ///
  /// Remarks
  /// -------
  /// You must always use this to initialize the default state of the `ma_context_config` object. Not using this will result in your program breaking when miniaudio
  /// is updated and new members are added to `ma_context_config`. It also sets logical defaults.
  ///
  /// You can override members of the returned object by changing it's members directly.
  ///
  ///
  /// See Also
  /// --------
  /// ma_context_init()
  ma_context_config ma_context_config_init() {
    return _ma_context_config_init();
  }

  late final _ma_context_config_initPtr =
      _lookup<ffi.NativeFunction<ma_context_config Function()>>(
          'ma_context_config_init');
  late final _ma_context_config_init =
      _ma_context_config_initPtr.asFunction<ma_context_config Function()>();

  /// Initializes a context.
  ///
  /// The context is used for selecting and initializing an appropriate backend and to represent the backend at a more global level than that of an individual
  /// device. There is one context to many devices, and a device is created from a context. A context is required to enumerate devices.
  ///
  ///
  /// Parameters
  /// ----------
  /// backends (in, optional)
  /// A list of backends to try initializing, in priority order. Can be NULL, in which case it uses default priority order.
  ///
  /// backendCount (in, optional)
  /// The number of items in `backend`. Ignored if `backend` is NULL.
  ///
  /// pConfig (in, optional)
  /// The context configuration.
  ///
  /// pContext (in)
  /// A pointer to the context object being initialized.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other error code otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Unsafe. Do not call this function across multiple threads as some backends read and write to global state.
  ///
  ///
  /// Remarks
  /// -------
  /// When `backends` is NULL, the default priority order will be used. Below is a list of backends in priority order:
  ///
  /// |-------------|-----------------------|--------------------------------------------------------|
  /// | Name        | Enum Name             | Supported Operating Systems                            |
  /// |-------------|-----------------------|--------------------------------------------------------|
  /// | WASAPI      | ma_backend_wasapi     | Windows Vista+                                         |
  /// | DirectSound | ma_backend_dsound     | Windows XP+                                            |
  /// | WinMM       | ma_backend_winmm      | Windows XP+ (may work on older versions, but untested) |
  /// | Core Audio  | ma_backend_coreaudio  | macOS, iOS                                             |
  /// | ALSA        | ma_backend_alsa       | Linux                                                  |
  /// | PulseAudio  | ma_backend_pulseaudio | Cross Platform (disabled on Windows, BSD and Android)  |
  /// | JACK        | ma_backend_jack       | Cross Platform (disabled on BSD and Android)           |
  /// | sndio       | ma_backend_sndio      | OpenBSD                                                |
  /// | audio(4)    | ma_backend_audio4     | NetBSD, OpenBSD                                        |
  /// | OSS         | ma_backend_oss        | FreeBSD                                                |
  /// | AAudio      | ma_backend_aaudio     | Android 8+                                             |
  /// | OpenSL|ES   | ma_backend_opensl     | Android (API level 16+)                                |
  /// | Web Audio   | ma_backend_webaudio   | Web (via Emscripten)                                   |
  /// | Null        | ma_backend_null       | Cross Platform (not used on Web)                       |
  /// |-------------|-----------------------|--------------------------------------------------------|
  ///
  /// The context can be configured via the `pConfig` argument. The config object is initialized with `ma_context_config_init()`. Individual configuration settings
  /// can then be set directly on the structure. Below are the members of the `ma_context_config` object.
  ///
  /// pLog
  /// A pointer to the `ma_log` to post log messages to. Can be NULL if the application does not
  /// require logging. See the `ma_log` API for details on how to use the logging system.
  ///
  /// threadPriority
  /// The desired priority to use for the audio thread. Allowable values include the following:
  ///
  /// |--------------------------------------|
  /// | Thread Priority                      |
  /// |--------------------------------------|
  /// | ma_thread_priority_idle              |
  /// | ma_thread_priority_lowest            |
  /// | ma_thread_priority_low               |
  /// | ma_thread_priority_normal            |
  /// | ma_thread_priority_high              |
  /// | ma_thread_priority_highest (default) |
  /// | ma_thread_priority_realtime          |
  /// | ma_thread_priority_default           |
  /// |--------------------------------------|
  ///
  /// threadStackSize
  /// The desired size of the stack for the audio thread. Defaults to the operating system's default.
  ///
  /// pUserData
  /// A pointer to application-defined data. This can be accessed from the context object directly such as `context.pUserData`.
  ///
  /// allocationCallbacks
  /// Structure containing custom allocation callbacks. Leaving this at defaults will cause it to use MA_MALLOC, MA_REALLOC and MA_FREE. These allocation
  /// callbacks will be used for anything tied to the context, including devices.
  ///
  /// alsa.useVerboseDeviceEnumeration
  /// ALSA will typically enumerate many different devices which can be intrusive and not user-friendly. To combat this, miniaudio will enumerate only unique
  /// card/device pairs by default. The problem with this is that you lose a bit of flexibility and control. Setting alsa.useVerboseDeviceEnumeration makes
  /// it so the ALSA backend includes all devices. Defaults to false.
  ///
  /// pulse.pApplicationName
  /// PulseAudio only. The application name to use when initializing the PulseAudio context with `pa_context_new()`.
  ///
  /// pulse.pServerName
  /// PulseAudio only. The name of the server to connect to with `pa_context_connect()`.
  ///
  /// pulse.tryAutoSpawn
  /// PulseAudio only. Whether or not to try automatically starting the PulseAudio daemon. Defaults to false. If you set this to true, keep in mind that
  /// miniaudio uses a trial and error method to find the most appropriate backend, and this will result in the PulseAudio daemon starting which may be
  /// intrusive for the end user.
  ///
  /// coreaudio.sessionCategory
  /// iOS only. The session category to use for the shared AudioSession instance. Below is a list of allowable values and their Core Audio equivalents.
  ///
  /// |-----------------------------------------|-------------------------------------|
  /// | miniaudio Token                         | Core Audio Token                    |
  /// |-----------------------------------------|-------------------------------------|
  /// | ma_ios_session_category_ambient         | AVAudioSessionCategoryAmbient       |
  /// | ma_ios_session_category_solo_ambient    | AVAudioSessionCategorySoloAmbient   |
  /// | ma_ios_session_category_playback        | AVAudioSessionCategoryPlayback      |
  /// | ma_ios_session_category_record          | AVAudioSessionCategoryRecord        |
  /// | ma_ios_session_category_play_and_record | AVAudioSessionCategoryPlayAndRecord |
  /// | ma_ios_session_category_multi_route     | AVAudioSessionCategoryMultiRoute    |
  /// | ma_ios_session_category_none            | AVAudioSessionCategoryAmbient       |
  /// | ma_ios_session_category_default         | AVAudioSessionCategoryAmbient       |
  /// |-----------------------------------------|-------------------------------------|
  ///
  /// coreaudio.sessionCategoryOptions
  /// iOS only. Session category options to use with the shared AudioSession instance. Below is a list of allowable values and their Core Audio equivalents.
  ///
  /// |---------------------------------------------------------------------------|------------------------------------------------------------------|
  /// | miniaudio Token                                                           | Core Audio Token                                                 |
  /// |---------------------------------------------------------------------------|------------------------------------------------------------------|
  /// | ma_ios_session_category_option_mix_with_others                            | AVAudioSessionCategoryOptionMixWithOthers                        |
  /// | ma_ios_session_category_option_duck_others                                | AVAudioSessionCategoryOptionDuckOthers                           |
  /// | ma_ios_session_category_option_allow_bluetooth                            | AVAudioSessionCategoryOptionAllowBluetooth                       |
  /// | ma_ios_session_category_option_default_to_speaker                         | AVAudioSessionCategoryOptionDefaultToSpeaker                     |
  /// | ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others | AVAudioSessionCategoryOptionInterruptSpokenAudioAndMixWithOthers |
  /// | ma_ios_session_category_option_allow_bluetooth_a2dp                       | AVAudioSessionCategoryOptionAllowBluetoothA2DP                   |
  /// | ma_ios_session_category_option_allow_air_play                             | AVAudioSessionCategoryOptionAllowAirPlay                         |
  /// |---------------------------------------------------------------------------|------------------------------------------------------------------|
  ///
  /// coreaudio.noAudioSessionActivate
  /// iOS only. When set to true, does not perform an explicit [[AVAudioSession sharedInstace] setActive:true] on initialization.
  ///
  /// coreaudio.noAudioSessionDeactivate
  /// iOS only. When set to true, does not perform an explicit [[AVAudioSession sharedInstace] setActive:false] on uninitialization.
  ///
  /// jack.pClientName
  /// The name of the client to pass to `jack_client_open()`.
  ///
  /// jack.tryStartServer
  /// Whether or not to try auto-starting the JACK server. Defaults to false.
  ///
  ///
  /// It is recommended that only a single context is active at any given time because it's a bulky data structure which performs run-time linking for the
  /// relevant backends every time it's initialized.
  ///
  /// The location of the context cannot change throughout it's lifetime. Consider allocating the `ma_context` object with `malloc()` if this is an issue. The
  /// reason for this is that a pointer to the context is stored in the `ma_device` structure.
  ///
  ///
  /// Example 1 - Default Initialization
  /// ----------------------------------
  /// The example below shows how to initialize the context using the default configuration.
  ///
  /// ```c
  /// ma_context context;
  /// ma_result result = ma_context_init(NULL, 0, NULL, &context);
  /// if (result != MA_SUCCESS) {
  /// // Error.
  /// }
  /// ```
  ///
  ///
  /// Example 2 - Custom Configuration
  /// --------------------------------
  /// The example below shows how to initialize the context using custom backend priorities and a custom configuration. In this hypothetical example, the program
  /// wants to prioritize ALSA over PulseAudio on Linux. They also want to avoid using the WinMM backend on Windows because it's latency is too high. They also
  /// want an error to be returned if no valid backend is available which they achieve by excluding the Null backend.
  ///
  /// For the configuration, the program wants to capture any log messages so they can, for example, route it to a log file and user interface.
  ///
  /// ```c
  /// ma_backend backends[] = {
  /// ma_backend_alsa,
  /// ma_backend_pulseaudio,
  /// ma_backend_wasapi,
  /// ma_backend_dsound
  /// };
  ///
  /// ma_log log;
  /// ma_log_init(&log);
  /// ma_log_register_callback(&log, ma_log_callback_init(my_log_callbac, pMyLogUserData));
  ///
  /// ma_context_config config = ma_context_config_init();
  /// config.pLog = &log; // Specify a custom log object in the config so any logs that are posted from ma_context_init() are captured.
  ///
  /// ma_context context;
  /// ma_result result = ma_context_init(backends, sizeof(backends)/sizeof(backends[0]), &config, &context);
  /// if (result != MA_SUCCESS) {
  /// // Error.
  /// if (result == MA_NO_BACKEND) {
  /// // Couldn't find an appropriate backend.
  /// }
  /// }
  ///
  /// // You could also attach a log callback post-initialization:
  /// ma_log_register_callback(ma_context_get_log(&context), ma_log_callback_init(my_log_callback, pMyLogUserData));
  /// ```
  ///
  ///
  /// See Also
  /// --------
  /// ma_context_config_init()
  /// ma_context_uninit()
  int ma_context_init(
    ffi.Pointer<ffi.Int32> backends,
    int backendCount,
    ffi.Pointer<ma_context_config> pConfig,
    ffi.Pointer<ma_context> pContext,
  ) {
    return _ma_context_init(
      backends,
      backendCount,
      pConfig,
      pContext,
    );
  }

  late final _ma_context_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int32>,
              ma_uint32,
              ffi.Pointer<ma_context_config>,
              ffi.Pointer<ma_context>)>>('ma_context_init');
  late final _ma_context_init = _ma_context_initPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ma_context_config>,
          ffi.Pointer<ma_context>)>();

  /// Uninitializes a context.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other error code otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Unsafe. Do not call this function across multiple threads as some backends read and write to global state.
  ///
  ///
  /// Remarks
  /// -------
  /// Results are undefined if you call this while any device created by this context is still active.
  ///
  ///
  /// See Also
  /// --------
  /// ma_context_init()
  int ma_context_uninit(
    ffi.Pointer<ma_context> pContext,
  ) {
    return _ma_context_uninit(
      pContext,
    );
  }

  late final _ma_context_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_context>)>>(
          'ma_context_uninit');
  late final _ma_context_uninit =
      _ma_context_uninitPtr.asFunction<int Function(ffi.Pointer<ma_context>)>();

  /// Retrieves the size of the ma_context object.
  ///
  /// This is mainly for the purpose of bindings to know how much memory to allocate.
  int ma_context_sizeof() {
    return _ma_context_sizeof();
  }

  late final _ma_context_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('ma_context_sizeof');
  late final _ma_context_sizeof =
      _ma_context_sizeofPtr.asFunction<int Function()>();

  /// Retrieves a pointer to the log object associated with this context.
  ///
  ///
  /// Remarks
  /// -------
  /// Pass the returned pointer to `ma_log_post()`, `ma_log_postv()` or `ma_log_postf()` to post a log
  /// message.
  ///
  /// You can attach your own logging callback to the log with `ma_log_register_callback()`
  ///
  ///
  /// Return Value
  /// ------------
  /// A pointer to the `ma_log` object that the context uses to post log messages. If some error occurs,
  /// NULL will be returned.
  ffi.Pointer<ma_log> ma_context_get_log(
    ffi.Pointer<ma_context> pContext,
  ) {
    return _ma_context_get_log(
      pContext,
    );
  }

  late final _ma_context_get_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_log> Function(
              ffi.Pointer<ma_context>)>>('ma_context_get_log');
  late final _ma_context_get_log = _ma_context_get_logPtr
      .asFunction<ffi.Pointer<ma_log> Function(ffi.Pointer<ma_context>)>();

  /// Enumerates over every device (both playback and capture).
  ///
  /// This is a lower-level enumeration function to the easier to use `ma_context_get_devices()`. Use `ma_context_enumerate_devices()` if you would rather not incur
  /// an internal heap allocation, or it simply suits your code better.
  ///
  /// Note that this only retrieves the ID and name/description of the device. The reason for only retrieving basic information is that it would otherwise require
  /// opening the backend device in order to probe it for more detailed information which can be inefficient. Consider using `ma_context_get_device_info()` for this,
  /// but don't call it from within the enumeration callback.
  ///
  /// Returning false from the callback will stop enumeration. Returning true will continue enumeration.
  ///
  ///
  /// Parameters
  /// ----------
  /// pContext (in)
  /// A pointer to the context performing the enumeration.
  ///
  /// callback (in)
  /// The callback to fire for each enumerated device.
  ///
  /// pUserData (in)
  /// A pointer to application-defined data passed to the callback.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other error code otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Safe. This is guarded using a simple mutex lock.
  ///
  ///
  /// Remarks
  /// -------
  /// Do _not_ assume the first enumerated device of a given type is the default device.
  ///
  /// Some backends and platforms may only support default playback and capture devices.
  ///
  /// In general, you should not do anything complicated from within the callback. In particular, do not try initializing a device from within the callback. Also,
  /// do not try to call `ma_context_get_device_info()` from within the callback.
  ///
  /// Consider using `ma_context_get_devices()` for a simpler and safer API, albeit at the expense of an internal heap allocation.
  ///
  ///
  /// Example 1 - Simple Enumeration
  /// ------------------------------
  /// ma_bool32 ma_device_enum_callback(ma_context* pContext, ma_device_type deviceType, const ma_device_info* pInfo, void* pUserData)
  /// {
  /// printf("Device Name: %s\n", pInfo->name);
  /// return MA_TRUE;
  /// }
  ///
  /// ma_result result = ma_context_enumerate_devices(&context, my_device_enum_callback, pMyUserData);
  /// if (result != MA_SUCCESS) {
  /// // Error.
  /// }
  ///
  ///
  /// See Also
  /// --------
  /// ma_context_get_devices()
  int ma_context_enumerate_devices(
    ffi.Pointer<ma_context> pContext,
    ma_enum_devices_callback_proc callback,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _ma_context_enumerate_devices(
      pContext,
      callback,
      pUserData,
    );
  }

  late final _ma_context_enumerate_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context>,
              ma_enum_devices_callback_proc,
              ffi.Pointer<ffi.Void>)>>('ma_context_enumerate_devices');
  late final _ma_context_enumerate_devices =
      _ma_context_enumerate_devicesPtr.asFunction<
          int Function(ffi.Pointer<ma_context>, ma_enum_devices_callback_proc,
              ffi.Pointer<ffi.Void>)>();

  /// Retrieves basic information about every active playback and/or capture device.
  ///
  /// This function will allocate memory internally for the device lists and return a pointer to them through the `ppPlaybackDeviceInfos` and `ppCaptureDeviceInfos`
  /// parameters. If you do not want to incur the overhead of these allocations consider using `ma_context_enumerate_devices()` which will instead use a callback.
  ///
  ///
  /// Parameters
  /// ----------
  /// pContext (in)
  /// A pointer to the context performing the enumeration.
  ///
  /// ppPlaybackDeviceInfos (out)
  /// A pointer to a pointer that will receive the address of a buffer containing the list of `ma_device_info` structures for playback devices.
  ///
  /// pPlaybackDeviceCount (out)
  /// A pointer to an unsigned integer that will receive the number of playback devices.
  ///
  /// ppCaptureDeviceInfos (out)
  /// A pointer to a pointer that will receive the address of a buffer containing the list of `ma_device_info` structures for capture devices.
  ///
  /// pCaptureDeviceCount (out)
  /// A pointer to an unsigned integer that will receive the number of capture devices.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other error code otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Unsafe. Since each call to this function invalidates the pointers from the previous call, you should not be calling this simultaneously across multiple
  /// threads. Instead, you need to make a copy of the returned data with your own higher level synchronization.
  ///
  ///
  /// Remarks
  /// -------
  /// It is _not_ safe to assume the first device in the list is the default device.
  ///
  /// You can pass in NULL for the playback or capture lists in which case they'll be ignored.
  ///
  /// The returned pointers will become invalid upon the next call this this function, or when the context is uninitialized. Do not free the returned pointers.
  ///
  ///
  /// See Also
  /// --------
  /// ma_context_get_devices()
  int ma_context_get_devices(
    ffi.Pointer<ma_context> pContext,
    ffi.Pointer<ffi.Pointer<ma_device_info>> ppPlaybackDeviceInfos,
    ffi.Pointer<ma_uint32> pPlaybackDeviceCount,
    ffi.Pointer<ffi.Pointer<ma_device_info>> ppCaptureDeviceInfos,
    ffi.Pointer<ma_uint32> pCaptureDeviceCount,
  ) {
    return _ma_context_get_devices(
      pContext,
      ppPlaybackDeviceInfos,
      pPlaybackDeviceCount,
      ppCaptureDeviceInfos,
      pCaptureDeviceCount,
    );
  }

  late final _ma_context_get_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context>,
              ffi.Pointer<ffi.Pointer<ma_device_info>>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ffi.Pointer<ma_device_info>>,
              ffi.Pointer<ma_uint32>)>>('ma_context_get_devices');
  late final _ma_context_get_devices = _ma_context_get_devicesPtr.asFunction<
      int Function(
          ffi.Pointer<ma_context>,
          ffi.Pointer<ffi.Pointer<ma_device_info>>,
          ffi.Pointer<ma_uint32>,
          ffi.Pointer<ffi.Pointer<ma_device_info>>,
          ffi.Pointer<ma_uint32>)>();

  /// Retrieves information about a device of the given type, with the specified ID and share mode.
  ///
  ///
  /// Parameters
  /// ----------
  /// pContext (in)
  /// A pointer to the context performing the query.
  ///
  /// deviceType (in)
  /// The type of the device being queried. Must be either `ma_device_type_playback` or `ma_device_type_capture`.
  ///
  /// pDeviceID (in)
  /// The ID of the device being queried.
  ///
  /// pDeviceInfo (out)
  /// A pointer to the `ma_device_info` structure that will receive the device information.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other error code otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Safe. This is guarded using a simple mutex lock.
  ///
  ///
  /// Remarks
  /// -------
  /// Do _not_ call this from within the `ma_context_enumerate_devices()` callback.
  ///
  /// It's possible for a device to have different information and capabilities depending on whether or not it's opened in shared or exclusive mode. For example, in
  /// shared mode, WASAPI always uses floating point samples for mixing, but in exclusive mode it can be anything. Therefore, this function allows you to specify
  /// which share mode you want information for. Note that not all backends and devices support shared or exclusive mode, in which case this function will fail if
  /// the requested share mode is unsupported.
  ///
  /// This leaves pDeviceInfo unmodified in the result of an error.
  int ma_context_get_device_info(
    ffi.Pointer<ma_context> pContext,
    int deviceType,
    ffi.Pointer<ma_device_id> pDeviceID,
    ffi.Pointer<ma_device_info> pDeviceInfo,
  ) {
    return _ma_context_get_device_info(
      pContext,
      deviceType,
      pDeviceID,
      pDeviceInfo,
    );
  }

  late final _ma_context_get_device_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context>,
              ffi.Int32,
              ffi.Pointer<ma_device_id>,
              ffi.Pointer<ma_device_info>)>>('ma_context_get_device_info');
  late final _ma_context_get_device_info =
      _ma_context_get_device_infoPtr.asFunction<
          int Function(ffi.Pointer<ma_context>, int, ffi.Pointer<ma_device_id>,
              ffi.Pointer<ma_device_info>)>();

  /// Determines if the given context supports loopback mode.
  ///
  ///
  /// Parameters
  /// ----------
  /// pContext (in)
  /// A pointer to the context getting queried.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_TRUE if the context supports loopback mode; MA_FALSE otherwise.
  int ma_context_is_loopback_supported(
    ffi.Pointer<ma_context> pContext,
  ) {
    return _ma_context_is_loopback_supported(
      pContext,
    );
  }

  late final _ma_context_is_loopback_supportedPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_context>)>>(
          'ma_context_is_loopback_supported');
  late final _ma_context_is_loopback_supported =
      _ma_context_is_loopback_supportedPtr
          .asFunction<int Function(ffi.Pointer<ma_context>)>();

  /// Initializes a device config with default settings.
  ///
  ///
  /// Parameters
  /// ----------
  /// deviceType (in)
  /// The type of the device this config is being initialized for. This must set to one of the following:
  ///
  /// |-------------------------|
  /// | Device Type             |
  /// |-------------------------|
  /// | ma_device_type_playback |
  /// | ma_device_type_capture  |
  /// | ma_device_type_duplex   |
  /// | ma_device_type_loopback |
  /// |-------------------------|
  ///
  ///
  /// Return Value
  /// ------------
  /// A new device config object with default settings. You will typically want to adjust the config after this function returns. See remarks.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Safe.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Safe, but don't try initializing a device in a callback.
  ///
  ///
  /// Remarks
  /// -------
  /// The returned config will be initialized to defaults. You will normally want to customize a few variables before initializing the device. See Example 1 for a
  /// typical configuration which sets the sample format, channel count, sample rate, data callback and user data. These are usually things you will want to change
  /// before initializing the device.
  ///
  /// See `ma_device_init()` for details on specific configuration options.
  ///
  ///
  /// Example 1 - Simple Configuration
  /// --------------------------------
  /// The example below is what a program will typically want to configure for each device at a minimum. Notice how `ma_device_config_init()` is called first, and
  /// then the returned object is modified directly. This is important because it ensures that your program continues to work as new configuration options are added
  /// to the `ma_device_config` structure.
  ///
  /// ```c
  /// ma_device_config config = ma_device_config_init(ma_device_type_playback);
  /// config.playback.format   = ma_format_f32;
  /// config.playback.channels = 2;
  /// config.sampleRate        = 48000;
  /// config.dataCallback      = ma_data_callback;
  /// config.pUserData         = pMyUserData;
  /// ```
  ///
  ///
  /// See Also
  /// --------
  /// ma_device_init()
  /// ma_device_init_ex()
  ma_device_config ma_device_config_init(
    int deviceType,
  ) {
    return _ma_device_config_init(
      deviceType,
    );
  }

  late final _ma_device_config_initPtr =
      _lookup<ffi.NativeFunction<ma_device_config Function(ffi.Int32)>>(
          'ma_device_config_init');
  late final _ma_device_config_init =
      _ma_device_config_initPtr.asFunction<ma_device_config Function(int)>();

  /// Initializes a device.
  ///
  /// A device represents a physical audio device. The idea is you send or receive audio data from the device to either play it back through a speaker, or capture it
  /// from a microphone. Whether or not you should send or receive data from the device (or both) depends on the type of device you are initializing which can be
  /// playback, capture, full-duplex or loopback. (Note that loopback mode is only supported on select backends.) Sending and receiving audio data to and from the
  /// device is done via a callback which is fired by miniaudio at periodic time intervals.
  ///
  /// The frequency at which data is delivered to and from a device depends on the size of it's period. The size of the period can be defined in terms of PCM frames
  /// or milliseconds, whichever is more convenient. Generally speaking, the smaller the period, the lower the latency at the expense of higher CPU usage and
  /// increased risk of glitching due to the more frequent and granular data deliver intervals. The size of a period will depend on your requirements, but
  /// miniaudio's defaults should work fine for most scenarios. If you're building a game you should leave this fairly small, whereas if you're building a simple
  /// media player you can make it larger. Note that the period size you request is actually just a hint - miniaudio will tell the backend what you want, but the
  /// backend is ultimately responsible for what it gives you. You cannot assume you will get exactly what you ask for.
  ///
  /// When delivering data to and from a device you need to make sure it's in the correct format which you can set through the device configuration. You just set the
  /// format that you want to use and miniaudio will perform all of the necessary conversion for you internally. When delivering data to and from the callback you
  /// can assume the format is the same as what you requested when you initialized the device. See Remarks for more details on miniaudio's data conversion pipeline.
  ///
  ///
  /// Parameters
  /// ----------
  /// pContext (in, optional)
  /// A pointer to the context that owns the device. This can be null, in which case it creates a default context internally.
  ///
  /// pConfig (in)
  /// A pointer to the device configuration. Cannot be null. See remarks for details.
  ///
  /// pDevice (out)
  /// A pointer to the device object being initialized.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other error code otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Unsafe. It is not safe to call this function simultaneously for different devices because some backends depend on and mutate global state. The same applies to
  /// calling this at the same time as `ma_device_uninit()`.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Unsafe. It is not safe to call this inside any callback.
  ///
  ///
  /// Remarks
  /// -------
  /// Setting `pContext` to NULL will result in miniaudio creating a default context internally and is equivalent to passing in a context initialized like so:
  ///
  /// ```c
  /// ma_context_init(NULL, 0, NULL, &context);
  /// ```
  ///
  /// Do not set `pContext` to NULL if you are needing to open multiple devices. You can, however, use NULL when initializing the first device, and then use
  /// device.pContext for the initialization of other devices.
  ///
  /// The device can be configured via the `pConfig` argument. The config object is initialized with `ma_device_config_init()`. Individual configuration settings can
  /// then be set directly on the structure. Below are the members of the `ma_device_config` object.
  ///
  /// deviceType
  /// Must be `ma_device_type_playback`, `ma_device_type_capture`, `ma_device_type_duplex` of `ma_device_type_loopback`.
  ///
  /// sampleRate
  /// The sample rate, in hertz. The most common sample rates are 48000 and 44100. Setting this to 0 will use the device's native sample rate.
  ///
  /// periodSizeInFrames
  /// The desired size of a period in PCM frames. If this is 0, `periodSizeInMilliseconds` will be used instead. If both are 0 the default buffer size will
  /// be used depending on the selected performance profile. This value affects latency. See below for details.
  ///
  /// periodSizeInMilliseconds
  /// The desired size of a period in milliseconds. If this is 0, `periodSizeInFrames` will be used instead. If both are 0 the default buffer size will be
  /// used depending on the selected performance profile. The value affects latency. See below for details.
  ///
  /// periods
  /// The number of periods making up the device's entire buffer. The total buffer size is `periodSizeInFrames` or `periodSizeInMilliseconds` multiplied by
  /// this value. This is just a hint as backends will be the ones who ultimately decide how your periods will be configured.
  ///
  /// performanceProfile
  /// A hint to miniaudio as to the performance requirements of your program. Can be either `ma_performance_profile_low_latency` (default) or
  /// `ma_performance_profile_conservative`. This mainly affects the size of default buffers and can usually be left at it's default value.
  ///
  /// noPreSilencedOutputBuffer
  /// When set to true, the contents of the output buffer passed into the data callback will be left undefined. When set to false (default), the contents of
  /// the output buffer will be cleared the zero. You can use this to avoid the overhead of zeroing out the buffer if you can guarantee that your data
  /// callback will write to every sample in the output buffer, or if you are doing your own clearing.
  ///
  /// noClip
  /// When set to true, the contents of the output buffer passed into the data callback will be clipped after returning. When set to false (default), the
  /// contents of the output buffer are left alone after returning and it will be left up to the backend itself to decide whether or not the clip. This only
  /// applies when the playback sample format is f32.
  ///
  /// noDisableDenormals
  /// By default, miniaudio will disable denormals when the data callback is called. Setting this to true will prevent the disabling of denormals.
  ///
  /// noFixedSizedCallback
  /// Allows miniaudio to fire the data callback with any frame count. When this is set to false (the default), the data callback will be fired with a
  /// consistent frame count as specified by `periodSizeInFrames` or `periodSizeInMilliseconds`. When set to true, miniaudio will fire the callback with
  /// whatever the backend requests, which could be anything.
  ///
  /// dataCallback
  /// The callback to fire whenever data is ready to be delivered to or from the device.
  ///
  /// notificationCallback
  /// The callback to fire when something has changed with the device, such as whether or not it has been started or stopped.
  ///
  /// pUserData
  /// The user data pointer to use with the device. You can access this directly from the device object like `device.pUserData`.
  ///
  /// resampling.algorithm
  /// The resampling algorithm to use when miniaudio needs to perform resampling between the rate specified by `sampleRate` and the device's native rate. The
  /// default value is `ma_resample_algorithm_linear`, and the quality can be configured with `resampling.linear.lpfOrder`.
  ///
  /// resampling.pBackendVTable
  /// A pointer to an optional vtable that can be used for plugging in a custom resampler.
  ///
  /// resampling.pBackendUserData
  /// A pointer that will passed to callbacks in pBackendVTable.
  ///
  /// resampling.linear.lpfOrder
  /// The linear resampler applies a low-pass filter as part of it's processing for anti-aliasing. This setting controls the order of the filter. The higher
  /// the value, the better the quality, in general. Setting this to 0 will disable low-pass filtering altogether. The maximum value is
  /// `MA_MAX_FILTER_ORDER`. The default value is `min(4, MA_MAX_FILTER_ORDER)`.
  ///
  /// playback.pDeviceID
  /// A pointer to a `ma_device_id` structure containing the ID of the playback device to initialize. Setting this NULL (default) will use the system's
  /// default playback device. Retrieve the device ID from the `ma_device_info` structure, which can be retrieved using device enumeration.
  ///
  /// playback.format
  /// The sample format to use for playback. When set to `ma_format_unknown` the device's native format will be used. This can be retrieved after
  /// initialization from the device object directly with `device.playback.format`.
  ///
  /// playback.channels
  /// The number of channels to use for playback. When set to 0 the device's native channel count will be used. This can be retrieved after initialization
  /// from the device object directly with `device.playback.channels`.
  ///
  /// playback.pChannelMap
  /// The channel map to use for playback. When left empty, the device's native channel map will be used. This can be retrieved after initialization from the
  /// device object direct with `device.playback.pChannelMap`. When set, the buffer should contain `channels` items.
  ///
  /// playback.shareMode
  /// The preferred share mode to use for playback. Can be either `ma_share_mode_shared` (default) or `ma_share_mode_exclusive`. Note that if you specify
  /// exclusive mode, but it's not supported by the backend, initialization will fail. You can then fall back to shared mode if desired by changing this to
  /// ma_share_mode_shared and reinitializing.
  ///
  /// capture.pDeviceID
  /// A pointer to a `ma_device_id` structure containing the ID of the capture device to initialize. Setting this NULL (default) will use the system's
  /// default capture device. Retrieve the device ID from the `ma_device_info` structure, which can be retrieved using device enumeration.
  ///
  /// capture.format
  /// The sample format to use for capture. When set to `ma_format_unknown` the device's native format will be used. This can be retrieved after
  /// initialization from the device object directly with `device.capture.format`.
  ///
  /// capture.channels
  /// The number of channels to use for capture. When set to 0 the device's native channel count will be used. This can be retrieved after initialization
  /// from the device object directly with `device.capture.channels`.
  ///
  /// capture.pChannelMap
  /// The channel map to use for capture. When left empty, the device's native channel map will be used. This can be retrieved after initialization from the
  /// device object direct with `device.capture.pChannelMap`. When set, the buffer should contain `channels` items.
  ///
  /// capture.shareMode
  /// The preferred share mode to use for capture. Can be either `ma_share_mode_shared` (default) or `ma_share_mode_exclusive`. Note that if you specify
  /// exclusive mode, but it's not supported by the backend, initialization will fail. You can then fall back to shared mode if desired by changing this to
  /// ma_share_mode_shared and reinitializing.
  ///
  /// wasapi.noAutoConvertSRC
  /// WASAPI only. When set to true, disables WASAPI's automatic resampling and forces the use of miniaudio's resampler. Defaults to false.
  ///
  /// wasapi.noDefaultQualitySRC
  /// WASAPI only. Only used when `wasapi.noAutoConvertSRC` is set to false. When set to true, disables the use of `AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY`.
  /// You should usually leave this set to false, which is the default.
  ///
  /// wasapi.noAutoStreamRouting
  /// WASAPI only. When set to true, disables automatic stream routing on the WASAPI backend. Defaults to false.
  ///
  /// wasapi.noHardwareOffloading
  /// WASAPI only. When set to true, disables the use of WASAPI's hardware offloading feature. Defaults to false.
  ///
  /// alsa.noMMap
  /// ALSA only. When set to true, disables MMap mode. Defaults to false.
  ///
  /// alsa.noAutoFormat
  /// ALSA only. When set to true, disables ALSA's automatic format conversion by including the SND_PCM_NO_AUTO_FORMAT flag. Defaults to false.
  ///
  /// alsa.noAutoChannels
  /// ALSA only. When set to true, disables ALSA's automatic channel conversion by including the SND_PCM_NO_AUTO_CHANNELS flag. Defaults to false.
  ///
  /// alsa.noAutoResample
  /// ALSA only. When set to true, disables ALSA's automatic resampling by including the SND_PCM_NO_AUTO_RESAMPLE flag. Defaults to false.
  ///
  /// pulse.pStreamNamePlayback
  /// PulseAudio only. Sets the stream name for playback.
  ///
  /// pulse.pStreamNameCapture
  /// PulseAudio only. Sets the stream name for capture.
  ///
  /// coreaudio.allowNominalSampleRateChange
  /// Core Audio only. Desktop only. When enabled, allows the sample rate of the device to be changed at the operating system level. This
  /// is disabled by default in order to prevent intrusive changes to the user's system. This is useful if you want to use a sample rate
  /// that is known to be natively supported by the hardware thereby avoiding the cost of resampling. When set to true, miniaudio will
  /// find the closest match between the sample rate requested in the device config and the sample rates natively supported by the
  /// hardware. When set to false, the sample rate currently set by the operating system will always be used.
  ///
  /// opensl.streamType
  /// OpenSL only. Explicitly sets the stream type. If left unset (`ma_opensl_stream_type_default`), the
  /// stream type will be left unset. Think of this as the type of audio you're playing.
  ///
  /// opensl.recordingPreset
  /// OpenSL only. Explicitly sets the type of recording your program will be doing. When left
  /// unset, the recording preset will be left unchanged.
  ///
  /// aaudio.usage
  /// AAudio only. Explicitly sets the nature of the audio the program will be consuming. When
  /// left unset, the usage will be left unchanged.
  ///
  /// aaudio.contentType
  /// AAudio only. Sets the content type. When left unset, the content type will be left unchanged.
  ///
  /// aaudio.inputPreset
  /// AAudio only. Explicitly sets the type of recording your program will be doing. When left
  /// unset, the input preset will be left unchanged.
  ///
  /// aaudio.noAutoStartAfterReroute
  /// AAudio only. Controls whether or not the device should be automatically restarted after a
  /// stream reroute. When set to false (default) the device will be restarted automatically;
  /// otherwise the device will be stopped.
  ///
  ///
  /// Once initialized, the device's config is immutable. If you need to change the config you will need to initialize a new device.
  ///
  /// After initializing the device it will be in a stopped state. To start it, use `ma_device_start()`.
  ///
  /// If both `periodSizeInFrames` and `periodSizeInMilliseconds` are set to zero, it will default to `MA_DEFAULT_PERIOD_SIZE_IN_MILLISECONDS_LOW_LATENCY` or
  /// `MA_DEFAULT_PERIOD_SIZE_IN_MILLISECONDS_CONSERVATIVE`, depending on whether or not `performanceProfile` is set to `ma_performance_profile_low_latency` or
  /// `ma_performance_profile_conservative`.
  ///
  /// If you request exclusive mode and the backend does not support it an error will be returned. For robustness, you may want to first try initializing the device
  /// in exclusive mode, and then fall back to shared mode if required. Alternatively you can just request shared mode (the default if you leave it unset in the
  /// config) which is the most reliable option. Some backends do not have a practical way of choosing whether or not the device should be exclusive or not (ALSA,
  /// for example) in which case it just acts as a hint. Unless you have special requirements you should try avoiding exclusive mode as it's intrusive to the user.
  /// Starting with Windows 10, miniaudio will use low-latency shared mode where possible which may make exclusive mode unnecessary.
  ///
  /// When sending or receiving data to/from a device, miniaudio will internally perform a format conversion to convert between the format specified by the config
  /// and the format used internally by the backend. If you pass in 0 for the sample format, channel count, sample rate _and_ channel map, data transmission will run
  /// on an optimized pass-through fast path. You can retrieve the format, channel count and sample rate by inspecting the `playback/capture.format`,
  /// `playback/capture.channels` and `sampleRate` members of the device object.
  ///
  /// When compiling for UWP you must ensure you call this function on the main UI thread because the operating system may need to present the user with a message
  /// asking for permissions. Please refer to the official documentation for ActivateAudioInterfaceAsync() for more information.
  ///
  /// ALSA Specific: When initializing the default device, requesting shared mode will try using the "dmix" device for playback and the "dsnoop" device for capture.
  /// If these fail it will try falling back to the "hw" device.
  ///
  ///
  /// Example 1 - Simple Initialization
  /// ---------------------------------
  /// This example shows how to initialize a simple playback device using a standard configuration. If you are just needing to do simple playback from the default
  /// playback device this is usually all you need.
  ///
  /// ```c
  /// ma_device_config config = ma_device_config_init(ma_device_type_playback);
  /// config.playback.format   = ma_format_f32;
  /// config.playback.channels = 2;
  /// config.sampleRate        = 48000;
  /// config.dataCallback      = ma_data_callback;
  /// config.pMyUserData       = pMyUserData;
  ///
  /// ma_device device;
  /// ma_result result = ma_device_init(NULL, &config, &device);
  /// if (result != MA_SUCCESS) {
  /// // Error
  /// }
  /// ```
  ///
  ///
  /// Example 2 - Advanced Initialization
  /// -----------------------------------
  /// This example shows how you might do some more advanced initialization. In this hypothetical example we want to control the latency by setting the buffer size
  /// and period count. We also want to allow the user to be able to choose which device to output from which means we need a context so we can perform device
  /// enumeration.
  ///
  /// ```c
  /// ma_context context;
  /// ma_result result = ma_context_init(NULL, 0, NULL, &context);
  /// if (result != MA_SUCCESS) {
  /// // Error
  /// }
  ///
  /// ma_device_info* pPlaybackDeviceInfos;
  /// ma_uint32 playbackDeviceCount;
  /// result = ma_context_get_devices(&context, &pPlaybackDeviceInfos, &playbackDeviceCount, NULL, NULL);
  /// if (result != MA_SUCCESS) {
  /// // Error
  /// }
  ///
  /// // ... choose a device from pPlaybackDeviceInfos ...
  ///
  /// ma_device_config config = ma_device_config_init(ma_device_type_playback);
  /// config.playback.pDeviceID       = pMyChosenDeviceID;    // <-- Get this from the `id` member of one of the `ma_device_info` objects returned by ma_context_get_devices().
  /// config.playback.format          = ma_format_f32;
  /// config.playback.channels        = 2;
  /// config.sampleRate               = 48000;
  /// config.dataCallback             = ma_data_callback;
  /// config.pUserData                = pMyUserData;
  /// config.periodSizeInMilliseconds = 10;
  /// config.periods                  = 3;
  ///
  /// ma_device device;
  /// result = ma_device_init(&context, &config, &device);
  /// if (result != MA_SUCCESS) {
  /// // Error
  /// }
  /// ```
  ///
  ///
  /// See Also
  /// --------
  /// ma_device_config_init()
  /// ma_device_uninit()
  /// ma_device_start()
  /// ma_context_init()
  /// ma_context_get_devices()
  /// ma_context_enumerate_devices()
  int ma_device_init(
    ffi.Pointer<ma_context> pContext,
    ffi.Pointer<ma_device_config> pConfig,
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_init(
      pContext,
      pConfig,
      pDevice,
    );
  }

  late final _ma_device_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context>,
              ffi.Pointer<ma_device_config>,
              ffi.Pointer<ma_device>)>>('ma_device_init');
  late final _ma_device_init = _ma_device_initPtr.asFunction<
      int Function(ffi.Pointer<ma_context>, ffi.Pointer<ma_device_config>,
          ffi.Pointer<ma_device>)>();

  /// Initializes a device without a context, with extra parameters for controlling the configuration of the internal self-managed context.
  ///
  /// This is the same as `ma_device_init()`, only instead of a context being passed in, the parameters from `ma_context_init()` are passed in instead. This function
  /// allows you to configure the internally created context.
  ///
  ///
  /// Parameters
  /// ----------
  /// backends (in, optional)
  /// A list of backends to try initializing, in priority order. Can be NULL, in which case it uses default priority order.
  ///
  /// backendCount (in, optional)
  /// The number of items in `backend`. Ignored if `backend` is NULL.
  ///
  /// pContextConfig (in, optional)
  /// The context configuration.
  ///
  /// pConfig (in)
  /// A pointer to the device configuration. Cannot be null. See remarks for details.
  ///
  /// pDevice (out)
  /// A pointer to the device object being initialized.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other error code otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Unsafe. It is not safe to call this function simultaneously for different devices because some backends depend on and mutate global state. The same applies to
  /// calling this at the same time as `ma_device_uninit()`.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Unsafe. It is not safe to call this inside any callback.
  ///
  ///
  /// Remarks
  /// -------
  /// You only need to use this function if you want to configure the context differently to it's defaults. You should never use this function if you want to manage
  /// your own context.
  ///
  /// See the documentation for `ma_context_init()` for information on the different context configuration options.
  ///
  ///
  /// See Also
  /// --------
  /// ma_device_init()
  /// ma_device_uninit()
  /// ma_device_config_init()
  /// ma_context_init()
  int ma_device_init_ex(
    ffi.Pointer<ffi.Int32> backends,
    int backendCount,
    ffi.Pointer<ma_context_config> pContextConfig,
    ffi.Pointer<ma_device_config> pConfig,
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_init_ex(
      backends,
      backendCount,
      pContextConfig,
      pConfig,
      pDevice,
    );
  }

  late final _ma_device_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int32>,
              ma_uint32,
              ffi.Pointer<ma_context_config>,
              ffi.Pointer<ma_device_config>,
              ffi.Pointer<ma_device>)>>('ma_device_init_ex');
  late final _ma_device_init_ex = _ma_device_init_exPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ma_context_config>,
          ffi.Pointer<ma_device_config>, ffi.Pointer<ma_device>)>();

  /// Uninitializes a device.
  ///
  /// This will explicitly stop the device. You do not need to call `ma_device_stop()` beforehand, but it's harmless if you do.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice (in)
  /// A pointer to the device to stop.
  ///
  ///
  /// Return Value
  /// ------------
  /// Nothing
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Unsafe. As soon as this API is called the device should be considered undefined.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Unsafe. It is not safe to call this inside any callback. Doing this will result in a deadlock.
  ///
  ///
  /// See Also
  /// --------
  /// ma_device_init()
  /// ma_device_stop()
  void ma_device_uninit(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_uninit(
      pDevice,
    );
  }

  late final _ma_device_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_device>)>>(
          'ma_device_uninit');
  late final _ma_device_uninit =
      _ma_device_uninitPtr.asFunction<void Function(ffi.Pointer<ma_device>)>();

  /// Retrieves a pointer to the context that owns the given device.
  ffi.Pointer<ma_context> ma_device_get_context(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_get_context(
      pDevice,
    );
  }

  late final _ma_device_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_context> Function(
              ffi.Pointer<ma_device>)>>('ma_device_get_context');
  late final _ma_device_get_context = _ma_device_get_contextPtr
      .asFunction<ffi.Pointer<ma_context> Function(ffi.Pointer<ma_device>)>();

  /// Helper function for retrieving the log object associated with the context that owns this device.
  ffi.Pointer<ma_log> ma_device_get_log(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_get_log(
      pDevice,
    );
  }

  late final _ma_device_get_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_log> Function(
              ffi.Pointer<ma_device>)>>('ma_device_get_log');
  late final _ma_device_get_log = _ma_device_get_logPtr
      .asFunction<ffi.Pointer<ma_log> Function(ffi.Pointer<ma_device>)>();

  /// Retrieves information about the device.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice (in)
  /// A pointer to the device whose information is being retrieved.
  ///
  /// type (in)
  /// The device type. This parameter is required for duplex devices. When retrieving device
  /// information, you are doing so for an individual playback or capture device.
  ///
  /// pDeviceInfo (out)
  /// A pointer to the `ma_device_info` that will receive the device information.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other error code otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Unsafe. This should be considered unsafe because it may be calling into the backend which may or
  /// may not be safe.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Unsafe. You should avoid calling this in the data callback because it may call into the backend
  /// which may or may not be safe.
  int ma_device_get_info(
    ffi.Pointer<ma_device> pDevice,
    int type,
    ffi.Pointer<ma_device_info> pDeviceInfo,
  ) {
    return _ma_device_get_info(
      pDevice,
      type,
      pDeviceInfo,
    );
  }

  late final _ma_device_get_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device>, ffi.Int32,
              ffi.Pointer<ma_device_info>)>>('ma_device_get_info');
  late final _ma_device_get_info = _ma_device_get_infoPtr.asFunction<
      int Function(ffi.Pointer<ma_device>, int, ffi.Pointer<ma_device_info>)>();

  /// Retrieves the name of the device.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice (in)
  /// A pointer to the device whose information is being retrieved.
  ///
  /// type (in)
  /// The device type. This parameter is required for duplex devices. When retrieving device
  /// information, you are doing so for an individual playback or capture device.
  ///
  /// pName (out)
  /// A pointer to the buffer that will receive the name.
  ///
  /// nameCap (in)
  /// The capacity of the output buffer, including space for the null terminator.
  ///
  /// pLengthNotIncludingNullTerminator (out, optional)
  /// A pointer to the variable that will receive the length of the name, not including the null
  /// terminator.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other error code otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Unsafe. This should be considered unsafe because it may be calling into the backend which may or
  /// may not be safe.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Unsafe. You should avoid calling this in the data callback because it may call into the backend
  /// which may or may not be safe.
  ///
  ///
  /// Remarks
  /// -------
  /// If the name does not fully fit into the output buffer, it'll be truncated. You can pass in NULL to
  /// `pName` if you want to first get the length of the name for the purpose of memory allocation of the
  /// output buffer. Allocating a buffer of size `MA_MAX_DEVICE_NAME_LENGTH + 1` should be enough for
  /// most cases and will avoid the need for the inefficiency of calling this function twice.
  ///
  /// This is implemented in terms of `ma_device_get_info()`.
  int ma_device_get_name(
    ffi.Pointer<ma_device> pDevice,
    int type,
    ffi.Pointer<ffi.Char> pName,
    int nameCap,
    ffi.Pointer<ffi.Size> pLengthNotIncludingNullTerminator,
  ) {
    return _ma_device_get_name(
      pDevice,
      type,
      pName,
      nameCap,
      pLengthNotIncludingNullTerminator,
    );
  }

  late final _ma_device_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('ma_device_get_name');
  late final _ma_device_get_name = _ma_device_get_namePtr.asFunction<
      int Function(ffi.Pointer<ma_device>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Size>)>();

  /// Starts the device. For playback devices this begins playback. For capture devices it begins recording.
  ///
  /// Use `ma_device_stop()` to stop the device.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice (in)
  /// A pointer to the device to start.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other error code otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Safe. It's safe to call this from any thread with the exception of the callback thread.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Unsafe. It is not safe to call this inside any callback.
  ///
  ///
  /// Remarks
  /// -------
  /// For a playback device, this will retrieve an initial chunk of audio data from the client before returning. The reason for this is to ensure there is valid
  /// audio data in the buffer, which needs to be done before the device begins playback.
  ///
  /// This API waits until the backend device has been started for real by the worker thread. It also waits on a mutex for thread-safety.
  ///
  /// Do not call this in any callback.
  ///
  ///
  /// See Also
  /// --------
  /// ma_device_stop()
  int ma_device_start(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_start(
      pDevice,
    );
  }

  late final _ma_device_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device>)>>(
          'ma_device_start');
  late final _ma_device_start =
      _ma_device_startPtr.asFunction<int Function(ffi.Pointer<ma_device>)>();

  /// Stops the device. For playback devices this stops playback. For capture devices it stops recording.
  ///
  /// Use `ma_device_start()` to start the device again.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice (in)
  /// A pointer to the device to stop.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other error code otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Safe. It's safe to call this from any thread with the exception of the callback thread.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Unsafe. It is not safe to call this inside any callback. Doing this will result in a deadlock.
  ///
  ///
  /// Remarks
  /// -------
  /// This API needs to wait on the worker thread to stop the backend device properly before returning. It also waits on a mutex for thread-safety. In addition, some
  /// backends need to wait for the device to finish playback/recording of the current fragment which can take some time (usually proportionate to the buffer size
  /// that was specified at initialization time).
  ///
  /// Backends are required to either pause the stream in-place or drain the buffer if pausing is not possible. The reason for this is that stopping the device and
  /// the resuming it with ma_device_start() (which you might do when your program loses focus) may result in a situation where those samples are never output to the
  /// speakers or received from the microphone which can in turn result in de-syncs.
  ///
  /// Do not call this in any callback.
  ///
  /// This will be called implicitly by `ma_device_uninit()`.
  ///
  ///
  /// See Also
  /// --------
  /// ma_device_start()
  int ma_device_stop(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_stop(
      pDevice,
    );
  }

  late final _ma_device_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device>)>>(
          'ma_device_stop');
  late final _ma_device_stop =
      _ma_device_stopPtr.asFunction<int Function(ffi.Pointer<ma_device>)>();

  /// Determines whether or not the device is started.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice (in)
  /// A pointer to the device whose start state is being retrieved.
  ///
  ///
  /// Return Value
  /// ------------
  /// True if the device is started, false otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Safe. If another thread calls `ma_device_start()` or `ma_device_stop()` at this same time as this function is called, there's a very small chance the return
  /// value will be out of sync.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Safe. This is implemented as a simple accessor.
  ///
  ///
  /// See Also
  /// --------
  /// ma_device_start()
  /// ma_device_stop()
  int ma_device_is_started(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_is_started(
      pDevice,
    );
  }

  late final _ma_device_is_startedPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_device>)>>(
          'ma_device_is_started');
  late final _ma_device_is_started = _ma_device_is_startedPtr
      .asFunction<int Function(ffi.Pointer<ma_device>)>();

  /// Retrieves the state of the device.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice (in)
  /// A pointer to the device whose state is being retrieved.
  ///
  ///
  /// Return Value
  /// ------------
  /// The current state of the device. The return value will be one of the following:
  ///
  /// +-------------------------------+------------------------------------------------------------------------------+
  /// | ma_device_state_uninitialized | Will only be returned if the device is in the middle of initialization.      |
  /// +-------------------------------+------------------------------------------------------------------------------+
  /// | ma_device_state_stopped       | The device is stopped. The initial state of the device after initialization. |
  /// +-------------------------------+------------------------------------------------------------------------------+
  /// | ma_device_state_started       | The device started and requesting and/or delivering audio data.              |
  /// +-------------------------------+------------------------------------------------------------------------------+
  /// | ma_device_state_starting      | The device is in the process of starting.                                    |
  /// +-------------------------------+------------------------------------------------------------------------------+
  /// | ma_device_state_stopping      | The device is in the process of stopping.                                    |
  /// +-------------------------------+------------------------------------------------------------------------------+
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Safe. This is implemented as a simple accessor. Note that if the device is started or stopped at the same time as this function is called,
  /// there's a possibility the return value could be out of sync. See remarks.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Safe. This is implemented as a simple accessor.
  ///
  ///
  /// Remarks
  /// -------
  /// The general flow of a devices state goes like this:
  ///
  /// ```
  /// ma_device_init()  -> ma_device_state_uninitialized -> ma_device_state_stopped
  /// ma_device_start() -> ma_device_state_starting      -> ma_device_state_started
  /// ma_device_stop()  -> ma_device_state_stopping      -> ma_device_state_stopped
  /// ```
  ///
  /// When the state of the device is changed with `ma_device_start()` or `ma_device_stop()` at this same time as this function is called, the
  /// value returned by this function could potentially be out of sync. If this is significant to your program you need to implement your own
  /// synchronization.
  int ma_device_get_state(
    ffi.Pointer<ma_device> pDevice,
  ) {
    return _ma_device_get_state(
      pDevice,
    );
  }

  late final _ma_device_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device>)>>(
          'ma_device_get_state');
  late final _ma_device_get_state = _ma_device_get_statePtr
      .asFunction<int Function(ffi.Pointer<ma_device>)>();

  /// Performs post backend initialization routines for setting up internal data conversion.
  ///
  /// This should be called whenever the backend is initialized. The only time this should be called from
  /// outside of miniaudio is if you're implementing a custom backend, and you would only do it if you
  /// are reinitializing the backend due to rerouting or reinitializing for some reason.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice [in]
  /// A pointer to the device.
  ///
  /// deviceType [in]
  /// The type of the device that was just reinitialized.
  ///
  /// pPlaybackDescriptor [in]
  /// The descriptor of the playback device containing the internal data format and buffer sizes.
  ///
  /// pPlaybackDescriptor [in]
  /// The descriptor of the capture device containing the internal data format and buffer sizes.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other error otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Unsafe. This will be reinitializing internal data converters which may be in use by another thread.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Unsafe. This will be reinitializing internal data converters which may be in use by the callback.
  ///
  ///
  /// Remarks
  /// -------
  /// For a duplex device, you can call this for only one side of the system. This is why the deviceType
  /// is specified as a parameter rather than deriving it from the device.
  ///
  /// You do not need to call this manually unless you are doing a custom backend, in which case you need
  /// only do it if you're manually performing rerouting or reinitialization.
  int ma_device_post_init(
    ffi.Pointer<ma_device> pDevice,
    int deviceType,
    ffi.Pointer<ma_device_descriptor> pPlaybackDescriptor,
    ffi.Pointer<ma_device_descriptor> pCaptureDescriptor,
  ) {
    return _ma_device_post_init(
      pDevice,
      deviceType,
      pPlaybackDescriptor,
      pCaptureDescriptor,
    );
  }

  late final _ma_device_post_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device>,
              ffi.Int32,
              ffi.Pointer<ma_device_descriptor>,
              ffi.Pointer<ma_device_descriptor>)>>('ma_device_post_init');
  late final _ma_device_post_init = _ma_device_post_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_device>,
          int,
          ffi.Pointer<ma_device_descriptor>,
          ffi.Pointer<ma_device_descriptor>)>();

  /// Sets the master volume factor for the device.
  ///
  /// The volume factor must be between 0 (silence) and 1 (full volume). Use `ma_device_set_master_volume_db()` to use decibel notation, where 0 is full volume and
  /// values less than 0 decreases the volume.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice (in)
  /// A pointer to the device whose volume is being set.
  ///
  /// volume (in)
  /// The new volume factor. Must be >= 0.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if the volume was set successfully.
  /// MA_INVALID_ARGS if pDevice is NULL.
  /// MA_INVALID_ARGS if volume is negative.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Safe. This just sets a local member of the device object.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Safe. If you set the volume in the data callback, that data written to the output buffer will have the new volume applied.
  ///
  ///
  /// Remarks
  /// -------
  /// This applies the volume factor across all channels.
  ///
  /// This does not change the operating system's volume. It only affects the volume for the given `ma_device` object's audio stream.
  ///
  ///
  /// See Also
  /// --------
  /// ma_device_get_master_volume()
  /// ma_device_set_master_volume_db()
  /// ma_device_get_master_volume_db()
  int ma_device_set_master_volume(
    ffi.Pointer<ma_device> pDevice,
    double volume,
  ) {
    return _ma_device_set_master_volume(
      pDevice,
      volume,
    );
  }

  late final _ma_device_set_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device>,
              ffi.Float)>>('ma_device_set_master_volume');
  late final _ma_device_set_master_volume = _ma_device_set_master_volumePtr
      .asFunction<int Function(ffi.Pointer<ma_device>, double)>();

  /// Retrieves the master volume factor for the device.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice (in)
  /// A pointer to the device whose volume factor is being retrieved.
  ///
  /// pVolume (in)
  /// A pointer to the variable that will receive the volume factor. The returned value will be in the range of [0, 1].
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful.
  /// MA_INVALID_ARGS if pDevice is NULL.
  /// MA_INVALID_ARGS if pVolume is NULL.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Safe. This just a simple member retrieval.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Safe.
  ///
  ///
  /// Remarks
  /// -------
  /// If an error occurs, `*pVolume` will be set to 0.
  ///
  ///
  /// See Also
  /// --------
  /// ma_device_set_master_volume()
  /// ma_device_set_master_volume_gain_db()
  /// ma_device_get_master_volume_gain_db()
  int ma_device_get_master_volume(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Float> pVolume,
  ) {
    return _ma_device_get_master_volume(
      pDevice,
      pVolume,
    );
  }

  late final _ma_device_get_master_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device>,
              ffi.Pointer<ffi.Float>)>>('ma_device_get_master_volume');
  late final _ma_device_get_master_volume =
      _ma_device_get_master_volumePtr.asFunction<
          int Function(ffi.Pointer<ma_device>, ffi.Pointer<ffi.Float>)>();

  /// Sets the master volume for the device as gain in decibels.
  ///
  /// A gain of 0 is full volume, whereas a gain of < 0 will decrease the volume.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice (in)
  /// A pointer to the device whose gain is being set.
  ///
  /// gainDB (in)
  /// The new volume as gain in decibels. Must be less than or equal to 0, where 0 is full volume and anything less than 0 decreases the volume.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if the volume was set successfully.
  /// MA_INVALID_ARGS if pDevice is NULL.
  /// MA_INVALID_ARGS if the gain is > 0.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Safe. This just sets a local member of the device object.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Safe. If you set the volume in the data callback, that data written to the output buffer will have the new volume applied.
  ///
  ///
  /// Remarks
  /// -------
  /// This applies the gain across all channels.
  ///
  /// This does not change the operating system's volume. It only affects the volume for the given `ma_device` object's audio stream.
  ///
  ///
  /// See Also
  /// --------
  /// ma_device_get_master_volume_gain_db()
  /// ma_device_set_master_volume()
  /// ma_device_get_master_volume()
  int ma_device_set_master_volume_db(
    ffi.Pointer<ma_device> pDevice,
    double gainDB,
  ) {
    return _ma_device_set_master_volume_db(
      pDevice,
      gainDB,
    );
  }

  late final _ma_device_set_master_volume_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device>,
              ffi.Float)>>('ma_device_set_master_volume_db');
  late final _ma_device_set_master_volume_db =
      _ma_device_set_master_volume_dbPtr
          .asFunction<int Function(ffi.Pointer<ma_device>, double)>();

  /// Retrieves the master gain in decibels.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice (in)
  /// A pointer to the device whose gain is being retrieved.
  ///
  /// pGainDB (in)
  /// A pointer to the variable that will receive the gain in decibels. The returned value will be <= 0.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful.
  /// MA_INVALID_ARGS if pDevice is NULL.
  /// MA_INVALID_ARGS if pGainDB is NULL.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Safe. This just a simple member retrieval.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Safe.
  ///
  ///
  /// Remarks
  /// -------
  /// If an error occurs, `*pGainDB` will be set to 0.
  ///
  ///
  /// See Also
  /// --------
  /// ma_device_set_master_volume_db()
  /// ma_device_set_master_volume()
  /// ma_device_get_master_volume()
  int ma_device_get_master_volume_db(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Float> pGainDB,
  ) {
    return _ma_device_get_master_volume_db(
      pDevice,
      pGainDB,
    );
  }

  late final _ma_device_get_master_volume_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device>,
              ffi.Pointer<ffi.Float>)>>('ma_device_get_master_volume_db');
  late final _ma_device_get_master_volume_db =
      _ma_device_get_master_volume_dbPtr.asFunction<
          int Function(ffi.Pointer<ma_device>, ffi.Pointer<ffi.Float>)>();

  /// Called from the data callback of asynchronous backends to allow miniaudio to process the data and fire the miniaudio data callback.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDevice (in)
  /// A pointer to device whose processing the data callback.
  ///
  /// pOutput (out)
  /// A pointer to the buffer that will receive the output PCM frame data. On a playback device this must not be NULL. On a duplex device
  /// this can be NULL, in which case pInput must not be NULL.
  ///
  /// pInput (in)
  /// A pointer to the buffer containing input PCM frame data. On a capture device this must not be NULL. On a duplex device this can be
  /// NULL, in which case `pOutput` must not be NULL.
  ///
  /// frameCount (in)
  /// The number of frames being processed.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful; any other result code otherwise.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// This function should only ever be called from the internal data callback of the backend. It is safe to call this simultaneously between a
  /// playback and capture device in duplex setups.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Do not call this from the miniaudio data callback. It should only ever be called from the internal data callback of the backend.
  ///
  ///
  /// Remarks
  /// -------
  /// If both `pOutput` and `pInput` are NULL, and error will be returned. In duplex scenarios, both `pOutput` and `pInput` can be non-NULL, in
  /// which case `pInput` will be processed first, followed by `pOutput`.
  ///
  /// If you are implementing a custom backend, and that backend uses a callback for data delivery, you'll need to call this from inside that
  /// callback.
  int ma_device_handle_backend_data_callback(
    ffi.Pointer<ma_device> pDevice,
    ffi.Pointer<ffi.Void> pOutput,
    ffi.Pointer<ffi.Void> pInput,
    int frameCount,
  ) {
    return _ma_device_handle_backend_data_callback(
      pDevice,
      pOutput,
      pInput,
      frameCount,
    );
  }

  late final _ma_device_handle_backend_data_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint32)>>('ma_device_handle_backend_data_callback');
  late final _ma_device_handle_backend_data_callback =
      _ma_device_handle_backend_data_callbackPtr.asFunction<
          int Function(ffi.Pointer<ma_device>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// Calculates an appropriate buffer size from a descriptor, native sample rate and performance profile.
  ///
  /// This function is used by backends for helping determine an appropriately sized buffer to use with
  /// the device depending on the values of `periodSizeInFrames` and `periodSizeInMilliseconds` in the
  /// `pDescriptor` object. Since buffer size calculations based on time depends on the sample rate, a
  /// best guess at the device's native sample rate is also required which is where `nativeSampleRate`
  /// comes in. In addition, the performance profile is also needed for cases where both the period size
  /// in frames and milliseconds are both zero.
  ///
  ///
  /// Parameters
  /// ----------
  /// pDescriptor (in)
  /// A pointer to device descriptor whose `periodSizeInFrames` and `periodSizeInMilliseconds` members
  /// will be used for the calculation of the buffer size.
  ///
  /// nativeSampleRate (in)
  /// The device's native sample rate. This is only ever used when the `periodSizeInFrames` member of
  /// `pDescriptor` is zero. In this case, `periodSizeInMilliseconds` will be used instead, in which
  /// case a sample rate is required to convert to a size in frames.
  ///
  /// performanceProfile (in)
  /// When both the `periodSizeInFrames` and `periodSizeInMilliseconds` members of `pDescriptor` are
  /// zero, miniaudio will fall back to a buffer size based on the performance profile. The profile
  /// to use for this calculation is determine by this parameter.
  ///
  ///
  /// Return Value
  /// ------------
  /// The calculated buffer size in frames.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// This is safe so long as nothing modifies `pDescriptor` at the same time. However, this function
  /// should only ever be called from within the backend's device initialization routine and therefore
  /// shouldn't have any multithreading concerns.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// This is safe to call within the data callback, but there is no reason to ever do this.
  ///
  ///
  /// Remarks
  /// -------
  /// If `nativeSampleRate` is zero, this function will fall back to `pDescriptor->sampleRate`. If that
  /// is also zero, `MA_DEFAULT_SAMPLE_RATE` will be used instead.
  int ma_calculate_buffer_size_in_frames_from_descriptor(
    ffi.Pointer<ma_device_descriptor> pDescriptor,
    int nativeSampleRate,
    int performanceProfile,
  ) {
    return _ma_calculate_buffer_size_in_frames_from_descriptor(
      pDescriptor,
      nativeSampleRate,
      performanceProfile,
    );
  }

  late final _ma_calculate_buffer_size_in_frames_from_descriptorPtr = _lookup<
          ffi.NativeFunction<
              ma_uint32 Function(
                  ffi.Pointer<ma_device_descriptor>, ma_uint32, ffi.Int32)>>(
      'ma_calculate_buffer_size_in_frames_from_descriptor');
  late final _ma_calculate_buffer_size_in_frames_from_descriptor =
      _ma_calculate_buffer_size_in_frames_from_descriptorPtr.asFunction<
          int Function(ffi.Pointer<ma_device_descriptor>, int, int)>();

  /// Retrieves a friendly name for a backend.
  ffi.Pointer<ffi.Char> ma_get_backend_name(
    int backend,
  ) {
    return _ma_get_backend_name(
      backend,
    );
  }

  late final _ma_get_backend_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'ma_get_backend_name');
  late final _ma_get_backend_name =
      _ma_get_backend_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Retrieves the backend enum from the given name.
  int ma_get_backend_from_name(
    ffi.Pointer<ffi.Char> pBackendName,
    ffi.Pointer<ffi.Int32> pBackend,
  ) {
    return _ma_get_backend_from_name(
      pBackendName,
      pBackend,
    );
  }

  late final _ma_get_backend_from_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int32>)>>('ma_get_backend_from_name');
  late final _ma_get_backend_from_name =
      _ma_get_backend_from_namePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int32>)>();

  /// Determines whether or not the given backend is available by the compilation environment.
  int ma_is_backend_enabled(
    int backend,
  ) {
    return _ma_is_backend_enabled(
      backend,
    );
  }

  late final _ma_is_backend_enabledPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Int32)>>(
          'ma_is_backend_enabled');
  late final _ma_is_backend_enabled =
      _ma_is_backend_enabledPtr.asFunction<int Function(int)>();

  /// Retrieves compile-time enabled backends.
  ///
  ///
  /// Parameters
  /// ----------
  /// pBackends (out, optional)
  /// A pointer to the buffer that will receive the enabled backends. Set to NULL to retrieve the backend count. Setting
  /// the capacity of the buffer to `MA_BUFFER_COUNT` will guarantee it's large enough for all backends.
  ///
  /// backendCap (in)
  /// The capacity of the `pBackends` buffer.
  ///
  /// pBackendCount (out)
  /// A pointer to the variable that will receive the enabled backend count.
  ///
  ///
  /// Return Value
  /// ------------
  /// MA_SUCCESS if successful.
  /// MA_INVALID_ARGS if `pBackendCount` is NULL.
  /// MA_NO_SPACE if the capacity of `pBackends` is not large enough.
  ///
  /// If `MA_NO_SPACE` is returned, the `pBackends` buffer will be filled with `*pBackendCount` values.
  ///
  ///
  /// Thread Safety
  /// -------------
  /// Safe.
  ///
  ///
  /// Callback Safety
  /// ---------------
  /// Safe.
  ///
  ///
  /// Remarks
  /// -------
  /// If you want to retrieve the number of backends so you can determine the capacity of `pBackends` buffer, you can call
  /// this function with `pBackends` set to NULL.
  ///
  /// This will also enumerate the null backend. If you don't want to include this you need to check for `ma_backend_null`
  /// when you enumerate over the returned backends and handle it appropriately. Alternatively, you can disable it at
  /// compile time with `MA_NO_NULL`.
  ///
  /// The returned backends are determined based on compile time settings, not the platform it's currently running on. For
  /// example, PulseAudio will be returned if it was enabled at compile time, even when the user doesn't actually have
  /// PulseAudio installed.
  ///
  ///
  /// Example 1
  /// ---------
  /// The example below retrieves the enabled backend count using a fixed sized buffer allocated on the stack. The buffer is
  /// given a capacity of `MA_BACKEND_COUNT` which will guarantee it'll be large enough to store all available backends.
  /// Since `MA_BACKEND_COUNT` is always a relatively small value, this should be suitable for most scenarios.
  ///
  /// ```
  /// ma_backend enabledBackends[MA_BACKEND_COUNT];
  /// size_t enabledBackendCount;
  ///
  /// result = ma_get_enabled_backends(enabledBackends, MA_BACKEND_COUNT, &enabledBackendCount);
  /// if (result != MA_SUCCESS) {
  /// // Failed to retrieve enabled backends. Should never happen in this example since all inputs are valid.
  /// }
  /// ```
  ///
  ///
  /// See Also
  /// --------
  /// ma_is_backend_enabled()
  int ma_get_enabled_backends(
    ffi.Pointer<ffi.Int32> pBackends,
    int backendCap,
    ffi.Pointer<ffi.Size> pBackendCount,
  ) {
    return _ma_get_enabled_backends(
      pBackends,
      backendCap,
      pBackendCount,
    );
  }

  late final _ma_get_enabled_backendsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int32>, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('ma_get_enabled_backends');
  late final _ma_get_enabled_backends = _ma_get_enabled_backendsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ffi.Size>)>();

  /// Determines whether or not loopback mode is support by a backend.
  int ma_is_loopback_supported(
    int backend,
  ) {
    return _ma_is_loopback_supported(
      backend,
    );
  }

  late final _ma_is_loopback_supportedPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Int32)>>(
          'ma_is_loopback_supported');
  late final _ma_is_loopback_supported =
      _ma_is_loopback_supportedPtr.asFunction<int Function(int)>();

  /// Calculates a buffer size in milliseconds from the specified number of frames and sample rate.
  int ma_calculate_buffer_size_in_milliseconds_from_frames(
    int bufferSizeInFrames,
    int sampleRate,
  ) {
    return _ma_calculate_buffer_size_in_milliseconds_from_frames(
      bufferSizeInFrames,
      sampleRate,
    );
  }

  late final _ma_calculate_buffer_size_in_milliseconds_from_framesPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ma_uint32, ma_uint32)>>(
          'ma_calculate_buffer_size_in_milliseconds_from_frames');
  late final _ma_calculate_buffer_size_in_milliseconds_from_frames =
      _ma_calculate_buffer_size_in_milliseconds_from_framesPtr
          .asFunction<int Function(int, int)>();

  /// Calculates a buffer size in frames from the specified number of milliseconds and sample rate.
  int ma_calculate_buffer_size_in_frames_from_milliseconds(
    int bufferSizeInMilliseconds,
    int sampleRate,
  ) {
    return _ma_calculate_buffer_size_in_frames_from_milliseconds(
      bufferSizeInMilliseconds,
      sampleRate,
    );
  }

  late final _ma_calculate_buffer_size_in_frames_from_millisecondsPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ma_uint32, ma_uint32)>>(
          'ma_calculate_buffer_size_in_frames_from_milliseconds');
  late final _ma_calculate_buffer_size_in_frames_from_milliseconds =
      _ma_calculate_buffer_size_in_frames_from_millisecondsPtr
          .asFunction<int Function(int, int)>();

  /// Copies PCM frames from one buffer to another.
  void ma_copy_pcm_frames(
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<ffi.Void> src,
    int frameCount,
    int format,
    int channels,
  ) {
    return _ma_copy_pcm_frames(
      dst,
      src,
      frameCount,
      format,
      channels,
    );
  }

  late final _ma_copy_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32, ma_uint32)>>('ma_copy_pcm_frames');
  late final _ma_copy_pcm_frames = _ma_copy_pcm_framesPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// Copies silent frames into the given buffer.
  ///
  /// Remarks
  /// -------
  /// For all formats except `ma_format_u8`, the output buffer will be filled with 0. For `ma_format_u8` it will be filled with 128. The reason for this is that it
  /// makes more sense for the purpose of mixing to initialize it to the center point.
  void ma_silence_pcm_frames(
    ffi.Pointer<ffi.Void> p,
    int frameCount,
    int format,
    int channels,
  ) {
    return _ma_silence_pcm_frames(
      p,
      frameCount,
      format,
      channels,
    );
  }

  late final _ma_silence_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64, ffi.Int32,
              ma_uint32)>>('ma_silence_pcm_frames');
  late final _ma_silence_pcm_frames = _ma_silence_pcm_framesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  /// Offsets a pointer by the specified number of PCM frames.
  ffi.Pointer<ffi.Void> ma_offset_pcm_frames_ptr(
    ffi.Pointer<ffi.Void> p,
    int offsetInFrames,
    int format,
    int channels,
  ) {
    return _ma_offset_pcm_frames_ptr(
      p,
      offsetInFrames,
      format,
      channels,
    );
  }

  late final _ma_offset_pcm_frames_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ma_uint64,
              ffi.Int32, ma_uint32)>>('ma_offset_pcm_frames_ptr');
  late final _ma_offset_pcm_frames_ptr =
      _ma_offset_pcm_frames_ptrPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> ma_offset_pcm_frames_const_ptr(
    ffi.Pointer<ffi.Void> p,
    int offsetInFrames,
    int format,
    int channels,
  ) {
    return _ma_offset_pcm_frames_const_ptr(
      p,
      offsetInFrames,
      format,
      channels,
    );
  }

  late final _ma_offset_pcm_frames_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ma_uint64,
              ffi.Int32, ma_uint32)>>('ma_offset_pcm_frames_const_ptr');
  late final _ma_offset_pcm_frames_const_ptr =
      _ma_offset_pcm_frames_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// Clips samples.
  void ma_clip_samples_u8(
    ffi.Pointer<ma_uint8> pDst,
    ffi.Pointer<ma_int16> pSrc,
    int count,
  ) {
    return _ma_clip_samples_u8(
      pDst,
      pSrc,
      count,
    );
  }

  late final _ma_clip_samples_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int16>,
              ma_uint64)>>('ma_clip_samples_u8');
  late final _ma_clip_samples_u8 = _ma_clip_samples_u8Ptr.asFunction<
      void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int16>, int)>();

  void ma_clip_samples_s16(
    ffi.Pointer<ma_int16> pDst,
    ffi.Pointer<ma_int32> pSrc,
    int count,
  ) {
    return _ma_clip_samples_s16(
      pDst,
      pSrc,
      count,
    );
  }

  late final _ma_clip_samples_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int16>, ffi.Pointer<ma_int32>,
              ma_uint64)>>('ma_clip_samples_s16');
  late final _ma_clip_samples_s16 = _ma_clip_samples_s16Ptr.asFunction<
      void Function(ffi.Pointer<ma_int16>, ffi.Pointer<ma_int32>, int)>();

  void ma_clip_samples_s24(
    ffi.Pointer<ma_uint8> pDst,
    ffi.Pointer<ma_int64> pSrc,
    int count,
  ) {
    return _ma_clip_samples_s24(
      pDst,
      pSrc,
      count,
    );
  }

  late final _ma_clip_samples_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int64>,
              ma_uint64)>>('ma_clip_samples_s24');
  late final _ma_clip_samples_s24 = _ma_clip_samples_s24Ptr.asFunction<
      void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int64>, int)>();

  void ma_clip_samples_s32(
    ffi.Pointer<ma_int32> pDst,
    ffi.Pointer<ma_int64> pSrc,
    int count,
  ) {
    return _ma_clip_samples_s32(
      pDst,
      pSrc,
      count,
    );
  }

  late final _ma_clip_samples_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int32>, ffi.Pointer<ma_int64>,
              ma_uint64)>>('ma_clip_samples_s32');
  late final _ma_clip_samples_s32 = _ma_clip_samples_s32Ptr.asFunction<
      void Function(ffi.Pointer<ma_int32>, ffi.Pointer<ma_int64>, int)>();

  void ma_clip_samples_f32(
    ffi.Pointer<ffi.Float> pDst,
    ffi.Pointer<ffi.Float> pSrc,
    int count,
  ) {
    return _ma_clip_samples_f32(
      pDst,
      pSrc,
      count,
    );
  }

  late final _ma_clip_samples_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ma_uint64)>>('ma_clip_samples_f32');
  late final _ma_clip_samples_f32 = _ma_clip_samples_f32Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int)>();

  void ma_clip_pcm_frames(
    ffi.Pointer<ffi.Void> pDst,
    ffi.Pointer<ffi.Void> pSrc,
    int frameCount,
    int format,
    int channels,
  ) {
    return _ma_clip_pcm_frames(
      pDst,
      pSrc,
      frameCount,
      format,
      channels,
    );
  }

  late final _ma_clip_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Int32, ma_uint32)>>('ma_clip_pcm_frames');
  late final _ma_clip_pcm_frames = _ma_clip_pcm_framesPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// Helper for applying a volume factor to samples.
  ///
  /// Note that the source and destination buffers can be the same, in which case it'll perform the operation in-place.
  void ma_copy_and_apply_volume_factor_u8(
    ffi.Pointer<ma_uint8> pSamplesOut,
    ffi.Pointer<ma_uint8> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_u8(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_uint8>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_u8');
  late final _ma_copy_and_apply_volume_factor_u8 =
      _ma_copy_and_apply_volume_factor_u8Ptr.asFunction<
          void Function(
              ffi.Pointer<ma_uint8>, ffi.Pointer<ma_uint8>, int, double)>();

  void ma_copy_and_apply_volume_factor_s16(
    ffi.Pointer<ma_int16> pSamplesOut,
    ffi.Pointer<ma_int16> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_s16(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int16>, ffi.Pointer<ma_int16>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_s16');
  late final _ma_copy_and_apply_volume_factor_s16 =
      _ma_copy_and_apply_volume_factor_s16Ptr.asFunction<
          void Function(
              ffi.Pointer<ma_int16>, ffi.Pointer<ma_int16>, int, double)>();

  void ma_copy_and_apply_volume_factor_s24(
    ffi.Pointer<ffi.Void> pSamplesOut,
    ffi.Pointer<ffi.Void> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_s24(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_s24');
  late final _ma_copy_and_apply_volume_factor_s24 =
      _ma_copy_and_apply_volume_factor_s24Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, double)>();

  void ma_copy_and_apply_volume_factor_s32(
    ffi.Pointer<ma_int32> pSamplesOut,
    ffi.Pointer<ma_int32> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_s32(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int32>, ffi.Pointer<ma_int32>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_s32');
  late final _ma_copy_and_apply_volume_factor_s32 =
      _ma_copy_and_apply_volume_factor_s32Ptr.asFunction<
          void Function(
              ffi.Pointer<ma_int32>, ffi.Pointer<ma_int32>, int, double)>();

  void ma_copy_and_apply_volume_factor_f32(
    ffi.Pointer<ffi.Float> pSamplesOut,
    ffi.Pointer<ffi.Float> pSamplesIn,
    int sampleCount,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_f32(
      pSamplesOut,
      pSamplesIn,
      sampleCount,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ma_uint64, ffi.Float)>>('ma_copy_and_apply_volume_factor_f32');
  late final _ma_copy_and_apply_volume_factor_f32 =
      _ma_copy_and_apply_volume_factor_f32Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int, double)>();

  void ma_apply_volume_factor_u8(
    ffi.Pointer<ma_uint8> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_u8(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_u8');
  late final _ma_apply_volume_factor_u8 = _ma_apply_volume_factor_u8Ptr
      .asFunction<void Function(ffi.Pointer<ma_uint8>, int, double)>();

  void ma_apply_volume_factor_s16(
    ffi.Pointer<ma_int16> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_s16(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int16>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_s16');
  late final _ma_apply_volume_factor_s16 = _ma_apply_volume_factor_s16Ptr
      .asFunction<void Function(ffi.Pointer<ma_int16>, int, double)>();

  void ma_apply_volume_factor_s24(
    ffi.Pointer<ffi.Void> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_s24(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_s24');
  late final _ma_apply_volume_factor_s24 = _ma_apply_volume_factor_s24Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int, double)>();

  void ma_apply_volume_factor_s32(
    ffi.Pointer<ma_int32> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_s32(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int32>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_s32');
  late final _ma_apply_volume_factor_s32 = _ma_apply_volume_factor_s32Ptr
      .asFunction<void Function(ffi.Pointer<ma_int32>, int, double)>();

  void ma_apply_volume_factor_f32(
    ffi.Pointer<ffi.Float> pSamples,
    int sampleCount,
    double factor,
  ) {
    return _ma_apply_volume_factor_f32(
      pSamples,
      sampleCount,
      factor,
    );
  }

  late final _ma_apply_volume_factor_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ma_uint64,
              ffi.Float)>>('ma_apply_volume_factor_f32');
  late final _ma_apply_volume_factor_f32 = _ma_apply_volume_factor_f32Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Float>, int, double)>();

  void ma_copy_and_apply_volume_factor_pcm_frames_u8(
    ffi.Pointer<ma_uint8> pFramesOut,
    ffi.Pointer<ma_uint8> pFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_u8(
      pFramesOut,
      pFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_uint8>,
              ffi.Pointer<ma_uint8>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_u8');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_u8 =
      _ma_copy_and_apply_volume_factor_pcm_frames_u8Ptr.asFunction<
          void Function(ffi.Pointer<ma_uint8>, ffi.Pointer<ma_uint8>, int, int,
              double)>();

  void ma_copy_and_apply_volume_factor_pcm_frames_s16(
    ffi.Pointer<ma_int16> pFramesOut,
    ffi.Pointer<ma_int16> pFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_s16(
      pFramesOut,
      pFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int16>,
              ffi.Pointer<ma_int16>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_s16');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_s16 =
      _ma_copy_and_apply_volume_factor_pcm_frames_s16Ptr.asFunction<
          void Function(ffi.Pointer<ma_int16>, ffi.Pointer<ma_int16>, int, int,
              double)>();

  void ma_copy_and_apply_volume_factor_pcm_frames_s24(
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_s24(
      pFramesOut,
      pFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_s24');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_s24 =
      _ma_copy_and_apply_volume_factor_pcm_frames_s24Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int,
              double)>();

  void ma_copy_and_apply_volume_factor_pcm_frames_s32(
    ffi.Pointer<ma_int32> pFramesOut,
    ffi.Pointer<ma_int32> pFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_s32(
      pFramesOut,
      pFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int32>,
              ffi.Pointer<ma_int32>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_s32');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_s32 =
      _ma_copy_and_apply_volume_factor_pcm_frames_s32Ptr.asFunction<
          void Function(ffi.Pointer<ma_int32>, ffi.Pointer<ma_int32>, int, int,
              double)>();

  void ma_copy_and_apply_volume_factor_pcm_frames_f32(
    ffi.Pointer<ffi.Float> pFramesOut,
    ffi.Pointer<ffi.Float> pFramesIn,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames_f32(
      pFramesOut,
      pFramesIn,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_frames_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames_f32');
  late final _ma_copy_and_apply_volume_factor_pcm_frames_f32 =
      _ma_copy_and_apply_volume_factor_pcm_frames_f32Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int,
              int, double)>();

  void ma_copy_and_apply_volume_factor_pcm_frames(
    ffi.Pointer<ffi.Void> pFramesOut,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
    int format,
    int channels,
    double factor,
  ) {
    return _ma_copy_and_apply_volume_factor_pcm_frames(
      pFramesOut,
      pFramesIn,
      frameCount,
      format,
      channels,
      factor,
    );
  }

  late final _ma_copy_and_apply_volume_factor_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_factor_pcm_frames');
  late final _ma_copy_and_apply_volume_factor_pcm_frames =
      _ma_copy_and_apply_volume_factor_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int,
              int, double)>();

  void ma_apply_volume_factor_pcm_frames_u8(
    ffi.Pointer<ma_uint8> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_u8(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint8>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_u8');
  late final _ma_apply_volume_factor_pcm_frames_u8 =
      _ma_apply_volume_factor_pcm_frames_u8Ptr
          .asFunction<void Function(ffi.Pointer<ma_uint8>, int, int, double)>();

  void ma_apply_volume_factor_pcm_frames_s16(
    ffi.Pointer<ma_int16> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_s16(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int16>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_s16');
  late final _ma_apply_volume_factor_pcm_frames_s16 =
      _ma_apply_volume_factor_pcm_frames_s16Ptr
          .asFunction<void Function(ffi.Pointer<ma_int16>, int, int, double)>();

  void ma_apply_volume_factor_pcm_frames_s24(
    ffi.Pointer<ffi.Void> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_s24(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_s24');
  late final _ma_apply_volume_factor_pcm_frames_s24 =
      _ma_apply_volume_factor_pcm_frames_s24Ptr
          .asFunction<void Function(ffi.Pointer<ffi.Void>, int, int, double)>();

  void ma_apply_volume_factor_pcm_frames_s32(
    ffi.Pointer<ma_int32> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_s32(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_int32>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_s32');
  late final _ma_apply_volume_factor_pcm_frames_s32 =
      _ma_apply_volume_factor_pcm_frames_s32Ptr
          .asFunction<void Function(ffi.Pointer<ma_int32>, int, int, double)>();

  void ma_apply_volume_factor_pcm_frames_f32(
    ffi.Pointer<ffi.Float> pFrames,
    int frameCount,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames_f32(
      pFrames,
      frameCount,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_frames_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ma_uint64, ma_uint32,
              ffi.Float)>>('ma_apply_volume_factor_pcm_frames_f32');
  late final _ma_apply_volume_factor_pcm_frames_f32 =
      _ma_apply_volume_factor_pcm_frames_f32Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Float>, int, int, double)>();

  void ma_apply_volume_factor_pcm_frames(
    ffi.Pointer<ffi.Void> pFrames,
    int frameCount,
    int format,
    int channels,
    double factor,
  ) {
    return _ma_apply_volume_factor_pcm_frames(
      pFrames,
      frameCount,
      format,
      channels,
      factor,
    );
  }

  late final _ma_apply_volume_factor_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64, ffi.Int32,
              ma_uint32, ffi.Float)>>('ma_apply_volume_factor_pcm_frames');
  late final _ma_apply_volume_factor_pcm_frames =
      _ma_apply_volume_factor_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, int, int, int, double)>();

  void ma_copy_and_apply_volume_factor_per_channel_f32(
    ffi.Pointer<ffi.Float> pFramesOut,
    ffi.Pointer<ffi.Float> pFramesIn,
    int frameCount,
    int channels,
    ffi.Pointer<ffi.Float> pChannelGains,
  ) {
    return _ma_copy_and_apply_volume_factor_per_channel_f32(
      pFramesOut,
      pFramesIn,
      frameCount,
      channels,
      pChannelGains,
    );
  }

  late final _ma_copy_and_apply_volume_factor_per_channel_f32Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
                  ma_uint64, ma_uint32, ffi.Pointer<ffi.Float>)>>(
      'ma_copy_and_apply_volume_factor_per_channel_f32');
  late final _ma_copy_and_apply_volume_factor_per_channel_f32 =
      _ma_copy_and_apply_volume_factor_per_channel_f32Ptr.asFunction<
          void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int,
              int, ffi.Pointer<ffi.Float>)>();

  void ma_copy_and_apply_volume_and_clip_samples_u8(
    ffi.Pointer<ma_uint8> pDst,
    ffi.Pointer<ma_int16> pSrc,
    int count,
    double volume,
  ) {
    return _ma_copy_and_apply_volume_and_clip_samples_u8(
      pDst,
      pSrc,
      count,
      volume,
    );
  }

  late final _ma_copy_and_apply_volume_and_clip_samples_u8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_uint8>,
              ffi.Pointer<ma_int16>,
              ma_uint64,
              ffi.Float)>>('ma_copy_and_apply_volume_and_clip_samples_u8');
  late final _ma_copy_and_apply_volume_and_clip_samples_u8 =
      _ma_copy_and_apply_volume_and_clip_samples_u8Ptr.asFunction<
          void Function(
              ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int16>, int, double)>();

  void ma_copy_and_apply_volume_and_clip_samples_s16(
    ffi.Pointer<ma_int16> pDst,
    ffi.Pointer<ma_int32> pSrc,
    int count,
    double volume,
  ) {
    return _ma_copy_and_apply_volume_and_clip_samples_s16(
      pDst,
      pSrc,
      count,
      volume,
    );
  }

  late final _ma_copy_and_apply_volume_and_clip_samples_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int16>,
              ffi.Pointer<ma_int32>,
              ma_uint64,
              ffi.Float)>>('ma_copy_and_apply_volume_and_clip_samples_s16');
  late final _ma_copy_and_apply_volume_and_clip_samples_s16 =
      _ma_copy_and_apply_volume_and_clip_samples_s16Ptr.asFunction<
          void Function(
              ffi.Pointer<ma_int16>, ffi.Pointer<ma_int32>, int, double)>();

  void ma_copy_and_apply_volume_and_clip_samples_s24(
    ffi.Pointer<ma_uint8> pDst,
    ffi.Pointer<ma_int64> pSrc,
    int count,
    double volume,
  ) {
    return _ma_copy_and_apply_volume_and_clip_samples_s24(
      pDst,
      pSrc,
      count,
      volume,
    );
  }

  late final _ma_copy_and_apply_volume_and_clip_samples_s24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_uint8>,
              ffi.Pointer<ma_int64>,
              ma_uint64,
              ffi.Float)>>('ma_copy_and_apply_volume_and_clip_samples_s24');
  late final _ma_copy_and_apply_volume_and_clip_samples_s24 =
      _ma_copy_and_apply_volume_and_clip_samples_s24Ptr.asFunction<
          void Function(
              ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int64>, int, double)>();

  void ma_copy_and_apply_volume_and_clip_samples_s32(
    ffi.Pointer<ma_int32> pDst,
    ffi.Pointer<ma_int64> pSrc,
    int count,
    double volume,
  ) {
    return _ma_copy_and_apply_volume_and_clip_samples_s32(
      pDst,
      pSrc,
      count,
      volume,
    );
  }

  late final _ma_copy_and_apply_volume_and_clip_samples_s32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int32>,
              ffi.Pointer<ma_int64>,
              ma_uint64,
              ffi.Float)>>('ma_copy_and_apply_volume_and_clip_samples_s32');
  late final _ma_copy_and_apply_volume_and_clip_samples_s32 =
      _ma_copy_and_apply_volume_and_clip_samples_s32Ptr.asFunction<
          void Function(
              ffi.Pointer<ma_int32>, ffi.Pointer<ma_int64>, int, double)>();

  void ma_copy_and_apply_volume_and_clip_samples_f32(
    ffi.Pointer<ffi.Float> pDst,
    ffi.Pointer<ffi.Float> pSrc,
    int count,
    double volume,
  ) {
    return _ma_copy_and_apply_volume_and_clip_samples_f32(
      pDst,
      pSrc,
      count,
      volume,
    );
  }

  late final _ma_copy_and_apply_volume_and_clip_samples_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ma_uint64,
              ffi.Float)>>('ma_copy_and_apply_volume_and_clip_samples_f32');
  late final _ma_copy_and_apply_volume_and_clip_samples_f32 =
      _ma_copy_and_apply_volume_and_clip_samples_f32Ptr.asFunction<
          void Function(
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int, double)>();

  void ma_copy_and_apply_volume_and_clip_pcm_frames(
    ffi.Pointer<ffi.Void> pDst,
    ffi.Pointer<ffi.Void> pSrc,
    int frameCount,
    int format,
    int channels,
    double volume,
  ) {
    return _ma_copy_and_apply_volume_and_clip_pcm_frames(
      pDst,
      pSrc,
      frameCount,
      format,
      channels,
      volume,
    );
  }

  late final _ma_copy_and_apply_volume_and_clip_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ffi.Float)>>('ma_copy_and_apply_volume_and_clip_pcm_frames');
  late final _ma_copy_and_apply_volume_and_clip_pcm_frames =
      _ma_copy_and_apply_volume_and_clip_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int,
              int, double)>();

  /// Helper for converting a linear factor to gain in decibels.
  double ma_volume_linear_to_db(
    double factor,
  ) {
    return _ma_volume_linear_to_db(
      factor,
    );
  }

  late final _ma_volume_linear_to_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'ma_volume_linear_to_db');
  late final _ma_volume_linear_to_db =
      _ma_volume_linear_to_dbPtr.asFunction<double Function(double)>();

  /// Helper for converting gain in decibels to a linear factor.
  double ma_volume_db_to_linear(
    double gain,
  ) {
    return _ma_volume_db_to_linear(
      gain,
    );
  }

  late final _ma_volume_db_to_linearPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'ma_volume_db_to_linear');
  late final _ma_volume_db_to_linear =
      _ma_volume_db_to_linearPtr.asFunction<double Function(double)>();

  /// Mixes the specified number of frames in floating point format with a volume factor.
  ///
  /// This will run on an optimized path when the volume is equal to 1.
  int ma_mix_pcm_frames_f32(
    ffi.Pointer<ffi.Float> pDst,
    ffi.Pointer<ffi.Float> pSrc,
    int frameCount,
    int channels,
    double volume,
  ) {
    return _ma_mix_pcm_frames_f32(
      pDst,
      pSrc,
      frameCount,
      channels,
      volume,
    );
  }

  late final _ma_mix_pcm_frames_f32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ma_uint64, ma_uint32, ffi.Float)>>('ma_mix_pcm_frames_f32');
  late final _ma_mix_pcm_frames_f32 = _ma_mix_pcm_frames_f32Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int, int, double)>();

  int ma_vfs_open(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Char> pFilePath,
    int openMode,
    ffi.Pointer<ma_vfs_file> pFile,
  ) {
    return _ma_vfs_open(
      pVFS,
      pFilePath,
      openMode,
      pFile,
    );
  }

  late final _ma_vfs_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Char>,
              ma_uint32, ffi.Pointer<ma_vfs_file>)>>('ma_vfs_open');
  late final _ma_vfs_open = _ma_vfs_openPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ma_vfs_file>)>();

  int ma_vfs_open_w(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.WChar> pFilePath,
    int openMode,
    ffi.Pointer<ma_vfs_file> pFile,
  ) {
    return _ma_vfs_open_w(
      pVFS,
      pFilePath,
      openMode,
      pFile,
    );
  }

  late final _ma_vfs_open_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.WChar>,
              ma_uint32, ffi.Pointer<ma_vfs_file>)>>('ma_vfs_open_w');
  late final _ma_vfs_open_w = _ma_vfs_open_wPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ma_vfs_file>)>();

  int ma_vfs_close(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
  ) {
    return _ma_vfs_close(
      pVFS,
      file,
    );
  }

  late final _ma_vfs_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>, ma_vfs_file)>>('ma_vfs_close');
  late final _ma_vfs_close = _ma_vfs_closePtr
      .asFunction<int Function(ffi.Pointer<ma_vfs>, ma_vfs_file)>();

  int ma_vfs_read(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    ffi.Pointer<ffi.Void> pDst,
    int sizeInBytes,
    ffi.Pointer<ffi.Size> pBytesRead,
  ) {
    return _ma_vfs_read(
      pVFS,
      file,
      pDst,
      sizeInBytes,
      pBytesRead,
    );
  }

  late final _ma_vfs_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ma_vfs_file,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('ma_vfs_read');
  late final _ma_vfs_read = _ma_vfs_readPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Size>)>();

  int ma_vfs_write(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    ffi.Pointer<ffi.Void> pSrc,
    int sizeInBytes,
    ffi.Pointer<ffi.Size> pBytesWritten,
  ) {
    return _ma_vfs_write(
      pVFS,
      file,
      pSrc,
      sizeInBytes,
      pBytesWritten,
    );
  }

  late final _ma_vfs_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ma_vfs_file,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>>('ma_vfs_write');
  late final _ma_vfs_write = _ma_vfs_writePtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Size>)>();

  int ma_vfs_seek(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    int offset,
    int origin,
  ) {
    return _ma_vfs_seek(
      pVFS,
      file,
      offset,
      origin,
    );
  }

  late final _ma_vfs_seekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs>, ma_vfs_file, ma_int64,
              ffi.Int32)>>('ma_vfs_seek');
  late final _ma_vfs_seek = _ma_vfs_seekPtr
      .asFunction<int Function(ffi.Pointer<ma_vfs>, ma_vfs_file, int, int)>();

  int ma_vfs_tell(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    ffi.Pointer<ma_int64> pCursor,
  ) {
    return _ma_vfs_tell(
      pVFS,
      file,
      pCursor,
    );
  }

  late final _ma_vfs_tellPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs>, ma_vfs_file,
              ffi.Pointer<ma_int64>)>>('ma_vfs_tell');
  late final _ma_vfs_tell = _ma_vfs_tellPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ma_int64>)>();

  int ma_vfs_info(
    ffi.Pointer<ma_vfs> pVFS,
    ma_vfs_file file,
    ffi.Pointer<ma_file_info> pInfo,
  ) {
    return _ma_vfs_info(
      pVFS,
      file,
      pInfo,
    );
  }

  late final _ma_vfs_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs>, ma_vfs_file,
              ffi.Pointer<ma_file_info>)>>('ma_vfs_info');
  late final _ma_vfs_info = _ma_vfs_infoPtr.asFunction<
      int Function(
          ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ma_file_info>)>();

  int ma_vfs_open_and_read_file(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppData,
    ffi.Pointer<ffi.Size> pSize,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_vfs_open_and_read_file(
      pVFS,
      pFilePath,
      ppData,
      pSize,
      pAllocationCallbacks,
    );
  }

  late final _ma_vfs_open_and_read_filePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_vfs>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_vfs_open_and_read_file');
  late final _ma_vfs_open_and_read_file =
      _ma_vfs_open_and_read_filePtr.asFunction<
          int Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_default_vfs_init(
    ffi.Pointer<ma_default_vfs> pVFS,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_default_vfs_init(
      pVFS,
      pAllocationCallbacks,
    );
  }

  late final _ma_default_vfs_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_default_vfs>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_default_vfs_init');
  late final _ma_default_vfs_init = _ma_default_vfs_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_default_vfs>, ffi.Pointer<ma_allocation_callbacks>)>();

  ma_decoding_backend_config ma_decoding_backend_config_init(
    int preferredFormat,
    int seekPointCount,
  ) {
    return _ma_decoding_backend_config_init(
      preferredFormat,
      seekPointCount,
    );
  }

  late final _ma_decoding_backend_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_decoding_backend_config Function(
              ffi.Int32, ma_uint32)>>('ma_decoding_backend_config_init');
  late final _ma_decoding_backend_config_init =
      _ma_decoding_backend_config_initPtr
          .asFunction<ma_decoding_backend_config Function(int, int)>();

  ma_decoder_config ma_decoder_config_init(
    int outputFormat,
    int outputChannels,
    int outputSampleRate,
  ) {
    return _ma_decoder_config_init(
      outputFormat,
      outputChannels,
      outputSampleRate,
    );
  }

  late final _ma_decoder_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_decoder_config Function(
              ffi.Int32, ma_uint32, ma_uint32)>>('ma_decoder_config_init');
  late final _ma_decoder_config_init = _ma_decoder_config_initPtr
      .asFunction<ma_decoder_config Function(int, int, int)>();

  ma_decoder_config ma_decoder_config_init_default() {
    return _ma_decoder_config_init_default();
  }

  late final _ma_decoder_config_init_defaultPtr =
      _lookup<ffi.NativeFunction<ma_decoder_config Function()>>(
          'ma_decoder_config_init_default');
  late final _ma_decoder_config_init_default =
      _ma_decoder_config_init_defaultPtr
          .asFunction<ma_decoder_config Function()>();

  int ma_decoder_init(
    ma_decoder_read_proc onRead,
    ma_decoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init(
      onRead,
      onSeek,
      pUserData,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ma_decoder_read_proc,
              ma_decoder_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init');
  late final _ma_decoder_init = _ma_decoder_initPtr.asFunction<
      int Function(
          ma_decoder_read_proc,
          ma_decoder_seek_proc,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_memory(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_memory(
      pData,
      dataSize,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_memory');
  late final _ma_decoder_init_memory = _ma_decoder_init_memoryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vfs(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs');
  late final _ma_decoder_init_vfs = _ma_decoder_init_vfsPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_vfs_w(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.WChar> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_vfs_w(
      pVFS,
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_vfs_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_vfs_w');
  late final _ma_decoder_init_vfs_w = _ma_decoder_init_vfs_wPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ma_decoder_config>, ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_file(
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file');
  late final _ma_decoder_init_file = _ma_decoder_init_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  int ma_decoder_init_file_w(
    ffi.Pointer<ffi.WChar> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_init_file_w(
      pFilePath,
      pConfig,
      pDecoder,
    );
  }

  late final _ma_decoder_init_file_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>>('ma_decoder_init_file_w');
  late final _ma_decoder_init_file_w = _ma_decoder_init_file_wPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_decoder>)>();

  /// Uninitializes a decoder.
  int ma_decoder_uninit(
    ffi.Pointer<ma_decoder> pDecoder,
  ) {
    return _ma_decoder_uninit(
      pDecoder,
    );
  }

  late final _ma_decoder_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_decoder>)>>(
          'ma_decoder_uninit');
  late final _ma_decoder_uninit =
      _ma_decoder_uninitPtr.asFunction<int Function(ffi.Pointer<ma_decoder>)>();

  /// Reads PCM frames from the given decoder.
  ///
  /// This is not thread safe without your own synchronization.
  int ma_decoder_read_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_decoder_read_pcm_frames(
      pDecoder,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_decoder_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_decoder>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_decoder_read_pcm_frames');
  late final _ma_decoder_read_pcm_frames =
      _ma_decoder_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>();

  /// Seeks to a PCM frame based on it's absolute index.
  ///
  /// This is not thread safe without your own synchronization.
  int ma_decoder_seek_to_pcm_frame(
    ffi.Pointer<ma_decoder> pDecoder,
    int frameIndex,
  ) {
    return _ma_decoder_seek_to_pcm_frame(
      pDecoder,
      frameIndex,
    );
  }

  late final _ma_decoder_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_decoder>,
              ma_uint64)>>('ma_decoder_seek_to_pcm_frame');
  late final _ma_decoder_seek_to_pcm_frame = _ma_decoder_seek_to_pcm_framePtr
      .asFunction<int Function(ffi.Pointer<ma_decoder>, int)>();

  /// Retrieves the decoder's output data format.
  int ma_decoder_get_data_format(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_decoder_get_data_format(
      pDecoder,
      pFormat,
      pChannels,
      pSampleRate,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_decoder_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_decoder>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_decoder_get_data_format');
  late final _ma_decoder_get_data_format =
      _ma_decoder_get_data_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ma_decoder>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              int)>();

  /// Retrieves the current position of the read cursor in PCM frames.
  int ma_decoder_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_decoder_get_cursor_in_pcm_frames(
      pDecoder,
      pCursor,
    );
  }

  late final _ma_decoder_get_cursor_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_decoder>,
              ffi.Pointer<ma_uint64>)>>('ma_decoder_get_cursor_in_pcm_frames');
  late final _ma_decoder_get_cursor_in_pcm_frames =
      _ma_decoder_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ma_uint64>)>();

  /// Retrieves the length of the decoder in PCM frames.
  ///
  /// Do not call this on streams of an undefined length, such as internet radio.
  ///
  /// If the length is unknown or an error occurs, 0 will be returned.
  ///
  /// This will always return 0 for Vorbis decoders. This is due to a limitation with stb_vorbis in push mode which is what miniaudio
  /// uses internally.
  ///
  /// For MP3's, this will decode the entire file. Do not call this in time critical scenarios.
  ///
  /// This function is not thread safe without your own synchronization.
  int ma_decoder_get_length_in_pcm_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_decoder_get_length_in_pcm_frames(
      pDecoder,
      pLength,
    );
  }

  late final _ma_decoder_get_length_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_decoder>,
              ffi.Pointer<ma_uint64>)>>('ma_decoder_get_length_in_pcm_frames');
  late final _ma_decoder_get_length_in_pcm_frames =
      _ma_decoder_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ma_uint64>)>();

  /// Retrieves the number of frames that can be read before reaching the end.
  ///
  /// This calls `ma_decoder_get_length_in_pcm_frames()` so you need to be aware of the rules for that function, in
  /// particular ensuring you do not call it on streams of an undefined length, such as internet radio.
  ///
  /// If the total length of the decoder cannot be retrieved, such as with Vorbis decoders, `MA_NOT_IMPLEMENTED` will be
  /// returned.
  int ma_decoder_get_available_frames(
    ffi.Pointer<ma_decoder> pDecoder,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_decoder_get_available_frames(
      pDecoder,
      pAvailableFrames,
    );
  }

  late final _ma_decoder_get_available_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_decoder>,
              ffi.Pointer<ma_uint64>)>>('ma_decoder_get_available_frames');
  late final _ma_decoder_get_available_frames =
      _ma_decoder_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_decoder>, ffi.Pointer<ma_uint64>)>();

  /// Helper for opening and decoding a file into a heap allocated block of memory. Free the returned pointer with ma_free(). On input,
  /// pConfig should be set to what you want. On output it will be set to what you got.
  int ma_decode_from_vfs(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    return _ma_decode_from_vfs(
      pVFS,
      pFilePath,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  late final _ma_decode_from_vfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_decode_from_vfs');
  late final _ma_decode_from_vfs = _ma_decode_from_vfsPtr.asFunction<
      int Function(
          ffi.Pointer<ma_vfs>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_uint64>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_decode_file(
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    return _ma_decode_file(
      pFilePath,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  late final _ma_decode_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_decode_file');
  late final _ma_decode_file = _ma_decode_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_uint64>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int ma_decode_memory(
    ffi.Pointer<ffi.Void> pData,
    int dataSize,
    ffi.Pointer<ma_decoder_config> pConfig,
    ffi.Pointer<ma_uint64> pFrameCountOut,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ppPCMFramesOut,
  ) {
    return _ma_decode_memory(
      pData,
      dataSize,
      pConfig,
      pFrameCountOut,
      ppPCMFramesOut,
    );
  }

  late final _ma_decode_memoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('ma_decode_memory');
  late final _ma_decode_memory = _ma_decode_memoryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ma_decoder_config>,
          ffi.Pointer<ma_uint64>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ma_encoder_config ma_encoder_config_init(
    int encodingFormat,
    int format,
    int channels,
    int sampleRate,
  ) {
    return _ma_encoder_config_init(
      encodingFormat,
      format,
      channels,
      sampleRate,
    );
  }

  late final _ma_encoder_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_encoder_config Function(ffi.Int32, ffi.Int32, ma_uint32,
              ma_uint32)>>('ma_encoder_config_init');
  late final _ma_encoder_config_init = _ma_encoder_config_initPtr
      .asFunction<ma_encoder_config Function(int, int, int, int)>();

  int ma_encoder_init(
    ma_encoder_write_proc onWrite,
    ma_encoder_seek_proc onSeek,
    ffi.Pointer<ffi.Void> pUserData,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init(
      onWrite,
      onSeek,
      pUserData,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ma_encoder_write_proc,
              ma_encoder_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init');
  late final _ma_encoder_init = _ma_encoder_initPtr.asFunction<
      int Function(
          ma_encoder_write_proc,
          ma_encoder_seek_proc,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ma_encoder_config>,
          ffi.Pointer<ma_encoder>)>();

  int ma_encoder_init_vfs(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init_vfs(
      pVFS,
      pFilePath,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_init_vfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init_vfs');
  late final _ma_encoder_init_vfs = _ma_encoder_init_vfsPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ma_encoder_config>, ffi.Pointer<ma_encoder>)>();

  int ma_encoder_init_vfs_w(
    ffi.Pointer<ma_vfs> pVFS,
    ffi.Pointer<ffi.WChar> pFilePath,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init_vfs_w(
      pVFS,
      pFilePath,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_init_vfs_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init_vfs_w');
  late final _ma_encoder_init_vfs_w = _ma_encoder_init_vfs_wPtr.asFunction<
      int Function(ffi.Pointer<ma_vfs>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ma_encoder_config>, ffi.Pointer<ma_encoder>)>();

  int ma_encoder_init_file(
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init_file(
      pFilePath,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_init_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init_file');
  late final _ma_encoder_init_file = _ma_encoder_init_filePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ma_encoder_config>,
          ffi.Pointer<ma_encoder>)>();

  int ma_encoder_init_file_w(
    ffi.Pointer<ffi.WChar> pFilePath,
    ffi.Pointer<ma_encoder_config> pConfig,
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_init_file_w(
      pFilePath,
      pConfig,
      pEncoder,
    );
  }

  late final _ma_encoder_init_file_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>>('ma_encoder_init_file_w');
  late final _ma_encoder_init_file_w = _ma_encoder_init_file_wPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ma_encoder_config>,
          ffi.Pointer<ma_encoder>)>();

  void ma_encoder_uninit(
    ffi.Pointer<ma_encoder> pEncoder,
  ) {
    return _ma_encoder_uninit(
      pEncoder,
    );
  }

  late final _ma_encoder_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_encoder>)>>(
          'ma_encoder_uninit');
  late final _ma_encoder_uninit = _ma_encoder_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_encoder>)>();

  int ma_encoder_write_pcm_frames(
    ffi.Pointer<ma_encoder> pEncoder,
    ffi.Pointer<ffi.Void> pFramesIn,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesWritten,
  ) {
    return _ma_encoder_write_pcm_frames(
      pEncoder,
      pFramesIn,
      frameCount,
      pFramesWritten,
    );
  }

  late final _ma_encoder_write_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_encoder>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_encoder_write_pcm_frames');
  late final _ma_encoder_write_pcm_frames =
      _ma_encoder_write_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_encoder>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>();

  ma_waveform_config ma_waveform_config_init(
    int format,
    int channels,
    int sampleRate,
    int type,
    double amplitude,
    double frequency,
  ) {
    return _ma_waveform_config_init(
      format,
      channels,
      sampleRate,
      type,
      amplitude,
      frequency,
    );
  }

  late final _ma_waveform_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_waveform_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Int32, ffi.Double, ffi.Double)>>('ma_waveform_config_init');
  late final _ma_waveform_config_init = _ma_waveform_config_initPtr.asFunction<
      ma_waveform_config Function(int, int, int, int, double, double)>();

  int ma_waveform_init(
    ffi.Pointer<ma_waveform_config> pConfig,
    ffi.Pointer<ma_waveform> pWaveform,
  ) {
    return _ma_waveform_init(
      pConfig,
      pWaveform,
    );
  }

  late final _ma_waveform_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_waveform_config>,
              ffi.Pointer<ma_waveform>)>>('ma_waveform_init');
  late final _ma_waveform_init = _ma_waveform_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_waveform_config>, ffi.Pointer<ma_waveform>)>();

  void ma_waveform_uninit(
    ffi.Pointer<ma_waveform> pWaveform,
  ) {
    return _ma_waveform_uninit(
      pWaveform,
    );
  }

  late final _ma_waveform_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_waveform>)>>(
          'ma_waveform_uninit');
  late final _ma_waveform_uninit = _ma_waveform_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_waveform>)>();

  int ma_waveform_read_pcm_frames(
    ffi.Pointer<ma_waveform> pWaveform,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_waveform_read_pcm_frames(
      pWaveform,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_waveform_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_waveform>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_waveform_read_pcm_frames');
  late final _ma_waveform_read_pcm_frames =
      _ma_waveform_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_waveform>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>();

  int ma_waveform_seek_to_pcm_frame(
    ffi.Pointer<ma_waveform> pWaveform,
    int frameIndex,
  ) {
    return _ma_waveform_seek_to_pcm_frame(
      pWaveform,
      frameIndex,
    );
  }

  late final _ma_waveform_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_waveform>,
              ma_uint64)>>('ma_waveform_seek_to_pcm_frame');
  late final _ma_waveform_seek_to_pcm_frame = _ma_waveform_seek_to_pcm_framePtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, int)>();

  int ma_waveform_set_amplitude(
    ffi.Pointer<ma_waveform> pWaveform,
    double amplitude,
  ) {
    return _ma_waveform_set_amplitude(
      pWaveform,
      amplitude,
    );
  }

  late final _ma_waveform_set_amplitudePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_waveform>,
              ffi.Double)>>('ma_waveform_set_amplitude');
  late final _ma_waveform_set_amplitude = _ma_waveform_set_amplitudePtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, double)>();

  int ma_waveform_set_frequency(
    ffi.Pointer<ma_waveform> pWaveform,
    double frequency,
  ) {
    return _ma_waveform_set_frequency(
      pWaveform,
      frequency,
    );
  }

  late final _ma_waveform_set_frequencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_waveform>,
              ffi.Double)>>('ma_waveform_set_frequency');
  late final _ma_waveform_set_frequency = _ma_waveform_set_frequencyPtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, double)>();

  int ma_waveform_set_type(
    ffi.Pointer<ma_waveform> pWaveform,
    int type,
  ) {
    return _ma_waveform_set_type(
      pWaveform,
      type,
    );
  }

  late final _ma_waveform_set_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_waveform>, ffi.Int32)>>('ma_waveform_set_type');
  late final _ma_waveform_set_type = _ma_waveform_set_typePtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, int)>();

  int ma_waveform_set_sample_rate(
    ffi.Pointer<ma_waveform> pWaveform,
    int sampleRate,
  ) {
    return _ma_waveform_set_sample_rate(
      pWaveform,
      sampleRate,
    );
  }

  late final _ma_waveform_set_sample_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_waveform>,
              ma_uint32)>>('ma_waveform_set_sample_rate');
  late final _ma_waveform_set_sample_rate = _ma_waveform_set_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_waveform>, int)>();

  ma_pulsewave_config ma_pulsewave_config_init(
    int format,
    int channels,
    int sampleRate,
    double dutyCycle,
    double amplitude,
    double frequency,
  ) {
    return _ma_pulsewave_config_init(
      format,
      channels,
      sampleRate,
      dutyCycle,
      amplitude,
      frequency,
    );
  }

  late final _ma_pulsewave_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_pulsewave_config Function(ffi.Int32, ma_uint32, ma_uint32,
              ffi.Double, ffi.Double, ffi.Double)>>('ma_pulsewave_config_init');
  late final _ma_pulsewave_config_init =
      _ma_pulsewave_config_initPtr.asFunction<
          ma_pulsewave_config Function(
              int, int, int, double, double, double)>();

  int ma_pulsewave_init(
    ffi.Pointer<ma_pulsewave_config> pConfig,
    ffi.Pointer<ma_pulsewave> pWaveform,
  ) {
    return _ma_pulsewave_init(
      pConfig,
      pWaveform,
    );
  }

  late final _ma_pulsewave_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pulsewave_config>,
              ffi.Pointer<ma_pulsewave>)>>('ma_pulsewave_init');
  late final _ma_pulsewave_init = _ma_pulsewave_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_pulsewave_config>, ffi.Pointer<ma_pulsewave>)>();

  void ma_pulsewave_uninit(
    ffi.Pointer<ma_pulsewave> pWaveform,
  ) {
    return _ma_pulsewave_uninit(
      pWaveform,
    );
  }

  late final _ma_pulsewave_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_pulsewave>)>>(
          'ma_pulsewave_uninit');
  late final _ma_pulsewave_uninit = _ma_pulsewave_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_pulsewave>)>();

  int ma_pulsewave_read_pcm_frames(
    ffi.Pointer<ma_pulsewave> pWaveform,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_pulsewave_read_pcm_frames(
      pWaveform,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_pulsewave_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_pulsewave>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_pulsewave_read_pcm_frames');
  late final _ma_pulsewave_read_pcm_frames =
      _ma_pulsewave_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_pulsewave>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>();

  int ma_pulsewave_seek_to_pcm_frame(
    ffi.Pointer<ma_pulsewave> pWaveform,
    int frameIndex,
  ) {
    return _ma_pulsewave_seek_to_pcm_frame(
      pWaveform,
      frameIndex,
    );
  }

  late final _ma_pulsewave_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pulsewave>,
              ma_uint64)>>('ma_pulsewave_seek_to_pcm_frame');
  late final _ma_pulsewave_seek_to_pcm_frame =
      _ma_pulsewave_seek_to_pcm_framePtr
          .asFunction<int Function(ffi.Pointer<ma_pulsewave>, int)>();

  int ma_pulsewave_set_amplitude(
    ffi.Pointer<ma_pulsewave> pWaveform,
    double amplitude,
  ) {
    return _ma_pulsewave_set_amplitude(
      pWaveform,
      amplitude,
    );
  }

  late final _ma_pulsewave_set_amplitudePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pulsewave>,
              ffi.Double)>>('ma_pulsewave_set_amplitude');
  late final _ma_pulsewave_set_amplitude = _ma_pulsewave_set_amplitudePtr
      .asFunction<int Function(ffi.Pointer<ma_pulsewave>, double)>();

  int ma_pulsewave_set_frequency(
    ffi.Pointer<ma_pulsewave> pWaveform,
    double frequency,
  ) {
    return _ma_pulsewave_set_frequency(
      pWaveform,
      frequency,
    );
  }

  late final _ma_pulsewave_set_frequencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pulsewave>,
              ffi.Double)>>('ma_pulsewave_set_frequency');
  late final _ma_pulsewave_set_frequency = _ma_pulsewave_set_frequencyPtr
      .asFunction<int Function(ffi.Pointer<ma_pulsewave>, double)>();

  int ma_pulsewave_set_sample_rate(
    ffi.Pointer<ma_pulsewave> pWaveform,
    int sampleRate,
  ) {
    return _ma_pulsewave_set_sample_rate(
      pWaveform,
      sampleRate,
    );
  }

  late final _ma_pulsewave_set_sample_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pulsewave>,
              ma_uint32)>>('ma_pulsewave_set_sample_rate');
  late final _ma_pulsewave_set_sample_rate = _ma_pulsewave_set_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_pulsewave>, int)>();

  int ma_pulsewave_set_duty_cycle(
    ffi.Pointer<ma_pulsewave> pWaveform,
    double dutyCycle,
  ) {
    return _ma_pulsewave_set_duty_cycle(
      pWaveform,
      dutyCycle,
    );
  }

  late final _ma_pulsewave_set_duty_cyclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_pulsewave>,
              ffi.Double)>>('ma_pulsewave_set_duty_cycle');
  late final _ma_pulsewave_set_duty_cycle = _ma_pulsewave_set_duty_cyclePtr
      .asFunction<int Function(ffi.Pointer<ma_pulsewave>, double)>();

  ma_noise_config ma_noise_config_init(
    int format,
    int channels,
    int type,
    int seed,
    double amplitude,
  ) {
    return _ma_noise_config_init(
      format,
      channels,
      type,
      seed,
      amplitude,
    );
  }

  late final _ma_noise_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_noise_config Function(ffi.Int32, ma_uint32, ffi.Int32, ma_int32,
              ffi.Double)>>('ma_noise_config_init');
  late final _ma_noise_config_init = _ma_noise_config_initPtr
      .asFunction<ma_noise_config Function(int, int, int, int, double)>();

  int ma_noise_get_heap_size(
    ffi.Pointer<ma_noise_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_noise_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_noise_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_noise_config>,
              ffi.Pointer<ffi.Size>)>>('ma_noise_get_heap_size');
  late final _ma_noise_get_heap_size = _ma_noise_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_noise_config>, ffi.Pointer<ffi.Size>)>();

  int ma_noise_init_preallocated(
    ffi.Pointer<ma_noise_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_noise> pNoise,
  ) {
    return _ma_noise_init_preallocated(
      pConfig,
      pHeap,
      pNoise,
    );
  }

  late final _ma_noise_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_noise_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_noise>)>>('ma_noise_init_preallocated');
  late final _ma_noise_init_preallocated =
      _ma_noise_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_noise_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_noise>)>();

  int ma_noise_init(
    ffi.Pointer<ma_noise_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_noise> pNoise,
  ) {
    return _ma_noise_init(
      pConfig,
      pAllocationCallbacks,
      pNoise,
    );
  }

  late final _ma_noise_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_noise_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_noise>)>>('ma_noise_init');
  late final _ma_noise_init = _ma_noise_initPtr.asFunction<
      int Function(ffi.Pointer<ma_noise_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_noise>)>();

  void ma_noise_uninit(
    ffi.Pointer<ma_noise> pNoise,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_noise_uninit(
      pNoise,
      pAllocationCallbacks,
    );
  }

  late final _ma_noise_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_noise>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_noise_uninit');
  late final _ma_noise_uninit = _ma_noise_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_noise>, ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_noise_read_pcm_frames(
    ffi.Pointer<ma_noise> pNoise,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_noise_read_pcm_frames(
      pNoise,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_noise_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_noise>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Pointer<ma_uint64>)>>('ma_noise_read_pcm_frames');
  late final _ma_noise_read_pcm_frames =
      _ma_noise_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_noise>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>();

  int ma_noise_set_amplitude(
    ffi.Pointer<ma_noise> pNoise,
    double amplitude,
  ) {
    return _ma_noise_set_amplitude(
      pNoise,
      amplitude,
    );
  }

  late final _ma_noise_set_amplitudePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_noise>, ffi.Double)>>('ma_noise_set_amplitude');
  late final _ma_noise_set_amplitude = _ma_noise_set_amplitudePtr
      .asFunction<int Function(ffi.Pointer<ma_noise>, double)>();

  int ma_noise_set_seed(
    ffi.Pointer<ma_noise> pNoise,
    int seed,
  ) {
    return _ma_noise_set_seed(
      pNoise,
      seed,
    );
  }

  late final _ma_noise_set_seedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_noise>, ma_int32)>>('ma_noise_set_seed');
  late final _ma_noise_set_seed = _ma_noise_set_seedPtr
      .asFunction<int Function(ffi.Pointer<ma_noise>, int)>();

  int ma_noise_set_type(
    ffi.Pointer<ma_noise> pNoise,
    int type,
  ) {
    return _ma_noise_set_type(
      pNoise,
      type,
    );
  }

  late final _ma_noise_set_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_noise>, ffi.Int32)>>('ma_noise_set_type');
  late final _ma_noise_set_type = _ma_noise_set_typePtr
      .asFunction<int Function(ffi.Pointer<ma_noise>, int)>();

  ma_resource_manager_pipeline_notifications
      ma_resource_manager_pipeline_notifications_init() {
    return _ma_resource_manager_pipeline_notifications_init();
  }

  late final _ma_resource_manager_pipeline_notifications_initPtr = _lookup<
      ffi.NativeFunction<
          ma_resource_manager_pipeline_notifications
              Function()>>('ma_resource_manager_pipeline_notifications_init');
  late final _ma_resource_manager_pipeline_notifications_init =
      _ma_resource_manager_pipeline_notifications_initPtr
          .asFunction<ma_resource_manager_pipeline_notifications Function()>();

  ma_resource_manager_data_source_config
      ma_resource_manager_data_source_config_init() {
    return _ma_resource_manager_data_source_config_init();
  }

  late final _ma_resource_manager_data_source_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_resource_manager_data_source_config
              Function()>>('ma_resource_manager_data_source_config_init');
  late final _ma_resource_manager_data_source_config_init =
      _ma_resource_manager_data_source_config_initPtr
          .asFunction<ma_resource_manager_data_source_config Function()>();

  ma_resource_manager_config ma_resource_manager_config_init() {
    return _ma_resource_manager_config_init();
  }

  late final _ma_resource_manager_config_initPtr =
      _lookup<ffi.NativeFunction<ma_resource_manager_config Function()>>(
          'ma_resource_manager_config_init');
  late final _ma_resource_manager_config_init =
      _ma_resource_manager_config_initPtr
          .asFunction<ma_resource_manager_config Function()>();

  /// Init.
  int ma_resource_manager_init(
    ffi.Pointer<ma_resource_manager_config> pConfig,
    ffi.Pointer<ma_resource_manager> pResourceManager,
  ) {
    return _ma_resource_manager_init(
      pConfig,
      pResourceManager,
    );
  }

  late final _ma_resource_manager_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_config>,
              ffi.Pointer<ma_resource_manager>)>>('ma_resource_manager_init');
  late final _ma_resource_manager_init =
      _ma_resource_manager_initPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_config>,
              ffi.Pointer<ma_resource_manager>)>();

  void ma_resource_manager_uninit(
    ffi.Pointer<ma_resource_manager> pResourceManager,
  ) {
    return _ma_resource_manager_uninit(
      pResourceManager,
    );
  }

  late final _ma_resource_manager_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_resource_manager>)>>('ma_resource_manager_uninit');
  late final _ma_resource_manager_uninit = _ma_resource_manager_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_resource_manager>)>();

  ffi.Pointer<ma_log> ma_resource_manager_get_log(
    ffi.Pointer<ma_resource_manager> pResourceManager,
  ) {
    return _ma_resource_manager_get_log(
      pResourceManager,
    );
  }

  late final _ma_resource_manager_get_logPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ma_log> Function(ffi.Pointer<ma_resource_manager>)>>(
      'ma_resource_manager_get_log');
  late final _ma_resource_manager_get_log =
      _ma_resource_manager_get_logPtr.asFunction<
          ffi.Pointer<ma_log> Function(ffi.Pointer<ma_resource_manager>)>();

  /// Registration.
  int ma_resource_manager_register_file(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pFilePath,
    int flags,
  ) {
    return _ma_resource_manager_register_file(
      pResourceManager,
      pFilePath,
      flags,
    );
  }

  late final _ma_resource_manager_register_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              ma_uint32)>>('ma_resource_manager_register_file');
  late final _ma_resource_manager_register_file =
      _ma_resource_manager_register_filePtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.Char>, int)>();

  int ma_resource_manager_register_file_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pFilePath,
    int flags,
  ) {
    return _ma_resource_manager_register_file_w(
      pResourceManager,
      pFilePath,
      flags,
    );
  }

  late final _ma_resource_manager_register_file_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              ma_uint32)>>('ma_resource_manager_register_file_w');
  late final _ma_resource_manager_register_file_w =
      _ma_resource_manager_register_file_wPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>, int)>();

  int ma_resource_manager_register_decoded_data(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pName,
    ffi.Pointer<ffi.Void> pData,
    int frameCount,
    int format,
    int channels,
    int sampleRate,
  ) {
    return _ma_resource_manager_register_decoded_data(
      pResourceManager,
      pName,
      pData,
      frameCount,
      format,
      channels,
      sampleRate,
    );
  }

  late final _ma_resource_manager_register_decoded_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32)>>('ma_resource_manager_register_decoded_data');
  late final _ma_resource_manager_register_decoded_data =
      _ma_resource_manager_register_decoded_dataPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, int, int, int, int)>();

  int ma_resource_manager_register_decoded_data_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pName,
    ffi.Pointer<ffi.Void> pData,
    int frameCount,
    int format,
    int channels,
    int sampleRate,
  ) {
    return _ma_resource_manager_register_decoded_data_w(
      pResourceManager,
      pName,
      pData,
      frameCount,
      format,
      channels,
      sampleRate,
    );
  }

  late final _ma_resource_manager_register_decoded_data_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32)>>('ma_resource_manager_register_decoded_data_w');
  late final _ma_resource_manager_register_decoded_data_w =
      _ma_resource_manager_register_decoded_data_wPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Void>, int, int, int, int)>();

  int ma_resource_manager_register_encoded_data(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pName,
    ffi.Pointer<ffi.Void> pData,
    int sizeInBytes,
  ) {
    return _ma_resource_manager_register_encoded_data(
      pResourceManager,
      pName,
      pData,
      sizeInBytes,
    );
  }

  late final _ma_resource_manager_register_encoded_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ma_resource_manager_register_encoded_data');
  late final _ma_resource_manager_register_encoded_data =
      _ma_resource_manager_register_encoded_dataPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_resource_manager_register_encoded_data_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pName,
    ffi.Pointer<ffi.Void> pData,
    int sizeInBytes,
  ) {
    return _ma_resource_manager_register_encoded_data_w(
      pResourceManager,
      pName,
      pData,
      sizeInBytes,
    );
  }

  late final _ma_resource_manager_register_encoded_data_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>>('ma_resource_manager_register_encoded_data_w');
  late final _ma_resource_manager_register_encoded_data_w =
      _ma_resource_manager_register_encoded_data_wPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Void>, int)>();

  int ma_resource_manager_unregister_file(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pFilePath,
  ) {
    return _ma_resource_manager_unregister_file(
      pResourceManager,
      pFilePath,
    );
  }

  late final _ma_resource_manager_unregister_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>)>>('ma_resource_manager_unregister_file');
  late final _ma_resource_manager_unregister_file =
      _ma_resource_manager_unregister_filePtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.Char>)>();

  int ma_resource_manager_unregister_file_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pFilePath,
  ) {
    return _ma_resource_manager_unregister_file_w(
      pResourceManager,
      pFilePath,
    );
  }

  late final _ma_resource_manager_unregister_file_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>)>>(
      'ma_resource_manager_unregister_file_w');
  late final _ma_resource_manager_unregister_file_w =
      _ma_resource_manager_unregister_file_wPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>)>();

  int ma_resource_manager_unregister_data(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pName,
  ) {
    return _ma_resource_manager_unregister_data(
      pResourceManager,
      pName,
    );
  }

  late final _ma_resource_manager_unregister_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>)>>('ma_resource_manager_unregister_data');
  late final _ma_resource_manager_unregister_data =
      _ma_resource_manager_unregister_dataPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.Char>)>();

  int ma_resource_manager_unregister_data_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pName,
  ) {
    return _ma_resource_manager_unregister_data_w(
      pResourceManager,
      pName,
    );
  }

  late final _ma_resource_manager_unregister_data_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>)>>(
      'ma_resource_manager_unregister_data_w');
  late final _ma_resource_manager_unregister_data_w =
      _ma_resource_manager_unregister_data_wPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>)>();

  /// Data Buffers.
  int ma_resource_manager_data_buffer_init_ex(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_resource_manager_data_source_config> pConfig,
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_init_ex(
      pResourceManager,
      pConfig,
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_init_exPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_source_config>,
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_init_ex');
  late final _ma_resource_manager_data_buffer_init_ex =
      _ma_resource_manager_data_buffer_init_exPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_resource_manager_data_source_config>,
              ffi.Pointer<ma_resource_manager_data_buffer>)>();

  int ma_resource_manager_data_buffer_init(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pFilePath,
    int flags,
    ffi.Pointer<ma_resource_manager_pipeline_notifications> pNotifications,
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_init(
      pResourceManager,
      pFilePath,
      flags,
      pNotifications,
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.Char>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_init');
  late final _ma_resource_manager_data_buffer_init =
      _ma_resource_manager_data_buffer_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ma_resource_manager_pipeline_notifications>,
              ffi.Pointer<ma_resource_manager_data_buffer>)>();

  int ma_resource_manager_data_buffer_init_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pFilePath,
    int flags,
    ffi.Pointer<ma_resource_manager_pipeline_notifications> pNotifications,
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_init_w(
      pResourceManager,
      pFilePath,
      flags,
      pNotifications,
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_init_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.WChar>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_init_w');
  late final _ma_resource_manager_data_buffer_init_w =
      _ma_resource_manager_data_buffer_init_wPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              int,
              ffi.Pointer<ma_resource_manager_pipeline_notifications>,
              ffi.Pointer<ma_resource_manager_data_buffer>)>();

  int ma_resource_manager_data_buffer_init_copy(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_resource_manager_data_buffer> pExistingDataBuffer,
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_init_copy(
      pResourceManager,
      pExistingDataBuffer,
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_init_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_buffer>,
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_init_copy');
  late final _ma_resource_manager_data_buffer_init_copy =
      _ma_resource_manager_data_buffer_init_copyPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ma_resource_manager_data_buffer>)>();

  int ma_resource_manager_data_buffer_uninit(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_uninit(
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_uninit');
  late final _ma_resource_manager_data_buffer_uninit =
      _ma_resource_manager_data_buffer_uninitPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_buffer>)>();

  int ma_resource_manager_data_buffer_read_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_resource_manager_data_buffer_read_pcm_frames(
      pDataBuffer,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_resource_manager_data_buffer_read_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>,
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Pointer<ma_uint64>)>>(
      'ma_resource_manager_data_buffer_read_pcm_frames');
  late final _ma_resource_manager_data_buffer_read_pcm_frames =
      _ma_resource_manager_data_buffer_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ma_uint64>)>();

  int ma_resource_manager_data_buffer_seek_to_pcm_frame(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    int frameIndex,
  ) {
    return _ma_resource_manager_data_buffer_seek_to_pcm_frame(
      pDataBuffer,
      frameIndex,
    );
  }

  late final _ma_resource_manager_data_buffer_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>,
              ma_uint64)>>('ma_resource_manager_data_buffer_seek_to_pcm_frame');
  late final _ma_resource_manager_data_buffer_seek_to_pcm_frame =
      _ma_resource_manager_data_buffer_seek_to_pcm_framePtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_buffer>, int)>();

  int ma_resource_manager_data_buffer_get_data_format(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_resource_manager_data_buffer_get_data_format(
      pDataBuffer,
      pFormat,
      pChannels,
      pSampleRate,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_resource_manager_data_buffer_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_resource_manager_data_buffer_get_data_format');
  late final _ma_resource_manager_data_buffer_get_data_format =
      _ma_resource_manager_data_buffer_get_data_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              int)>();

  int ma_resource_manager_data_buffer_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_resource_manager_data_buffer_get_cursor_in_pcm_frames(
      pDataBuffer,
      pCursor,
    );
  }

  late final _ma_resource_manager_data_buffer_get_cursor_in_pcm_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ma_resource_manager_data_buffer>,
                      ffi.Pointer<ma_uint64>)>>(
          'ma_resource_manager_data_buffer_get_cursor_in_pcm_frames');
  late final _ma_resource_manager_data_buffer_get_cursor_in_pcm_frames =
      _ma_resource_manager_data_buffer_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ma_uint64>)>();

  int ma_resource_manager_data_buffer_get_length_in_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_resource_manager_data_buffer_get_length_in_pcm_frames(
      pDataBuffer,
      pLength,
    );
  }

  late final _ma_resource_manager_data_buffer_get_length_in_pcm_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ma_resource_manager_data_buffer>,
                      ffi.Pointer<ma_uint64>)>>(
          'ma_resource_manager_data_buffer_get_length_in_pcm_frames');
  late final _ma_resource_manager_data_buffer_get_length_in_pcm_frames =
      _ma_resource_manager_data_buffer_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ma_uint64>)>();

  int ma_resource_manager_data_buffer_result(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_result(
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_resultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_result');
  late final _ma_resource_manager_data_buffer_result =
      _ma_resource_manager_data_buffer_resultPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_buffer>)>();

  int ma_resource_manager_data_buffer_set_looping(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    int isLooping,
  ) {
    return _ma_resource_manager_data_buffer_set_looping(
      pDataBuffer,
      isLooping,
    );
  }

  late final _ma_resource_manager_data_buffer_set_loopingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>,
              ma_bool32)>>('ma_resource_manager_data_buffer_set_looping');
  late final _ma_resource_manager_data_buffer_set_looping =
      _ma_resource_manager_data_buffer_set_loopingPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_buffer>, int)>();

  int ma_resource_manager_data_buffer_is_looping(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
  ) {
    return _ma_resource_manager_data_buffer_is_looping(
      pDataBuffer,
    );
  }

  late final _ma_resource_manager_data_buffer_is_loopingPtr = _lookup<
          ffi.NativeFunction<
              ma_bool32 Function(
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>(
      'ma_resource_manager_data_buffer_is_looping');
  late final _ma_resource_manager_data_buffer_is_looping =
      _ma_resource_manager_data_buffer_is_loopingPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_buffer>)>();

  int ma_resource_manager_data_buffer_get_available_frames(
    ffi.Pointer<ma_resource_manager_data_buffer> pDataBuffer,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_resource_manager_data_buffer_get_available_frames(
      pDataBuffer,
      pAvailableFrames,
    );
  }

  late final _ma_resource_manager_data_buffer_get_available_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_resource_manager_data_buffer_get_available_frames');
  late final _ma_resource_manager_data_buffer_get_available_frames =
      _ma_resource_manager_data_buffer_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ma_uint64>)>();

  /// Data Streams.
  int ma_resource_manager_data_stream_init_ex(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_resource_manager_data_source_config> pConfig,
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
  ) {
    return _ma_resource_manager_data_stream_init_ex(
      pResourceManager,
      pConfig,
      pDataStream,
    );
  }

  late final _ma_resource_manager_data_stream_init_exPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_source_config>,
                  ffi.Pointer<ma_resource_manager_data_stream>)>>(
      'ma_resource_manager_data_stream_init_ex');
  late final _ma_resource_manager_data_stream_init_ex =
      _ma_resource_manager_data_stream_init_exPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_resource_manager_data_source_config>,
              ffi.Pointer<ma_resource_manager_data_stream>)>();

  int ma_resource_manager_data_stream_init(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pFilePath,
    int flags,
    ffi.Pointer<ma_resource_manager_pipeline_notifications> pNotifications,
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
  ) {
    return _ma_resource_manager_data_stream_init(
      pResourceManager,
      pFilePath,
      flags,
      pNotifications,
      pDataStream,
    );
  }

  late final _ma_resource_manager_data_stream_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.Char>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_stream>)>>(
      'ma_resource_manager_data_stream_init');
  late final _ma_resource_manager_data_stream_init =
      _ma_resource_manager_data_stream_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ma_resource_manager_pipeline_notifications>,
              ffi.Pointer<ma_resource_manager_data_stream>)>();

  int ma_resource_manager_data_stream_init_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pFilePath,
    int flags,
    ffi.Pointer<ma_resource_manager_pipeline_notifications> pNotifications,
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
  ) {
    return _ma_resource_manager_data_stream_init_w(
      pResourceManager,
      pFilePath,
      flags,
      pNotifications,
      pDataStream,
    );
  }

  late final _ma_resource_manager_data_stream_init_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.WChar>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_stream>)>>(
      'ma_resource_manager_data_stream_init_w');
  late final _ma_resource_manager_data_stream_init_w =
      _ma_resource_manager_data_stream_init_wPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              int,
              ffi.Pointer<ma_resource_manager_pipeline_notifications>,
              ffi.Pointer<ma_resource_manager_data_stream>)>();

  int ma_resource_manager_data_stream_uninit(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
  ) {
    return _ma_resource_manager_data_stream_uninit(
      pDataStream,
    );
  }

  late final _ma_resource_manager_data_stream_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_stream>)>>(
      'ma_resource_manager_data_stream_uninit');
  late final _ma_resource_manager_data_stream_uninit =
      _ma_resource_manager_data_stream_uninitPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_stream>)>();

  int ma_resource_manager_data_stream_read_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_resource_manager_data_stream_read_pcm_frames(
      pDataStream,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_resource_manager_data_stream_read_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>,
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Pointer<ma_uint64>)>>(
      'ma_resource_manager_data_stream_read_pcm_frames');
  late final _ma_resource_manager_data_stream_read_pcm_frames =
      _ma_resource_manager_data_stream_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ma_uint64>)>();

  int ma_resource_manager_data_stream_seek_to_pcm_frame(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    int frameIndex,
  ) {
    return _ma_resource_manager_data_stream_seek_to_pcm_frame(
      pDataStream,
      frameIndex,
    );
  }

  late final _ma_resource_manager_data_stream_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>,
              ma_uint64)>>('ma_resource_manager_data_stream_seek_to_pcm_frame');
  late final _ma_resource_manager_data_stream_seek_to_pcm_frame =
      _ma_resource_manager_data_stream_seek_to_pcm_framePtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_stream>, int)>();

  int ma_resource_manager_data_stream_get_data_format(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_resource_manager_data_stream_get_data_format(
      pDataStream,
      pFormat,
      pChannels,
      pSampleRate,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_resource_manager_data_stream_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_resource_manager_data_stream_get_data_format');
  late final _ma_resource_manager_data_stream_get_data_format =
      _ma_resource_manager_data_stream_get_data_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              int)>();

  int ma_resource_manager_data_stream_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_resource_manager_data_stream_get_cursor_in_pcm_frames(
      pDataStream,
      pCursor,
    );
  }

  late final _ma_resource_manager_data_stream_get_cursor_in_pcm_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ma_resource_manager_data_stream>,
                      ffi.Pointer<ma_uint64>)>>(
          'ma_resource_manager_data_stream_get_cursor_in_pcm_frames');
  late final _ma_resource_manager_data_stream_get_cursor_in_pcm_frames =
      _ma_resource_manager_data_stream_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ma_uint64>)>();

  int ma_resource_manager_data_stream_get_length_in_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_resource_manager_data_stream_get_length_in_pcm_frames(
      pDataStream,
      pLength,
    );
  }

  late final _ma_resource_manager_data_stream_get_length_in_pcm_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ma_resource_manager_data_stream>,
                      ffi.Pointer<ma_uint64>)>>(
          'ma_resource_manager_data_stream_get_length_in_pcm_frames');
  late final _ma_resource_manager_data_stream_get_length_in_pcm_frames =
      _ma_resource_manager_data_stream_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ma_uint64>)>();

  int ma_resource_manager_data_stream_result(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
  ) {
    return _ma_resource_manager_data_stream_result(
      pDataStream,
    );
  }

  late final _ma_resource_manager_data_stream_resultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_stream>)>>(
      'ma_resource_manager_data_stream_result');
  late final _ma_resource_manager_data_stream_result =
      _ma_resource_manager_data_stream_resultPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_stream>)>();

  int ma_resource_manager_data_stream_set_looping(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    int isLooping,
  ) {
    return _ma_resource_manager_data_stream_set_looping(
      pDataStream,
      isLooping,
    );
  }

  late final _ma_resource_manager_data_stream_set_loopingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>,
              ma_bool32)>>('ma_resource_manager_data_stream_set_looping');
  late final _ma_resource_manager_data_stream_set_looping =
      _ma_resource_manager_data_stream_set_loopingPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_stream>, int)>();

  int ma_resource_manager_data_stream_is_looping(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
  ) {
    return _ma_resource_manager_data_stream_is_looping(
      pDataStream,
    );
  }

  late final _ma_resource_manager_data_stream_is_loopingPtr = _lookup<
          ffi.NativeFunction<
              ma_bool32 Function(
                  ffi.Pointer<ma_resource_manager_data_stream>)>>(
      'ma_resource_manager_data_stream_is_looping');
  late final _ma_resource_manager_data_stream_is_looping =
      _ma_resource_manager_data_stream_is_loopingPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_stream>)>();

  int ma_resource_manager_data_stream_get_available_frames(
    ffi.Pointer<ma_resource_manager_data_stream> pDataStream,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_resource_manager_data_stream_get_available_frames(
      pDataStream,
      pAvailableFrames,
    );
  }

  late final _ma_resource_manager_data_stream_get_available_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_resource_manager_data_stream_get_available_frames');
  late final _ma_resource_manager_data_stream_get_available_frames =
      _ma_resource_manager_data_stream_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ma_uint64>)>();

  /// Data Sources.
  int ma_resource_manager_data_source_init_ex(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_resource_manager_data_source_config> pConfig,
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_init_ex(
      pResourceManager,
      pConfig,
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_init_exPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_source_config>,
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_init_ex');
  late final _ma_resource_manager_data_source_init_ex =
      _ma_resource_manager_data_source_init_exPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_resource_manager_data_source_config>,
              ffi.Pointer<ma_resource_manager_data_source>)>();

  int ma_resource_manager_data_source_init(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.Char> pName,
    int flags,
    ffi.Pointer<ma_resource_manager_pipeline_notifications> pNotifications,
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_init(
      pResourceManager,
      pName,
      flags,
      pNotifications,
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.Char>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_init');
  late final _ma_resource_manager_data_source_init =
      _ma_resource_manager_data_source_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ma_resource_manager_pipeline_notifications>,
              ffi.Pointer<ma_resource_manager_data_source>)>();

  int ma_resource_manager_data_source_init_w(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ffi.WChar> pName,
    int flags,
    ffi.Pointer<ma_resource_manager_pipeline_notifications> pNotifications,
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_init_w(
      pResourceManager,
      pName,
      flags,
      pNotifications,
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_init_wPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.WChar>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_init_w');
  late final _ma_resource_manager_data_source_init_w =
      _ma_resource_manager_data_source_init_wPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              int,
              ffi.Pointer<ma_resource_manager_pipeline_notifications>,
              ffi.Pointer<ma_resource_manager_data_source>)>();

  int ma_resource_manager_data_source_init_copy(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_resource_manager_data_source> pExistingDataSource,
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_init_copy(
      pResourceManager,
      pExistingDataSource,
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_init_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_source>,
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_init_copy');
  late final _ma_resource_manager_data_source_init_copy =
      _ma_resource_manager_data_source_init_copyPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ma_resource_manager_data_source>)>();

  int ma_resource_manager_data_source_uninit(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_uninit(
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_uninit');
  late final _ma_resource_manager_data_source_uninit =
      _ma_resource_manager_data_source_uninitPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_source>)>();

  int ma_resource_manager_data_source_read_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_resource_manager_data_source_read_pcm_frames(
      pDataSource,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_resource_manager_data_source_read_pcm_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>,
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Pointer<ma_uint64>)>>(
      'ma_resource_manager_data_source_read_pcm_frames');
  late final _ma_resource_manager_data_source_read_pcm_frames =
      _ma_resource_manager_data_source_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ma_uint64>)>();

  int ma_resource_manager_data_source_seek_to_pcm_frame(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    int frameIndex,
  ) {
    return _ma_resource_manager_data_source_seek_to_pcm_frame(
      pDataSource,
      frameIndex,
    );
  }

  late final _ma_resource_manager_data_source_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>,
              ma_uint64)>>('ma_resource_manager_data_source_seek_to_pcm_frame');
  late final _ma_resource_manager_data_source_seek_to_pcm_frame =
      _ma_resource_manager_data_source_seek_to_pcm_framePtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_source>, int)>();

  int ma_resource_manager_data_source_get_data_format(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_resource_manager_data_source_get_data_format(
      pDataSource,
      pFormat,
      pChannels,
      pSampleRate,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_resource_manager_data_source_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_resource_manager_data_source_get_data_format');
  late final _ma_resource_manager_data_source_get_data_format =
      _ma_resource_manager_data_source_get_data_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              int)>();

  int ma_resource_manager_data_source_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_resource_manager_data_source_get_cursor_in_pcm_frames(
      pDataSource,
      pCursor,
    );
  }

  late final _ma_resource_manager_data_source_get_cursor_in_pcm_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ma_resource_manager_data_source>,
                      ffi.Pointer<ma_uint64>)>>(
          'ma_resource_manager_data_source_get_cursor_in_pcm_frames');
  late final _ma_resource_manager_data_source_get_cursor_in_pcm_frames =
      _ma_resource_manager_data_source_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ma_uint64>)>();

  int ma_resource_manager_data_source_get_length_in_pcm_frames(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_resource_manager_data_source_get_length_in_pcm_frames(
      pDataSource,
      pLength,
    );
  }

  late final _ma_resource_manager_data_source_get_length_in_pcm_framesPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<ma_resource_manager_data_source>,
                      ffi.Pointer<ma_uint64>)>>(
          'ma_resource_manager_data_source_get_length_in_pcm_frames');
  late final _ma_resource_manager_data_source_get_length_in_pcm_frames =
      _ma_resource_manager_data_source_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ma_uint64>)>();

  int ma_resource_manager_data_source_result(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_result(
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_resultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_result');
  late final _ma_resource_manager_data_source_result =
      _ma_resource_manager_data_source_resultPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_source>)>();

  int ma_resource_manager_data_source_set_looping(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    int isLooping,
  ) {
    return _ma_resource_manager_data_source_set_looping(
      pDataSource,
      isLooping,
    );
  }

  late final _ma_resource_manager_data_source_set_loopingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>,
              ma_bool32)>>('ma_resource_manager_data_source_set_looping');
  late final _ma_resource_manager_data_source_set_looping =
      _ma_resource_manager_data_source_set_loopingPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_source>, int)>();

  int ma_resource_manager_data_source_is_looping(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
  ) {
    return _ma_resource_manager_data_source_is_looping(
      pDataSource,
    );
  }

  late final _ma_resource_manager_data_source_is_loopingPtr = _lookup<
          ffi.NativeFunction<
              ma_bool32 Function(
                  ffi.Pointer<ma_resource_manager_data_source>)>>(
      'ma_resource_manager_data_source_is_looping');
  late final _ma_resource_manager_data_source_is_looping =
      _ma_resource_manager_data_source_is_loopingPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_source>)>();

  int ma_resource_manager_data_source_get_available_frames(
    ffi.Pointer<ma_resource_manager_data_source> pDataSource,
    ffi.Pointer<ma_uint64> pAvailableFrames,
  ) {
    return _ma_resource_manager_data_source_get_available_frames(
      pDataSource,
      pAvailableFrames,
    );
  }

  late final _ma_resource_manager_data_source_get_available_framesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>,
                  ffi.Pointer<ma_uint64>)>>(
      'ma_resource_manager_data_source_get_available_frames');
  late final _ma_resource_manager_data_source_get_available_frames =
      _ma_resource_manager_data_source_get_available_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ma_uint64>)>();

  /// Job management.
  int ma_resource_manager_post_job(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_resource_manager_post_job(
      pResourceManager,
      pJob,
    );
  }

  late final _ma_resource_manager_post_jobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_job>)>>('ma_resource_manager_post_job');
  late final _ma_resource_manager_post_job =
      _ma_resource_manager_post_jobPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>, ffi.Pointer<ma_job>)>();

  int ma_resource_manager_post_job_quit(
    ffi.Pointer<ma_resource_manager> pResourceManager,
  ) {
    return _ma_resource_manager_post_job_quit(
      pResourceManager,
    );
  }

  late final _ma_resource_manager_post_job_quitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager>)>>(
      'ma_resource_manager_post_job_quit');
  late final _ma_resource_manager_post_job_quit =
      _ma_resource_manager_post_job_quitPtr
          .asFunction<int Function(ffi.Pointer<ma_resource_manager>)>();

  int ma_resource_manager_next_job(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_resource_manager_next_job(
      pResourceManager,
      pJob,
    );
  }

  late final _ma_resource_manager_next_jobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_job>)>>('ma_resource_manager_next_job');
  late final _ma_resource_manager_next_job =
      _ma_resource_manager_next_jobPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>, ffi.Pointer<ma_job>)>();

  int ma_resource_manager_process_job(
    ffi.Pointer<ma_resource_manager> pResourceManager,
    ffi.Pointer<ma_job> pJob,
  ) {
    return _ma_resource_manager_process_job(
      pResourceManager,
      pJob,
    );
  }

  late final _ma_resource_manager_process_jobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ma_job>)>>('ma_resource_manager_process_job');
  late final _ma_resource_manager_process_job =
      _ma_resource_manager_process_jobPtr.asFunction<
          int Function(
              ffi.Pointer<ma_resource_manager>, ffi.Pointer<ma_job>)>();

  int ma_resource_manager_process_next_job(
    ffi.Pointer<ma_resource_manager> pResourceManager,
  ) {
    return _ma_resource_manager_process_next_job(
      pResourceManager,
    );
  }

  late final _ma_resource_manager_process_next_jobPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager>)>>(
      'ma_resource_manager_process_next_job');
  late final _ma_resource_manager_process_next_job =
      _ma_resource_manager_process_next_jobPtr
          .asFunction<int Function(ffi.Pointer<ma_resource_manager>)>();

  ma_node_config ma_node_config_init() {
    return _ma_node_config_init();
  }

  late final _ma_node_config_initPtr =
      _lookup<ffi.NativeFunction<ma_node_config Function()>>(
          'ma_node_config_init');
  late final _ma_node_config_init =
      _ma_node_config_initPtr.asFunction<ma_node_config Function()>();

  int ma_node_get_heap_size(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_node_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_node_get_heap_size(
      pNodeGraph,
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_node_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_node_config>,
              ffi.Pointer<ffi.Size>)>>('ma_node_get_heap_size');
  late final _ma_node_get_heap_size = _ma_node_get_heap_sizePtr.asFunction<
      int Function(ffi.Pointer<ma_node_graph>, ffi.Pointer<ma_node_config>,
          ffi.Pointer<ffi.Size>)>();

  int ma_node_init_preallocated(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_node_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_init_preallocated(
      pNodeGraph,
      pConfig,
      pHeap,
      pNode,
    );
  }

  late final _ma_node_init_preallocatedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_node_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_node>)>>('ma_node_init_preallocated');
  late final _ma_node_init_preallocated =
      _ma_node_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_node_graph>, ffi.Pointer<ma_node_config>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ma_node>)>();

  int ma_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_node>)>>('ma_node_init');
  late final _ma_node_init = _ma_node_initPtr.asFunction<
      int Function(ffi.Pointer<ma_node_graph>, ffi.Pointer<ma_node_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_node>)>();

  void ma_node_uninit(
    ffi.Pointer<ma_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_node_uninit');
  late final _ma_node_uninit = _ma_node_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_node>, ffi.Pointer<ma_allocation_callbacks>)>();

  ffi.Pointer<ma_node_graph> ma_node_get_node_graph(
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_get_node_graph(
      pNode,
    );
  }

  late final _ma_node_get_node_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_node_graph> Function(
              ffi.Pointer<ma_node>)>>('ma_node_get_node_graph');
  late final _ma_node_get_node_graph = _ma_node_get_node_graphPtr
      .asFunction<ffi.Pointer<ma_node_graph> Function(ffi.Pointer<ma_node>)>();

  int ma_node_get_input_bus_count(
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_get_input_bus_count(
      pNode,
    );
  }

  late final _ma_node_get_input_bus_countPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_node>)>>(
          'ma_node_get_input_bus_count');
  late final _ma_node_get_input_bus_count = _ma_node_get_input_bus_countPtr
      .asFunction<int Function(ffi.Pointer<ma_node>)>();

  int ma_node_get_output_bus_count(
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_get_output_bus_count(
      pNode,
    );
  }

  late final _ma_node_get_output_bus_countPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_node>)>>(
          'ma_node_get_output_bus_count');
  late final _ma_node_get_output_bus_count = _ma_node_get_output_bus_countPtr
      .asFunction<int Function(ffi.Pointer<ma_node>)>();

  int ma_node_get_input_channels(
    ffi.Pointer<ma_node> pNode,
    int inputBusIndex,
  ) {
    return _ma_node_get_input_channels(
      pNode,
      inputBusIndex,
    );
  }

  late final _ma_node_get_input_channelsPtr = _lookup<
      ffi.NativeFunction<
          ma_uint32 Function(
              ffi.Pointer<ma_node>, ma_uint32)>>('ma_node_get_input_channels');
  late final _ma_node_get_input_channels = _ma_node_get_input_channelsPtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>();

  int ma_node_get_output_channels(
    ffi.Pointer<ma_node> pNode,
    int outputBusIndex,
  ) {
    return _ma_node_get_output_channels(
      pNode,
      outputBusIndex,
    );
  }

  late final _ma_node_get_output_channelsPtr = _lookup<
      ffi.NativeFunction<
          ma_uint32 Function(
              ffi.Pointer<ma_node>, ma_uint32)>>('ma_node_get_output_channels');
  late final _ma_node_get_output_channels = _ma_node_get_output_channelsPtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>();

  int ma_node_attach_output_bus(
    ffi.Pointer<ma_node> pNode,
    int outputBusIndex,
    ffi.Pointer<ma_node> pOtherNode,
    int otherNodeInputBusIndex,
  ) {
    return _ma_node_attach_output_bus(
      pNode,
      outputBusIndex,
      pOtherNode,
      otherNodeInputBusIndex,
    );
  }

  late final _ma_node_attach_output_busPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint32,
              ffi.Pointer<ma_node>, ma_uint32)>>('ma_node_attach_output_bus');
  late final _ma_node_attach_output_bus =
      _ma_node_attach_output_busPtr.asFunction<
          int Function(ffi.Pointer<ma_node>, int, ffi.Pointer<ma_node>, int)>();

  int ma_node_detach_output_bus(
    ffi.Pointer<ma_node> pNode,
    int outputBusIndex,
  ) {
    return _ma_node_detach_output_bus(
      pNode,
      outputBusIndex,
    );
  }

  late final _ma_node_detach_output_busPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node>, ma_uint32)>>('ma_node_detach_output_bus');
  late final _ma_node_detach_output_bus = _ma_node_detach_output_busPtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>();

  int ma_node_detach_all_output_buses(
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_detach_all_output_buses(
      pNode,
    );
  }

  late final _ma_node_detach_all_output_busesPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_node>)>>(
          'ma_node_detach_all_output_buses');
  late final _ma_node_detach_all_output_buses =
      _ma_node_detach_all_output_busesPtr
          .asFunction<int Function(ffi.Pointer<ma_node>)>();

  int ma_node_set_output_bus_volume(
    ffi.Pointer<ma_node> pNode,
    int outputBusIndex,
    double volume,
  ) {
    return _ma_node_set_output_bus_volume(
      pNode,
      outputBusIndex,
      volume,
    );
  }

  late final _ma_node_set_output_bus_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint32,
              ffi.Float)>>('ma_node_set_output_bus_volume');
  late final _ma_node_set_output_bus_volume = _ma_node_set_output_bus_volumePtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int, double)>();

  double ma_node_get_output_bus_volume(
    ffi.Pointer<ma_node> pNode,
    int outputBusIndex,
  ) {
    return _ma_node_get_output_bus_volume(
      pNode,
      outputBusIndex,
    );
  }

  late final _ma_node_get_output_bus_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ma_node>,
              ma_uint32)>>('ma_node_get_output_bus_volume');
  late final _ma_node_get_output_bus_volume = _ma_node_get_output_bus_volumePtr
      .asFunction<double Function(ffi.Pointer<ma_node>, int)>();

  int ma_node_set_state(
    ffi.Pointer<ma_node> pNode,
    int state,
  ) {
    return _ma_node_set_state(
      pNode,
      state,
    );
  }

  late final _ma_node_set_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node>, ffi.Int32)>>('ma_node_set_state');
  late final _ma_node_set_state = _ma_node_set_statePtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>();

  int ma_node_get_state(
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_get_state(
      pNode,
    );
  }

  late final _ma_node_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_node>)>>(
          'ma_node_get_state');
  late final _ma_node_get_state =
      _ma_node_get_statePtr.asFunction<int Function(ffi.Pointer<ma_node>)>();

  int ma_node_set_state_time(
    ffi.Pointer<ma_node> pNode,
    int state,
    int globalTime,
  ) {
    return _ma_node_set_state_time(
      pNode,
      state,
      globalTime,
    );
  }

  late final _ma_node_set_state_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_node>, ffi.Int32,
              ma_uint64)>>('ma_node_set_state_time');
  late final _ma_node_set_state_time = _ma_node_set_state_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int, int)>();

  int ma_node_get_state_time(
    ffi.Pointer<ma_node> pNode,
    int state,
  ) {
    return _ma_node_get_state_time(
      pNode,
      state,
    );
  }

  late final _ma_node_get_state_timePtr = _lookup<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ma_node>, ffi.Int32)>>('ma_node_get_state_time');
  late final _ma_node_get_state_time = _ma_node_get_state_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>();

  int ma_node_get_state_by_time(
    ffi.Pointer<ma_node> pNode,
    int globalTime,
  ) {
    return _ma_node_get_state_by_time(
      pNode,
      globalTime,
    );
  }

  late final _ma_node_get_state_by_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node>, ma_uint64)>>('ma_node_get_state_by_time');
  late final _ma_node_get_state_by_time = _ma_node_get_state_by_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>();

  int ma_node_get_state_by_time_range(
    ffi.Pointer<ma_node> pNode,
    int globalTimeBeg,
    int globalTimeEnd,
  ) {
    return _ma_node_get_state_by_time_range(
      pNode,
      globalTimeBeg,
      globalTimeEnd,
    );
  }

  late final _ma_node_get_state_by_time_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint64,
              ma_uint64)>>('ma_node_get_state_by_time_range');
  late final _ma_node_get_state_by_time_range =
      _ma_node_get_state_by_time_rangePtr
          .asFunction<int Function(ffi.Pointer<ma_node>, int, int)>();

  int ma_node_get_time(
    ffi.Pointer<ma_node> pNode,
  ) {
    return _ma_node_get_time(
      pNode,
    );
  }

  late final _ma_node_get_timePtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_node>)>>(
          'ma_node_get_time');
  late final _ma_node_get_time =
      _ma_node_get_timePtr.asFunction<int Function(ffi.Pointer<ma_node>)>();

  int ma_node_set_time(
    ffi.Pointer<ma_node> pNode,
    int localTime,
  ) {
    return _ma_node_set_time(
      pNode,
      localTime,
    );
  }

  late final _ma_node_set_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node>, ma_uint64)>>('ma_node_set_time');
  late final _ma_node_set_time = _ma_node_set_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node>, int)>();

  ma_node_graph_config ma_node_graph_config_init(
    int channels,
  ) {
    return _ma_node_graph_config_init(
      channels,
    );
  }

  late final _ma_node_graph_config_initPtr =
      _lookup<ffi.NativeFunction<ma_node_graph_config Function(ma_uint32)>>(
          'ma_node_graph_config_init');
  late final _ma_node_graph_config_init = _ma_node_graph_config_initPtr
      .asFunction<ma_node_graph_config Function(int)>();

  int ma_node_graph_init(
    ffi.Pointer<ma_node_graph_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_node_graph> pNodeGraph,
  ) {
    return _ma_node_graph_init(
      pConfig,
      pAllocationCallbacks,
      pNodeGraph,
    );
  }

  late final _ma_node_graph_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_node_graph>)>>('ma_node_graph_init');
  late final _ma_node_graph_init = _ma_node_graph_initPtr.asFunction<
      int Function(ffi.Pointer<ma_node_graph_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_node_graph>)>();

  void ma_node_graph_uninit(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_node_graph_uninit(
      pNodeGraph,
      pAllocationCallbacks,
    );
  }

  late final _ma_node_graph_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_node_graph_uninit');
  late final _ma_node_graph_uninit = _ma_node_graph_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_node_graph>, ffi.Pointer<ma_allocation_callbacks>)>();

  ffi.Pointer<ma_node> ma_node_graph_get_endpoint(
    ffi.Pointer<ma_node_graph> pNodeGraph,
  ) {
    return _ma_node_graph_get_endpoint(
      pNodeGraph,
    );
  }

  late final _ma_node_graph_get_endpointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_node> Function(
              ffi.Pointer<ma_node_graph>)>>('ma_node_graph_get_endpoint');
  late final _ma_node_graph_get_endpoint = _ma_node_graph_get_endpointPtr
      .asFunction<ffi.Pointer<ma_node> Function(ffi.Pointer<ma_node_graph>)>();

  int ma_node_graph_read_pcm_frames(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_node_graph_read_pcm_frames(
      pNodeGraph,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_node_graph_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>>('ma_node_graph_read_pcm_frames');
  late final _ma_node_graph_read_pcm_frames =
      _ma_node_graph_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_node_graph>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>();

  int ma_node_graph_get_channels(
    ffi.Pointer<ma_node_graph> pNodeGraph,
  ) {
    return _ma_node_graph_get_channels(
      pNodeGraph,
    );
  }

  late final _ma_node_graph_get_channelsPtr = _lookup<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_node_graph>)>>(
      'ma_node_graph_get_channels');
  late final _ma_node_graph_get_channels = _ma_node_graph_get_channelsPtr
      .asFunction<int Function(ffi.Pointer<ma_node_graph>)>();

  int ma_node_graph_get_time(
    ffi.Pointer<ma_node_graph> pNodeGraph,
  ) {
    return _ma_node_graph_get_time(
      pNodeGraph,
    );
  }

  late final _ma_node_graph_get_timePtr = _lookup<
          ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_node_graph>)>>(
      'ma_node_graph_get_time');
  late final _ma_node_graph_get_time = _ma_node_graph_get_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node_graph>)>();

  int ma_node_graph_set_time(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    int globalTime,
  ) {
    return _ma_node_graph_set_time(
      pNodeGraph,
      globalTime,
    );
  }

  late final _ma_node_graph_set_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_node_graph>,
              ma_uint64)>>('ma_node_graph_set_time');
  late final _ma_node_graph_set_time = _ma_node_graph_set_timePtr
      .asFunction<int Function(ffi.Pointer<ma_node_graph>, int)>();

  ma_data_source_node_config ma_data_source_node_config_init(
    ffi.Pointer<ma_data_source> pDataSource,
  ) {
    return _ma_data_source_node_config_init(
      pDataSource,
    );
  }

  late final _ma_data_source_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_data_source_node_config Function(
              ffi.Pointer<ma_data_source>)>>('ma_data_source_node_config_init');
  late final _ma_data_source_node_config_init =
      _ma_data_source_node_config_initPtr.asFunction<
          ma_data_source_node_config Function(ffi.Pointer<ma_data_source>)>();

  int ma_data_source_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_data_source_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_data_source_node> pDataSourceNode,
  ) {
    return _ma_data_source_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pDataSourceNode,
    );
  }

  late final _ma_data_source_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_data_source_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_data_source_node>)>>('ma_data_source_node_init');
  late final _ma_data_source_node_init =
      _ma_data_source_node_initPtr.asFunction<
          int Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_data_source_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_data_source_node>)>();

  void ma_data_source_node_uninit(
    ffi.Pointer<ma_data_source_node> pDataSourceNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_data_source_node_uninit(
      pDataSourceNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_data_source_node_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_data_source_node>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_data_source_node_uninit');
  late final _ma_data_source_node_uninit =
      _ma_data_source_node_uninitPtr.asFunction<
          void Function(ffi.Pointer<ma_data_source_node>,
              ffi.Pointer<ma_allocation_callbacks>)>();

  int ma_data_source_node_set_looping(
    ffi.Pointer<ma_data_source_node> pDataSourceNode,
    int isLooping,
  ) {
    return _ma_data_source_node_set_looping(
      pDataSourceNode,
      isLooping,
    );
  }

  late final _ma_data_source_node_set_loopingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source_node>,
              ma_bool32)>>('ma_data_source_node_set_looping');
  late final _ma_data_source_node_set_looping =
      _ma_data_source_node_set_loopingPtr
          .asFunction<int Function(ffi.Pointer<ma_data_source_node>, int)>();

  int ma_data_source_node_is_looping(
    ffi.Pointer<ma_data_source_node> pDataSourceNode,
  ) {
    return _ma_data_source_node_is_looping(
      pDataSourceNode,
    );
  }

  late final _ma_data_source_node_is_loopingPtr = _lookup<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_data_source_node>)>>(
      'ma_data_source_node_is_looping');
  late final _ma_data_source_node_is_looping =
      _ma_data_source_node_is_loopingPtr
          .asFunction<int Function(ffi.Pointer<ma_data_source_node>)>();

  ma_splitter_node_config ma_splitter_node_config_init(
    int channels,
  ) {
    return _ma_splitter_node_config_init(
      channels,
    );
  }

  late final _ma_splitter_node_config_initPtr =
      _lookup<ffi.NativeFunction<ma_splitter_node_config Function(ma_uint32)>>(
          'ma_splitter_node_config_init');
  late final _ma_splitter_node_config_init = _ma_splitter_node_config_initPtr
      .asFunction<ma_splitter_node_config Function(int)>();

  int ma_splitter_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_splitter_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_splitter_node> pSplitterNode,
  ) {
    return _ma_splitter_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pSplitterNode,
    );
  }

  late final _ma_splitter_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_splitter_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_splitter_node>)>>('ma_splitter_node_init');
  late final _ma_splitter_node_init = _ma_splitter_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_splitter_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_splitter_node>)>();

  void ma_splitter_node_uninit(
    ffi.Pointer<ma_splitter_node> pSplitterNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_splitter_node_uninit(
      pSplitterNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_splitter_node_uninitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_splitter_node>,
                  ffi.Pointer<ma_allocation_callbacks>)>>(
      'ma_splitter_node_uninit');
  late final _ma_splitter_node_uninit = _ma_splitter_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_splitter_node>,
          ffi.Pointer<ma_allocation_callbacks>)>();

  ma_biquad_node_config ma_biquad_node_config_init(
    int channels,
    double b0,
    double b1,
    double b2,
    double a0,
    double a1,
    double a2,
  ) {
    return _ma_biquad_node_config_init(
      channels,
      b0,
      b1,
      b2,
      a0,
      a1,
      a2,
    );
  }

  late final _ma_biquad_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_biquad_node_config Function(
              ma_uint32,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ma_biquad_node_config_init');
  late final _ma_biquad_node_config_init =
      _ma_biquad_node_config_initPtr.asFunction<
          ma_biquad_node_config Function(
              int, double, double, double, double, double, double)>();

  int ma_biquad_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_biquad_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_biquad_node> pNode,
  ) {
    return _ma_biquad_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_biquad_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_biquad_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_biquad_node>)>>('ma_biquad_node_init');
  late final _ma_biquad_node_init = _ma_biquad_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_biquad_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_biquad_node>)>();

  int ma_biquad_node_reinit(
    ffi.Pointer<ma_biquad_config> pConfig,
    ffi.Pointer<ma_biquad_node> pNode,
  ) {
    return _ma_biquad_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_biquad_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ma_biquad_node>)>>('ma_biquad_node_reinit');
  late final _ma_biquad_node_reinit = _ma_biquad_node_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_biquad_config>, ffi.Pointer<ma_biquad_node>)>();

  void ma_biquad_node_uninit(
    ffi.Pointer<ma_biquad_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_biquad_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_biquad_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_biquad_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_biquad_node_uninit');
  late final _ma_biquad_node_uninit = _ma_biquad_node_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_biquad_node>, ffi.Pointer<ma_allocation_callbacks>)>();

  ma_lpf_node_config ma_lpf_node_config_init(
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_lpf_node_config_init(
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_lpf_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_lpf_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_lpf_node_config_init');
  late final _ma_lpf_node_config_init = _ma_lpf_node_config_initPtr
      .asFunction<ma_lpf_node_config Function(int, int, double, int)>();

  int ma_lpf_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_lpf_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_lpf_node> pNode,
  ) {
    return _ma_lpf_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_lpf_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_lpf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_lpf_node>)>>('ma_lpf_node_init');
  late final _ma_lpf_node_init = _ma_lpf_node_initPtr.asFunction<
      int Function(ffi.Pointer<ma_node_graph>, ffi.Pointer<ma_lpf_node_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_lpf_node>)>();

  int ma_lpf_node_reinit(
    ffi.Pointer<ma_lpf_config> pConfig,
    ffi.Pointer<ma_lpf_node> pNode,
  ) {
    return _ma_lpf_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_lpf_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf_config>,
              ffi.Pointer<ma_lpf_node>)>>('ma_lpf_node_reinit');
  late final _ma_lpf_node_reinit = _ma_lpf_node_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_lpf_config>, ffi.Pointer<ma_lpf_node>)>();

  void ma_lpf_node_uninit(
    ffi.Pointer<ma_lpf_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_lpf_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_lpf_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_lpf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_lpf_node_uninit');
  late final _ma_lpf_node_uninit = _ma_lpf_node_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_lpf_node>, ffi.Pointer<ma_allocation_callbacks>)>();

  ma_hpf_node_config ma_hpf_node_config_init(
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_hpf_node_config_init(
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_hpf_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hpf_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_hpf_node_config_init');
  late final _ma_hpf_node_config_init = _ma_hpf_node_config_initPtr
      .asFunction<ma_hpf_node_config Function(int, int, double, int)>();

  int ma_hpf_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_hpf_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_hpf_node> pNode,
  ) {
    return _ma_hpf_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_hpf_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_hpf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hpf_node>)>>('ma_hpf_node_init');
  late final _ma_hpf_node_init = _ma_hpf_node_initPtr.asFunction<
      int Function(ffi.Pointer<ma_node_graph>, ffi.Pointer<ma_hpf_node_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_hpf_node>)>();

  int ma_hpf_node_reinit(
    ffi.Pointer<ma_hpf_config> pConfig,
    ffi.Pointer<ma_hpf_node> pNode,
  ) {
    return _ma_hpf_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_hpf_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf_config>,
              ffi.Pointer<ma_hpf_node>)>>('ma_hpf_node_reinit');
  late final _ma_hpf_node_reinit = _ma_hpf_node_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_hpf_config>, ffi.Pointer<ma_hpf_node>)>();

  void ma_hpf_node_uninit(
    ffi.Pointer<ma_hpf_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_hpf_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_hpf_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hpf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_hpf_node_uninit');
  late final _ma_hpf_node_uninit = _ma_hpf_node_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_hpf_node>, ffi.Pointer<ma_allocation_callbacks>)>();

  ma_bpf_node_config ma_bpf_node_config_init(
    int channels,
    int sampleRate,
    double cutoffFrequency,
    int order,
  ) {
    return _ma_bpf_node_config_init(
      channels,
      sampleRate,
      cutoffFrequency,
      order,
    );
  }

  late final _ma_bpf_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_bpf_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ma_uint32)>>('ma_bpf_node_config_init');
  late final _ma_bpf_node_config_init = _ma_bpf_node_config_initPtr
      .asFunction<ma_bpf_node_config Function(int, int, double, int)>();

  int ma_bpf_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_bpf_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_bpf_node> pNode,
  ) {
    return _ma_bpf_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_bpf_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_bpf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_bpf_node>)>>('ma_bpf_node_init');
  late final _ma_bpf_node_init = _ma_bpf_node_initPtr.asFunction<
      int Function(ffi.Pointer<ma_node_graph>, ffi.Pointer<ma_bpf_node_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_bpf_node>)>();

  int ma_bpf_node_reinit(
    ffi.Pointer<ma_bpf_config> pConfig,
    ffi.Pointer<ma_bpf_node> pNode,
  ) {
    return _ma_bpf_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_bpf_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf_config>,
              ffi.Pointer<ma_bpf_node>)>>('ma_bpf_node_reinit');
  late final _ma_bpf_node_reinit = _ma_bpf_node_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_bpf_config>, ffi.Pointer<ma_bpf_node>)>();

  void ma_bpf_node_uninit(
    ffi.Pointer<ma_bpf_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_bpf_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_bpf_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_bpf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_bpf_node_uninit');
  late final _ma_bpf_node_uninit = _ma_bpf_node_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_bpf_node>, ffi.Pointer<ma_allocation_callbacks>)>();

  ma_notch_node_config ma_notch_node_config_init(
    int channels,
    int sampleRate,
    double q,
    double frequency,
  ) {
    return _ma_notch_node_config_init(
      channels,
      sampleRate,
      q,
      frequency,
    );
  }

  late final _ma_notch_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_notch_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ffi.Double)>>('ma_notch_node_config_init');
  late final _ma_notch_node_config_init = _ma_notch_node_config_initPtr
      .asFunction<ma_notch_node_config Function(int, int, double, double)>();

  int ma_notch_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_notch_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_notch_node> pNode,
  ) {
    return _ma_notch_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_notch_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_notch_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_notch_node>)>>('ma_notch_node_init');
  late final _ma_notch_node_init = _ma_notch_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_notch_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_notch_node>)>();

  int ma_notch_node_reinit(
    ffi.Pointer<ma_notch_config> pConfig,
    ffi.Pointer<ma_notch_node> pNode,
  ) {
    return _ma_notch_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_notch_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_notch_config>,
              ffi.Pointer<ma_notch_node>)>>('ma_notch_node_reinit');
  late final _ma_notch_node_reinit = _ma_notch_node_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_notch_config>, ffi.Pointer<ma_notch_node>)>();

  void ma_notch_node_uninit(
    ffi.Pointer<ma_notch_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_notch_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_notch_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_notch_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_notch_node_uninit');
  late final _ma_notch_node_uninit = _ma_notch_node_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_notch_node>, ffi.Pointer<ma_allocation_callbacks>)>();

  ma_peak_node_config ma_peak_node_config_init(
    int channels,
    int sampleRate,
    double gainDB,
    double q,
    double frequency,
  ) {
    return _ma_peak_node_config_init(
      channels,
      sampleRate,
      gainDB,
      q,
      frequency,
    );
  }

  late final _ma_peak_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_peak_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ffi.Double, ffi.Double)>>('ma_peak_node_config_init');
  late final _ma_peak_node_config_init =
      _ma_peak_node_config_initPtr.asFunction<
          ma_peak_node_config Function(int, int, double, double, double)>();

  int ma_peak_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_peak_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_peak_node> pNode,
  ) {
    return _ma_peak_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_peak_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_peak_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_peak_node>)>>('ma_peak_node_init');
  late final _ma_peak_node_init = _ma_peak_node_initPtr.asFunction<
      int Function(ffi.Pointer<ma_node_graph>, ffi.Pointer<ma_peak_node_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_peak_node>)>();

  int ma_peak_node_reinit(
    ffi.Pointer<ma_peak_config> pConfig,
    ffi.Pointer<ma_peak_node> pNode,
  ) {
    return _ma_peak_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_peak_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_peak_config>,
              ffi.Pointer<ma_peak_node>)>>('ma_peak_node_reinit');
  late final _ma_peak_node_reinit = _ma_peak_node_reinitPtr.asFunction<
      int Function(ffi.Pointer<ma_peak_config>, ffi.Pointer<ma_peak_node>)>();

  void ma_peak_node_uninit(
    ffi.Pointer<ma_peak_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_peak_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_peak_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_peak_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_peak_node_uninit');
  late final _ma_peak_node_uninit = _ma_peak_node_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_peak_node>, ffi.Pointer<ma_allocation_callbacks>)>();

  ma_loshelf_node_config ma_loshelf_node_config_init(
    int channels,
    int sampleRate,
    double gainDB,
    double q,
    double frequency,
  ) {
    return _ma_loshelf_node_config_init(
      channels,
      sampleRate,
      gainDB,
      q,
      frequency,
    );
  }

  late final _ma_loshelf_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_loshelf_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ffi.Double, ffi.Double)>>('ma_loshelf_node_config_init');
  late final _ma_loshelf_node_config_init =
      _ma_loshelf_node_config_initPtr.asFunction<
          ma_loshelf_node_config Function(int, int, double, double, double)>();

  int ma_loshelf_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_loshelf_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_loshelf_node> pNode,
  ) {
    return _ma_loshelf_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_loshelf_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_loshelf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_loshelf_node>)>>('ma_loshelf_node_init');
  late final _ma_loshelf_node_init = _ma_loshelf_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_loshelf_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_loshelf_node>)>();

  int ma_loshelf_node_reinit(
    ffi.Pointer<ma_loshelf_config> pConfig,
    ffi.Pointer<ma_loshelf_node> pNode,
  ) {
    return _ma_loshelf_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_loshelf_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_loshelf_config>,
              ffi.Pointer<ma_loshelf_node>)>>('ma_loshelf_node_reinit');
  late final _ma_loshelf_node_reinit = _ma_loshelf_node_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_loshelf_config>, ffi.Pointer<ma_loshelf_node>)>();

  void ma_loshelf_node_uninit(
    ffi.Pointer<ma_loshelf_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_loshelf_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_loshelf_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_loshelf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_loshelf_node_uninit');
  late final _ma_loshelf_node_uninit = _ma_loshelf_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_loshelf_node>,
          ffi.Pointer<ma_allocation_callbacks>)>();

  ma_hishelf_node_config ma_hishelf_node_config_init(
    int channels,
    int sampleRate,
    double gainDB,
    double q,
    double frequency,
  ) {
    return _ma_hishelf_node_config_init(
      channels,
      sampleRate,
      gainDB,
      q,
      frequency,
    );
  }

  late final _ma_hishelf_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_hishelf_node_config Function(ma_uint32, ma_uint32, ffi.Double,
              ffi.Double, ffi.Double)>>('ma_hishelf_node_config_init');
  late final _ma_hishelf_node_config_init =
      _ma_hishelf_node_config_initPtr.asFunction<
          ma_hishelf_node_config Function(int, int, double, double, double)>();

  int ma_hishelf_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_hishelf_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_hishelf_node> pNode,
  ) {
    return _ma_hishelf_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pNode,
    );
  }

  late final _ma_hishelf_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_hishelf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hishelf_node>)>>('ma_hishelf_node_init');
  late final _ma_hishelf_node_init = _ma_hishelf_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_hishelf_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_hishelf_node>)>();

  int ma_hishelf_node_reinit(
    ffi.Pointer<ma_hishelf_config> pConfig,
    ffi.Pointer<ma_hishelf_node> pNode,
  ) {
    return _ma_hishelf_node_reinit(
      pConfig,
      pNode,
    );
  }

  late final _ma_hishelf_node_reinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hishelf_config>,
              ffi.Pointer<ma_hishelf_node>)>>('ma_hishelf_node_reinit');
  late final _ma_hishelf_node_reinit = _ma_hishelf_node_reinitPtr.asFunction<
      int Function(
          ffi.Pointer<ma_hishelf_config>, ffi.Pointer<ma_hishelf_node>)>();

  void ma_hishelf_node_uninit(
    ffi.Pointer<ma_hishelf_node> pNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_hishelf_node_uninit(
      pNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_hishelf_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hishelf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_hishelf_node_uninit');
  late final _ma_hishelf_node_uninit = _ma_hishelf_node_uninitPtr.asFunction<
      void Function(ffi.Pointer<ma_hishelf_node>,
          ffi.Pointer<ma_allocation_callbacks>)>();

  ma_delay_node_config ma_delay_node_config_init(
    int channels,
    int sampleRate,
    int delayInFrames,
    double decay,
  ) {
    return _ma_delay_node_config_init(
      channels,
      sampleRate,
      delayInFrames,
      decay,
    );
  }

  late final _ma_delay_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_delay_node_config Function(ma_uint32, ma_uint32, ma_uint32,
              ffi.Float)>>('ma_delay_node_config_init');
  late final _ma_delay_node_config_init = _ma_delay_node_config_initPtr
      .asFunction<ma_delay_node_config Function(int, int, int, double)>();

  int ma_delay_node_init(
    ffi.Pointer<ma_node_graph> pNodeGraph,
    ffi.Pointer<ma_delay_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_delay_node> pDelayNode,
  ) {
    return _ma_delay_node_init(
      pNodeGraph,
      pConfig,
      pAllocationCallbacks,
      pDelayNode,
    );
  }

  late final _ma_delay_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_delay_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_delay_node>)>>('ma_delay_node_init');
  late final _ma_delay_node_init = _ma_delay_node_initPtr.asFunction<
      int Function(
          ffi.Pointer<ma_node_graph>,
          ffi.Pointer<ma_delay_node_config>,
          ffi.Pointer<ma_allocation_callbacks>,
          ffi.Pointer<ma_delay_node>)>();

  void ma_delay_node_uninit(
    ffi.Pointer<ma_delay_node> pDelayNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_delay_node_uninit(
      pDelayNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_delay_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_delay_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_delay_node_uninit');
  late final _ma_delay_node_uninit = _ma_delay_node_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_delay_node>, ffi.Pointer<ma_allocation_callbacks>)>();

  void ma_delay_node_set_wet(
    ffi.Pointer<ma_delay_node> pDelayNode,
    double value,
  ) {
    return _ma_delay_node_set_wet(
      pDelayNode,
      value,
    );
  }

  late final _ma_delay_node_set_wetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_delay_node>, ffi.Float)>>('ma_delay_node_set_wet');
  late final _ma_delay_node_set_wet = _ma_delay_node_set_wetPtr
      .asFunction<void Function(ffi.Pointer<ma_delay_node>, double)>();

  double ma_delay_node_get_wet(
    ffi.Pointer<ma_delay_node> pDelayNode,
  ) {
    return _ma_delay_node_get_wet(
      pDelayNode,
    );
  }

  late final _ma_delay_node_get_wetPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay_node>)>>(
      'ma_delay_node_get_wet');
  late final _ma_delay_node_get_wet = _ma_delay_node_get_wetPtr
      .asFunction<double Function(ffi.Pointer<ma_delay_node>)>();

  void ma_delay_node_set_dry(
    ffi.Pointer<ma_delay_node> pDelayNode,
    double value,
  ) {
    return _ma_delay_node_set_dry(
      pDelayNode,
      value,
    );
  }

  late final _ma_delay_node_set_dryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_delay_node>, ffi.Float)>>('ma_delay_node_set_dry');
  late final _ma_delay_node_set_dry = _ma_delay_node_set_dryPtr
      .asFunction<void Function(ffi.Pointer<ma_delay_node>, double)>();

  double ma_delay_node_get_dry(
    ffi.Pointer<ma_delay_node> pDelayNode,
  ) {
    return _ma_delay_node_get_dry(
      pDelayNode,
    );
  }

  late final _ma_delay_node_get_dryPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay_node>)>>(
      'ma_delay_node_get_dry');
  late final _ma_delay_node_get_dry = _ma_delay_node_get_dryPtr
      .asFunction<double Function(ffi.Pointer<ma_delay_node>)>();

  void ma_delay_node_set_decay(
    ffi.Pointer<ma_delay_node> pDelayNode,
    double value,
  ) {
    return _ma_delay_node_set_decay(
      pDelayNode,
      value,
    );
  }

  late final _ma_delay_node_set_decayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_delay_node>,
              ffi.Float)>>('ma_delay_node_set_decay');
  late final _ma_delay_node_set_decay = _ma_delay_node_set_decayPtr
      .asFunction<void Function(ffi.Pointer<ma_delay_node>, double)>();

  double ma_delay_node_get_decay(
    ffi.Pointer<ma_delay_node> pDelayNode,
  ) {
    return _ma_delay_node_get_decay(
      pDelayNode,
    );
  }

  late final _ma_delay_node_get_decayPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay_node>)>>(
      'ma_delay_node_get_decay');
  late final _ma_delay_node_get_decay = _ma_delay_node_get_decayPtr
      .asFunction<double Function(ffi.Pointer<ma_delay_node>)>();

  ma_engine_node_config ma_engine_node_config_init(
    ffi.Pointer<ma_engine> pEngine,
    int type,
    int flags,
  ) {
    return _ma_engine_node_config_init(
      pEngine,
      type,
      flags,
    );
  }

  late final _ma_engine_node_config_initPtr = _lookup<
      ffi.NativeFunction<
          ma_engine_node_config Function(ffi.Pointer<ma_engine>, ffi.Int32,
              ma_uint32)>>('ma_engine_node_config_init');
  late final _ma_engine_node_config_init =
      _ma_engine_node_config_initPtr.asFunction<
          ma_engine_node_config Function(ffi.Pointer<ma_engine>, int, int)>();

  int ma_engine_node_get_heap_size(
    ffi.Pointer<ma_engine_node_config> pConfig,
    ffi.Pointer<ffi.Size> pHeapSizeInBytes,
  ) {
    return _ma_engine_node_get_heap_size(
      pConfig,
      pHeapSizeInBytes,
    );
  }

  late final _ma_engine_node_get_heap_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine_node_config>,
              ffi.Pointer<ffi.Size>)>>('ma_engine_node_get_heap_size');
  late final _ma_engine_node_get_heap_size =
      _ma_engine_node_get_heap_sizePtr.asFunction<
          int Function(
              ffi.Pointer<ma_engine_node_config>, ffi.Pointer<ffi.Size>)>();

  int ma_engine_node_init_preallocated(
    ffi.Pointer<ma_engine_node_config> pConfig,
    ffi.Pointer<ffi.Void> pHeap,
    ffi.Pointer<ma_engine_node> pEngineNode,
  ) {
    return _ma_engine_node_init_preallocated(
      pConfig,
      pHeap,
      pEngineNode,
    );
  }

  late final _ma_engine_node_init_preallocatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_engine_node_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_engine_node>)>>(
      'ma_engine_node_init_preallocated');
  late final _ma_engine_node_init_preallocated =
      _ma_engine_node_init_preallocatedPtr.asFunction<
          int Function(ffi.Pointer<ma_engine_node_config>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ma_engine_node>)>();

  int ma_engine_node_init(
    ffi.Pointer<ma_engine_node_config> pConfig,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
    ffi.Pointer<ma_engine_node> pEngineNode,
  ) {
    return _ma_engine_node_init(
      pConfig,
      pAllocationCallbacks,
      pEngineNode,
    );
  }

  late final _ma_engine_node_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_engine_node>)>>('ma_engine_node_init');
  late final _ma_engine_node_init = _ma_engine_node_initPtr.asFunction<
      int Function(ffi.Pointer<ma_engine_node_config>,
          ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_engine_node>)>();

  void ma_engine_node_uninit(
    ffi.Pointer<ma_engine_node> pEngineNode,
    ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
  ) {
    return _ma_engine_node_uninit(
      pEngineNode,
      pAllocationCallbacks,
    );
  }

  late final _ma_engine_node_uninitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine_node>,
              ffi.Pointer<ma_allocation_callbacks>)>>('ma_engine_node_uninit');
  late final _ma_engine_node_uninit = _ma_engine_node_uninitPtr.asFunction<
      void Function(
          ffi.Pointer<ma_engine_node>, ffi.Pointer<ma_allocation_callbacks>)>();

  ma_sound_config ma_sound_config_init() {
    return _ma_sound_config_init();
  }

  late final _ma_sound_config_initPtr =
      _lookup<ffi.NativeFunction<ma_sound_config Function()>>(
          'ma_sound_config_init');
  late final _ma_sound_config_init =
      _ma_sound_config_initPtr.asFunction<ma_sound_config Function()>();

  ma_sound_config ma_sound_config_init_2(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_sound_config_init_2(
      pEngine,
    );
  }

  late final _ma_sound_config_init_2Ptr = _lookup<
          ffi.NativeFunction<ma_sound_config Function(ffi.Pointer<ma_engine>)>>(
      'ma_sound_config_init_2');
  late final _ma_sound_config_init_2 = _ma_sound_config_init_2Ptr
      .asFunction<ma_sound_config Function(ffi.Pointer<ma_engine>)>();

  ma_sound_group_config ma_sound_group_config_init() {
    return _ma_sound_group_config_init();
  }

  late final _ma_sound_group_config_initPtr =
      _lookup<ffi.NativeFunction<ma_sound_group_config Function()>>(
          'ma_sound_group_config_init');
  late final _ma_sound_group_config_init = _ma_sound_group_config_initPtr
      .asFunction<ma_sound_group_config Function()>();

  ma_sound_group_config ma_sound_group_config_init_2(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_sound_group_config_init_2(
      pEngine,
    );
  }

  late final _ma_sound_group_config_init_2Ptr = _lookup<
      ffi.NativeFunction<
          ma_sound_group_config Function(
              ffi.Pointer<ma_engine>)>>('ma_sound_group_config_init_2');
  late final _ma_sound_group_config_init_2 = _ma_sound_group_config_init_2Ptr
      .asFunction<ma_sound_group_config Function(ffi.Pointer<ma_engine>)>();

  ma_engine_config ma_engine_config_init() {
    return _ma_engine_config_init();
  }

  late final _ma_engine_config_initPtr =
      _lookup<ffi.NativeFunction<ma_engine_config Function()>>(
          'ma_engine_config_init');
  late final _ma_engine_config_init =
      _ma_engine_config_initPtr.asFunction<ma_engine_config Function()>();

  int ma_engine_init(
    ffi.Pointer<ma_engine_config> pConfig,
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_init(
      pConfig,
      pEngine,
    );
  }

  late final _ma_engine_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine_config>,
              ffi.Pointer<ma_engine>)>>('ma_engine_init');
  late final _ma_engine_init = _ma_engine_initPtr.asFunction<
      int Function(ffi.Pointer<ma_engine_config>, ffi.Pointer<ma_engine>)>();

  void ma_engine_uninit(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_uninit(
      pEngine,
    );
  }

  late final _ma_engine_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_uninit');
  late final _ma_engine_uninit =
      _ma_engine_uninitPtr.asFunction<void Function(ffi.Pointer<ma_engine>)>();

  int ma_engine_read_pcm_frames(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ffi.Void> pFramesOut,
    int frameCount,
    ffi.Pointer<ma_uint64> pFramesRead,
  ) {
    return _ma_engine_read_pcm_frames(
      pEngine,
      pFramesOut,
      frameCount,
      pFramesRead,
    );
  }

  late final _ma_engine_read_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Void>,
              ma_uint64, ffi.Pointer<ma_uint64>)>>('ma_engine_read_pcm_frames');
  late final _ma_engine_read_pcm_frames =
      _ma_engine_read_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ma_uint64>)>();

  ffi.Pointer<ma_node_graph> ma_engine_get_node_graph(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_node_graph(
      pEngine,
    );
  }

  late final _ma_engine_get_node_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_node_graph> Function(
              ffi.Pointer<ma_engine>)>>('ma_engine_get_node_graph');
  late final _ma_engine_get_node_graph =
      _ma_engine_get_node_graphPtr.asFunction<
          ffi.Pointer<ma_node_graph> Function(ffi.Pointer<ma_engine>)>();

  ffi.Pointer<ma_resource_manager> ma_engine_get_resource_manager(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_resource_manager(
      pEngine,
    );
  }

  late final _ma_engine_get_resource_managerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_resource_manager> Function(
              ffi.Pointer<ma_engine>)>>('ma_engine_get_resource_manager');
  late final _ma_engine_get_resource_manager =
      _ma_engine_get_resource_managerPtr.asFunction<
          ffi.Pointer<ma_resource_manager> Function(ffi.Pointer<ma_engine>)>();

  ffi.Pointer<ma_device> ma_engine_get_device(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_device(
      pEngine,
    );
  }

  late final _ma_engine_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_device> Function(
              ffi.Pointer<ma_engine>)>>('ma_engine_get_device');
  late final _ma_engine_get_device = _ma_engine_get_devicePtr
      .asFunction<ffi.Pointer<ma_device> Function(ffi.Pointer<ma_engine>)>();

  ffi.Pointer<ma_log> ma_engine_get_log(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_log(
      pEngine,
    );
  }

  late final _ma_engine_get_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_log> Function(
              ffi.Pointer<ma_engine>)>>('ma_engine_get_log');
  late final _ma_engine_get_log = _ma_engine_get_logPtr
      .asFunction<ffi.Pointer<ma_log> Function(ffi.Pointer<ma_engine>)>();

  ffi.Pointer<ma_node> ma_engine_get_endpoint(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_endpoint(
      pEngine,
    );
  }

  late final _ma_engine_get_endpointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_node> Function(
              ffi.Pointer<ma_engine>)>>('ma_engine_get_endpoint');
  late final _ma_engine_get_endpoint = _ma_engine_get_endpointPtr
      .asFunction<ffi.Pointer<ma_node> Function(ffi.Pointer<ma_engine>)>();

  int ma_engine_get_time_in_pcm_frames(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_time_in_pcm_frames(
      pEngine,
    );
  }

  late final _ma_engine_get_time_in_pcm_framesPtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_time_in_pcm_frames');
  late final _ma_engine_get_time_in_pcm_frames =
      _ma_engine_get_time_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_engine>)>();

  int ma_engine_get_time_in_milliseconds(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_time_in_milliseconds(
      pEngine,
    );
  }

  late final _ma_engine_get_time_in_millisecondsPtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_time_in_milliseconds');
  late final _ma_engine_get_time_in_milliseconds =
      _ma_engine_get_time_in_millisecondsPtr
          .asFunction<int Function(ffi.Pointer<ma_engine>)>();

  int ma_engine_set_time_in_pcm_frames(
    ffi.Pointer<ma_engine> pEngine,
    int globalTime,
  ) {
    return _ma_engine_set_time_in_pcm_frames(
      pEngine,
      globalTime,
    );
  }

  late final _ma_engine_set_time_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine>,
              ma_uint64)>>('ma_engine_set_time_in_pcm_frames');
  late final _ma_engine_set_time_in_pcm_frames =
      _ma_engine_set_time_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_engine>, int)>();

  int ma_engine_set_time_in_milliseconds(
    ffi.Pointer<ma_engine> pEngine,
    int globalTime,
  ) {
    return _ma_engine_set_time_in_milliseconds(
      pEngine,
      globalTime,
    );
  }

  late final _ma_engine_set_time_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine>,
              ma_uint64)>>('ma_engine_set_time_in_milliseconds');
  late final _ma_engine_set_time_in_milliseconds =
      _ma_engine_set_time_in_millisecondsPtr
          .asFunction<int Function(ffi.Pointer<ma_engine>, int)>();

  int ma_engine_get_time(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_time(
      pEngine,
    );
  }

  late final _ma_engine_get_timePtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_time');
  late final _ma_engine_get_time =
      _ma_engine_get_timePtr.asFunction<int Function(ffi.Pointer<ma_engine>)>();

  int ma_engine_set_time(
    ffi.Pointer<ma_engine> pEngine,
    int globalTime,
  ) {
    return _ma_engine_set_time(
      pEngine,
      globalTime,
    );
  }

  late final _ma_engine_set_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>, ma_uint64)>>('ma_engine_set_time');
  late final _ma_engine_set_time = _ma_engine_set_timePtr
      .asFunction<int Function(ffi.Pointer<ma_engine>, int)>();

  int ma_engine_get_channels(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_channels(
      pEngine,
    );
  }

  late final _ma_engine_get_channelsPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_channels');
  late final _ma_engine_get_channels = _ma_engine_get_channelsPtr
      .asFunction<int Function(ffi.Pointer<ma_engine>)>();

  int ma_engine_get_sample_rate(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_sample_rate(
      pEngine,
    );
  }

  late final _ma_engine_get_sample_ratePtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_sample_rate');
  late final _ma_engine_get_sample_rate = _ma_engine_get_sample_ratePtr
      .asFunction<int Function(ffi.Pointer<ma_engine>)>();

  int ma_engine_start(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_start(
      pEngine,
    );
  }

  late final _ma_engine_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_start');
  late final _ma_engine_start =
      _ma_engine_startPtr.asFunction<int Function(ffi.Pointer<ma_engine>)>();

  int ma_engine_stop(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_stop(
      pEngine,
    );
  }

  late final _ma_engine_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_stop');
  late final _ma_engine_stop =
      _ma_engine_stopPtr.asFunction<int Function(ffi.Pointer<ma_engine>)>();

  int ma_engine_set_volume(
    ffi.Pointer<ma_engine> pEngine,
    double volume,
  ) {
    return _ma_engine_set_volume(
      pEngine,
      volume,
    );
  }

  late final _ma_engine_set_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>, ffi.Float)>>('ma_engine_set_volume');
  late final _ma_engine_set_volume = _ma_engine_set_volumePtr
      .asFunction<int Function(ffi.Pointer<ma_engine>, double)>();

  double ma_engine_get_volume(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_volume(
      pEngine,
    );
  }

  late final _ma_engine_get_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_volume');
  late final _ma_engine_get_volume = _ma_engine_get_volumePtr
      .asFunction<double Function(ffi.Pointer<ma_engine>)>();

  int ma_engine_set_gain_db(
    ffi.Pointer<ma_engine> pEngine,
    double gainDB,
  ) {
    return _ma_engine_set_gain_db(
      pEngine,
      gainDB,
    );
  }

  late final _ma_engine_set_gain_dbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>, ffi.Float)>>('ma_engine_set_gain_db');
  late final _ma_engine_set_gain_db = _ma_engine_set_gain_dbPtr
      .asFunction<int Function(ffi.Pointer<ma_engine>, double)>();

  double ma_engine_get_gain_db(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_gain_db(
      pEngine,
    );
  }

  late final _ma_engine_get_gain_dbPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_gain_db');
  late final _ma_engine_get_gain_db = _ma_engine_get_gain_dbPtr
      .asFunction<double Function(ffi.Pointer<ma_engine>)>();

  int ma_engine_get_listener_count(
    ffi.Pointer<ma_engine> pEngine,
  ) {
    return _ma_engine_get_listener_count(
      pEngine,
    );
  }

  late final _ma_engine_get_listener_countPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_engine>)>>(
          'ma_engine_get_listener_count');
  late final _ma_engine_get_listener_count = _ma_engine_get_listener_countPtr
      .asFunction<int Function(ffi.Pointer<ma_engine>)>();

  int ma_engine_find_closest_listener(
    ffi.Pointer<ma_engine> pEngine,
    double absolutePosX,
    double absolutePosY,
    double absolutePosZ,
  ) {
    return _ma_engine_find_closest_listener(
      pEngine,
      absolutePosX,
      absolutePosY,
      absolutePosZ,
    );
  }

  late final _ma_engine_find_closest_listenerPtr = _lookup<
      ffi.NativeFunction<
          ma_uint32 Function(ffi.Pointer<ma_engine>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_engine_find_closest_listener');
  late final _ma_engine_find_closest_listener =
      _ma_engine_find_closest_listenerPtr.asFunction<
          int Function(ffi.Pointer<ma_engine>, double, double, double)>();

  void ma_engine_listener_set_position(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    double x,
    double y,
    double z,
  ) {
    return _ma_engine_listener_set_position(
      pEngine,
      listenerIndex,
      x,
      y,
      z,
    );
  }

  late final _ma_engine_listener_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_engine_listener_set_position');
  late final _ma_engine_listener_set_position =
      _ma_engine_listener_set_positionPtr.asFunction<
          void Function(ffi.Pointer<ma_engine>, int, double, double, double)>();

  ma_vec3f ma_engine_listener_get_position(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
  ) {
    return _ma_engine_listener_get_position(
      pEngine,
      listenerIndex,
    );
  }

  late final _ma_engine_listener_get_positionPtr = _lookup<
      ffi.NativeFunction<
          ma_vec3f Function(ffi.Pointer<ma_engine>,
              ma_uint32)>>('ma_engine_listener_get_position');
  late final _ma_engine_listener_get_position =
      _ma_engine_listener_get_positionPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_engine>, int)>();

  void ma_engine_listener_set_direction(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    double x,
    double y,
    double z,
  ) {
    return _ma_engine_listener_set_direction(
      pEngine,
      listenerIndex,
      x,
      y,
      z,
    );
  }

  late final _ma_engine_listener_set_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_engine_listener_set_direction');
  late final _ma_engine_listener_set_direction =
      _ma_engine_listener_set_directionPtr.asFunction<
          void Function(ffi.Pointer<ma_engine>, int, double, double, double)>();

  ma_vec3f ma_engine_listener_get_direction(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
  ) {
    return _ma_engine_listener_get_direction(
      pEngine,
      listenerIndex,
    );
  }

  late final _ma_engine_listener_get_directionPtr = _lookup<
      ffi.NativeFunction<
          ma_vec3f Function(ffi.Pointer<ma_engine>,
              ma_uint32)>>('ma_engine_listener_get_direction');
  late final _ma_engine_listener_get_direction =
      _ma_engine_listener_get_directionPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_engine>, int)>();

  void ma_engine_listener_set_velocity(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    double x,
    double y,
    double z,
  ) {
    return _ma_engine_listener_set_velocity(
      pEngine,
      listenerIndex,
      x,
      y,
      z,
    );
  }

  late final _ma_engine_listener_set_velocityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_engine_listener_set_velocity');
  late final _ma_engine_listener_set_velocity =
      _ma_engine_listener_set_velocityPtr.asFunction<
          void Function(ffi.Pointer<ma_engine>, int, double, double, double)>();

  ma_vec3f ma_engine_listener_get_velocity(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
  ) {
    return _ma_engine_listener_get_velocity(
      pEngine,
      listenerIndex,
    );
  }

  late final _ma_engine_listener_get_velocityPtr = _lookup<
      ffi.NativeFunction<
          ma_vec3f Function(ffi.Pointer<ma_engine>,
              ma_uint32)>>('ma_engine_listener_get_velocity');
  late final _ma_engine_listener_get_velocity =
      _ma_engine_listener_get_velocityPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_engine>, int)>();

  void ma_engine_listener_set_cone(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    double innerAngleInRadians,
    double outerAngleInRadians,
    double outerGain,
  ) {
    return _ma_engine_listener_set_cone(
      pEngine,
      listenerIndex,
      innerAngleInRadians,
      outerAngleInRadians,
      outerGain,
    );
  }

  late final _ma_engine_listener_set_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_engine_listener_set_cone');
  late final _ma_engine_listener_set_cone =
      _ma_engine_listener_set_conePtr.asFunction<
          void Function(ffi.Pointer<ma_engine>, int, double, double, double)>();

  void ma_engine_listener_get_cone(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    ffi.Pointer<ffi.Float> pInnerAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterGain,
  ) {
    return _ma_engine_listener_get_cone(
      pEngine,
      listenerIndex,
      pInnerAngleInRadians,
      pOuterAngleInRadians,
      pOuterGain,
    );
  }

  late final _ma_engine_listener_get_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_engine>,
              ma_uint32,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('ma_engine_listener_get_cone');
  late final _ma_engine_listener_get_cone =
      _ma_engine_listener_get_conePtr.asFunction<
          void Function(ffi.Pointer<ma_engine>, int, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  void ma_engine_listener_set_world_up(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    double x,
    double y,
    double z,
  ) {
    return _ma_engine_listener_set_world_up(
      pEngine,
      listenerIndex,
      x,
      y,
      z,
    );
  }

  late final _ma_engine_listener_set_world_upPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32, ffi.Float,
              ffi.Float, ffi.Float)>>('ma_engine_listener_set_world_up');
  late final _ma_engine_listener_set_world_up =
      _ma_engine_listener_set_world_upPtr.asFunction<
          void Function(ffi.Pointer<ma_engine>, int, double, double, double)>();

  ma_vec3f ma_engine_listener_get_world_up(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
  ) {
    return _ma_engine_listener_get_world_up(
      pEngine,
      listenerIndex,
    );
  }

  late final _ma_engine_listener_get_world_upPtr = _lookup<
      ffi.NativeFunction<
          ma_vec3f Function(ffi.Pointer<ma_engine>,
              ma_uint32)>>('ma_engine_listener_get_world_up');
  late final _ma_engine_listener_get_world_up =
      _ma_engine_listener_get_world_upPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_engine>, int)>();

  void ma_engine_listener_set_enabled(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
    int isEnabled,
  ) {
    return _ma_engine_listener_set_enabled(
      pEngine,
      listenerIndex,
      isEnabled,
    );
  }

  late final _ma_engine_listener_set_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32,
              ma_bool32)>>('ma_engine_listener_set_enabled');
  late final _ma_engine_listener_set_enabled =
      _ma_engine_listener_set_enabledPtr
          .asFunction<void Function(ffi.Pointer<ma_engine>, int, int)>();

  int ma_engine_listener_is_enabled(
    ffi.Pointer<ma_engine> pEngine,
    int listenerIndex,
  ) {
    return _ma_engine_listener_is_enabled(
      pEngine,
      listenerIndex,
    );
  }

  late final _ma_engine_listener_is_enabledPtr = _lookup<
      ffi.NativeFunction<
          ma_bool32 Function(ffi.Pointer<ma_engine>,
              ma_uint32)>>('ma_engine_listener_is_enabled');
  late final _ma_engine_listener_is_enabled = _ma_engine_listener_is_enabledPtr
      .asFunction<int Function(ffi.Pointer<ma_engine>, int)>();

  int ma_engine_play_sound_ex(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_node> pNode,
    int nodeInputBusIndex,
  ) {
    return _ma_engine_play_sound_ex(
      pEngine,
      pFilePath,
      pNode,
      nodeInputBusIndex,
    );
  }

  late final _ma_engine_play_sound_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_node>, ma_uint32)>>('ma_engine_play_sound_ex');
  late final _ma_engine_play_sound_ex = _ma_engine_play_sound_exPtr.asFunction<
      int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ma_node>, int)>();

  int ma_engine_play_sound(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ffi.Char> pFilePath,
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_engine_play_sound(
      pEngine,
      pFilePath,
      pGroup,
    );
  }

  late final _ma_engine_play_soundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_sound_group>)>>('ma_engine_play_sound');
  late final _ma_engine_play_sound = _ma_engine_play_soundPtr.asFunction<
      int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ma_sound_group>)>();

  int ma_sound_init_from_file(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ffi.Char> pFilePath,
    int flags,
    ffi.Pointer<ma_sound_group> pGroup,
    ffi.Pointer<ma_fence> pDoneFence,
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_init_from_file(
      pEngine,
      pFilePath,
      flags,
      pGroup,
      pDoneFence,
      pSound,
    );
  }

  late final _ma_sound_init_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ffi.Char>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_fence>,
              ffi.Pointer<ma_sound>)>>('ma_sound_init_from_file');
  late final _ma_sound_init_from_file = _ma_sound_init_from_filePtr.asFunction<
      int Function(
          ffi.Pointer<ma_engine>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ma_sound_group>,
          ffi.Pointer<ma_fence>,
          ffi.Pointer<ma_sound>)>();

  int ma_sound_init_from_file_w(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ffi.WChar> pFilePath,
    int flags,
    ffi.Pointer<ma_sound_group> pGroup,
    ffi.Pointer<ma_fence> pDoneFence,
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_init_from_file_w(
      pEngine,
      pFilePath,
      flags,
      pGroup,
      pDoneFence,
      pSound,
    );
  }

  late final _ma_sound_init_from_file_wPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ffi.WChar>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_fence>,
              ffi.Pointer<ma_sound>)>>('ma_sound_init_from_file_w');
  late final _ma_sound_init_from_file_w =
      _ma_sound_init_from_file_wPtr.asFunction<
          int Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ffi.WChar>,
              int,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_fence>,
              ffi.Pointer<ma_sound>)>();

  int ma_sound_init_copy(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ma_sound> pExistingSound,
    int flags,
    ffi.Pointer<ma_sound_group> pGroup,
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_init_copy(
      pEngine,
      pExistingSound,
      flags,
      pGroup,
      pSound,
    );
  }

  late final _ma_sound_init_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_sound>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_sound>)>>('ma_sound_init_copy');
  late final _ma_sound_init_copy = _ma_sound_init_copyPtr.asFunction<
      int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ma_sound>, int,
          ffi.Pointer<ma_sound_group>, ffi.Pointer<ma_sound>)>();

  int ma_sound_init_from_data_source(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ma_data_source> pDataSource,
    int flags,
    ffi.Pointer<ma_sound_group> pGroup,
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_init_from_data_source(
      pEngine,
      pDataSource,
      flags,
      pGroup,
      pSound,
    );
  }

  late final _ma_sound_init_from_data_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_data_source>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_sound>)>>('ma_sound_init_from_data_source');
  late final _ma_sound_init_from_data_source =
      _ma_sound_init_from_data_sourcePtr.asFunction<
          int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ma_data_source>, int,
              ffi.Pointer<ma_sound_group>, ffi.Pointer<ma_sound>)>();

  int ma_sound_init_ex(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ma_sound_config> pConfig,
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_init_ex(
      pEngine,
      pConfig,
      pSound,
    );
  }

  late final _ma_sound_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_sound_config>,
              ffi.Pointer<ma_sound>)>>('ma_sound_init_ex');
  late final _ma_sound_init_ex = _ma_sound_init_exPtr.asFunction<
      int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ma_sound_config>,
          ffi.Pointer<ma_sound>)>();

  void ma_sound_uninit(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_uninit(
      pSound,
    );
  }

  late final _ma_sound_uninitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_uninit');
  late final _ma_sound_uninit =
      _ma_sound_uninitPtr.asFunction<void Function(ffi.Pointer<ma_sound>)>();

  ffi.Pointer<ma_engine> ma_sound_get_engine(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_engine(
      pSound,
    );
  }

  late final _ma_sound_get_enginePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_engine> Function(
              ffi.Pointer<ma_sound>)>>('ma_sound_get_engine');
  late final _ma_sound_get_engine = _ma_sound_get_enginePtr
      .asFunction<ffi.Pointer<ma_engine> Function(ffi.Pointer<ma_sound>)>();

  ffi.Pointer<ma_data_source> ma_sound_get_data_source(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_data_source(
      pSound,
    );
  }

  late final _ma_sound_get_data_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_data_source> Function(
              ffi.Pointer<ma_sound>)>>('ma_sound_get_data_source');
  late final _ma_sound_get_data_source =
      _ma_sound_get_data_sourcePtr.asFunction<
          ffi.Pointer<ma_data_source> Function(ffi.Pointer<ma_sound>)>();

  int ma_sound_start(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_start(
      pSound,
    );
  }

  late final _ma_sound_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_start');
  late final _ma_sound_start =
      _ma_sound_startPtr.asFunction<int Function(ffi.Pointer<ma_sound>)>();

  int ma_sound_stop(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_stop(
      pSound,
    );
  }

  late final _ma_sound_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_stop');
  late final _ma_sound_stop =
      _ma_sound_stopPtr.asFunction<int Function(ffi.Pointer<ma_sound>)>();

  int ma_sound_stop_with_fade_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    int fadeLengthInFrames,
  ) {
    return _ma_sound_stop_with_fade_in_pcm_frames(
      pSound,
      fadeLengthInFrames,
    );
  }

  late final _ma_sound_stop_with_fade_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>,
              ma_uint64)>>('ma_sound_stop_with_fade_in_pcm_frames');
  late final _ma_sound_stop_with_fade_in_pcm_frames =
      _ma_sound_stop_with_fade_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>, int)>();

  int ma_sound_stop_with_fade_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
    int fadeLengthInFrames,
  ) {
    return _ma_sound_stop_with_fade_in_milliseconds(
      pSound,
      fadeLengthInFrames,
    );
  }

  late final _ma_sound_stop_with_fade_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>,
              ma_uint64)>>('ma_sound_stop_with_fade_in_milliseconds');
  late final _ma_sound_stop_with_fade_in_milliseconds =
      _ma_sound_stop_with_fade_in_millisecondsPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>, int)>();

  void ma_sound_set_volume(
    ffi.Pointer<ma_sound> pSound,
    double volume,
  ) {
    return _ma_sound_set_volume(
      pSound,
      volume,
    );
  }

  late final _ma_sound_set_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>, ffi.Float)>>('ma_sound_set_volume');
  late final _ma_sound_set_volume = _ma_sound_set_volumePtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>();

  double ma_sound_get_volume(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_volume(
      pSound,
    );
  }

  late final _ma_sound_get_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_volume');
  late final _ma_sound_get_volume = _ma_sound_get_volumePtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_pan(
    ffi.Pointer<ma_sound> pSound,
    double pan,
  ) {
    return _ma_sound_set_pan(
      pSound,
      pan,
    );
  }

  late final _ma_sound_set_panPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>, ffi.Float)>>('ma_sound_set_pan');
  late final _ma_sound_set_pan = _ma_sound_set_panPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>();

  double ma_sound_get_pan(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_pan(
      pSound,
    );
  }

  late final _ma_sound_get_panPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_pan');
  late final _ma_sound_get_pan =
      _ma_sound_get_panPtr.asFunction<double Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_pan_mode(
    ffi.Pointer<ma_sound> pSound,
    int panMode,
  ) {
    return _ma_sound_set_pan_mode(
      pSound,
      panMode,
    );
  }

  late final _ma_sound_set_pan_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>, ffi.Int32)>>('ma_sound_set_pan_mode');
  late final _ma_sound_set_pan_mode = _ma_sound_set_pan_modePtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, int)>();

  int ma_sound_get_pan_mode(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_pan_mode(
      pSound,
    );
  }

  late final _ma_sound_get_pan_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_pan_mode');
  late final _ma_sound_get_pan_mode = _ma_sound_get_pan_modePtr
      .asFunction<int Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_pitch(
    ffi.Pointer<ma_sound> pSound,
    double pitch,
  ) {
    return _ma_sound_set_pitch(
      pSound,
      pitch,
    );
  }

  late final _ma_sound_set_pitchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>, ffi.Float)>>('ma_sound_set_pitch');
  late final _ma_sound_set_pitch = _ma_sound_set_pitchPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>();

  double ma_sound_get_pitch(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_pitch(
      pSound,
    );
  }

  late final _ma_sound_get_pitchPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_pitch');
  late final _ma_sound_get_pitch = _ma_sound_get_pitchPtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_spatialization_enabled(
    ffi.Pointer<ma_sound> pSound,
    int enabled,
  ) {
    return _ma_sound_set_spatialization_enabled(
      pSound,
      enabled,
    );
  }

  late final _ma_sound_set_spatialization_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>,
              ma_bool32)>>('ma_sound_set_spatialization_enabled');
  late final _ma_sound_set_spatialization_enabled =
      _ma_sound_set_spatialization_enabledPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>();

  int ma_sound_is_spatialization_enabled(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_is_spatialization_enabled(
      pSound,
    );
  }

  late final _ma_sound_is_spatialization_enabledPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_is_spatialization_enabled');
  late final _ma_sound_is_spatialization_enabled =
      _ma_sound_is_spatialization_enabledPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_pinned_listener_index(
    ffi.Pointer<ma_sound> pSound,
    int listenerIndex,
  ) {
    return _ma_sound_set_pinned_listener_index(
      pSound,
      listenerIndex,
    );
  }

  late final _ma_sound_set_pinned_listener_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>,
              ma_uint32)>>('ma_sound_set_pinned_listener_index');
  late final _ma_sound_set_pinned_listener_index =
      _ma_sound_set_pinned_listener_indexPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>();

  int ma_sound_get_pinned_listener_index(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_pinned_listener_index(
      pSound,
    );
  }

  late final _ma_sound_get_pinned_listener_indexPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_pinned_listener_index');
  late final _ma_sound_get_pinned_listener_index =
      _ma_sound_get_pinned_listener_indexPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>)>();

  int ma_sound_get_listener_index(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_listener_index(
      pSound,
    );
  }

  late final _ma_sound_get_listener_indexPtr =
      _lookup<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_listener_index');
  late final _ma_sound_get_listener_index = _ma_sound_get_listener_indexPtr
      .asFunction<int Function(ffi.Pointer<ma_sound>)>();

  ma_vec3f ma_sound_get_direction_to_listener(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_direction_to_listener(
      pSound,
    );
  }

  late final _ma_sound_get_direction_to_listenerPtr =
      _lookup<ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_direction_to_listener');
  late final _ma_sound_get_direction_to_listener =
      _ma_sound_get_direction_to_listenerPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_position(
    ffi.Pointer<ma_sound> pSound,
    double x,
    double y,
    double z,
  ) {
    return _ma_sound_set_position(
      pSound,
      x,
      y,
      z,
    );
  }

  late final _ma_sound_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_set_position');
  late final _ma_sound_set_position = _ma_sound_set_positionPtr.asFunction<
      void Function(ffi.Pointer<ma_sound>, double, double, double)>();

  ma_vec3f ma_sound_get_position(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_position(
      pSound,
    );
  }

  late final _ma_sound_get_positionPtr =
      _lookup<ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_position');
  late final _ma_sound_get_position = _ma_sound_get_positionPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_direction(
    ffi.Pointer<ma_sound> pSound,
    double x,
    double y,
    double z,
  ) {
    return _ma_sound_set_direction(
      pSound,
      x,
      y,
      z,
    );
  }

  late final _ma_sound_set_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_set_direction');
  late final _ma_sound_set_direction = _ma_sound_set_directionPtr.asFunction<
      void Function(ffi.Pointer<ma_sound>, double, double, double)>();

  ma_vec3f ma_sound_get_direction(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_direction(
      pSound,
    );
  }

  late final _ma_sound_get_directionPtr =
      _lookup<ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_direction');
  late final _ma_sound_get_direction = _ma_sound_get_directionPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_velocity(
    ffi.Pointer<ma_sound> pSound,
    double x,
    double y,
    double z,
  ) {
    return _ma_sound_set_velocity(
      pSound,
      x,
      y,
      z,
    );
  }

  late final _ma_sound_set_velocityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_set_velocity');
  late final _ma_sound_set_velocity = _ma_sound_set_velocityPtr.asFunction<
      void Function(ffi.Pointer<ma_sound>, double, double, double)>();

  ma_vec3f ma_sound_get_velocity(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_velocity(
      pSound,
    );
  }

  late final _ma_sound_get_velocityPtr =
      _lookup<ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_velocity');
  late final _ma_sound_get_velocity = _ma_sound_get_velocityPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_attenuation_model(
    ffi.Pointer<ma_sound> pSound,
    int attenuationModel,
  ) {
    return _ma_sound_set_attenuation_model(
      pSound,
      attenuationModel,
    );
  }

  late final _ma_sound_set_attenuation_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>,
              ffi.Int32)>>('ma_sound_set_attenuation_model');
  late final _ma_sound_set_attenuation_model =
      _ma_sound_set_attenuation_modelPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>();

  int ma_sound_get_attenuation_model(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_attenuation_model(
      pSound,
    );
  }

  late final _ma_sound_get_attenuation_modelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_attenuation_model');
  late final _ma_sound_get_attenuation_model =
      _ma_sound_get_attenuation_modelPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_positioning(
    ffi.Pointer<ma_sound> pSound,
    int positioning,
  ) {
    return _ma_sound_set_positioning(
      pSound,
      positioning,
    );
  }

  late final _ma_sound_set_positioningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>, ffi.Int32)>>('ma_sound_set_positioning');
  late final _ma_sound_set_positioning = _ma_sound_set_positioningPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, int)>();

  int ma_sound_get_positioning(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_positioning(
      pSound,
    );
  }

  late final _ma_sound_get_positioningPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_positioning');
  late final _ma_sound_get_positioning = _ma_sound_get_positioningPtr
      .asFunction<int Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_rolloff(
    ffi.Pointer<ma_sound> pSound,
    double rolloff,
  ) {
    return _ma_sound_set_rolloff(
      pSound,
      rolloff,
    );
  }

  late final _ma_sound_set_rolloffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>, ffi.Float)>>('ma_sound_set_rolloff');
  late final _ma_sound_set_rolloff = _ma_sound_set_rolloffPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>();

  double ma_sound_get_rolloff(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_rolloff(
      pSound,
    );
  }

  late final _ma_sound_get_rolloffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_rolloff');
  late final _ma_sound_get_rolloff = _ma_sound_get_rolloffPtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_min_gain(
    ffi.Pointer<ma_sound> pSound,
    double minGain,
  ) {
    return _ma_sound_set_min_gain(
      pSound,
      minGain,
    );
  }

  late final _ma_sound_set_min_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>, ffi.Float)>>('ma_sound_set_min_gain');
  late final _ma_sound_set_min_gain = _ma_sound_set_min_gainPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>();

  double ma_sound_get_min_gain(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_min_gain(
      pSound,
    );
  }

  late final _ma_sound_get_min_gainPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_min_gain');
  late final _ma_sound_get_min_gain = _ma_sound_get_min_gainPtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_max_gain(
    ffi.Pointer<ma_sound> pSound,
    double maxGain,
  ) {
    return _ma_sound_set_max_gain(
      pSound,
      maxGain,
    );
  }

  late final _ma_sound_set_max_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>, ffi.Float)>>('ma_sound_set_max_gain');
  late final _ma_sound_set_max_gain = _ma_sound_set_max_gainPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>();

  double ma_sound_get_max_gain(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_max_gain(
      pSound,
    );
  }

  late final _ma_sound_get_max_gainPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_max_gain');
  late final _ma_sound_get_max_gain = _ma_sound_get_max_gainPtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_min_distance(
    ffi.Pointer<ma_sound> pSound,
    double minDistance,
  ) {
    return _ma_sound_set_min_distance(
      pSound,
      minDistance,
    );
  }

  late final _ma_sound_set_min_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>, ffi.Float)>>('ma_sound_set_min_distance');
  late final _ma_sound_set_min_distance = _ma_sound_set_min_distancePtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>();

  double ma_sound_get_min_distance(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_min_distance(
      pSound,
    );
  }

  late final _ma_sound_get_min_distancePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_min_distance');
  late final _ma_sound_get_min_distance = _ma_sound_get_min_distancePtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_max_distance(
    ffi.Pointer<ma_sound> pSound,
    double maxDistance,
  ) {
    return _ma_sound_set_max_distance(
      pSound,
      maxDistance,
    );
  }

  late final _ma_sound_set_max_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>, ffi.Float)>>('ma_sound_set_max_distance');
  late final _ma_sound_set_max_distance = _ma_sound_set_max_distancePtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>();

  double ma_sound_get_max_distance(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_max_distance(
      pSound,
    );
  }

  late final _ma_sound_get_max_distancePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_max_distance');
  late final _ma_sound_get_max_distance = _ma_sound_get_max_distancePtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_cone(
    ffi.Pointer<ma_sound> pSound,
    double innerAngleInRadians,
    double outerAngleInRadians,
    double outerGain,
  ) {
    return _ma_sound_set_cone(
      pSound,
      innerAngleInRadians,
      outerAngleInRadians,
      outerGain,
    );
  }

  late final _ma_sound_set_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_set_cone');
  late final _ma_sound_set_cone = _ma_sound_set_conePtr.asFunction<
      void Function(ffi.Pointer<ma_sound>, double, double, double)>();

  void ma_sound_get_cone(
    ffi.Pointer<ma_sound> pSound,
    ffi.Pointer<ffi.Float> pInnerAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterGain,
  ) {
    return _ma_sound_get_cone(
      pSound,
      pInnerAngleInRadians,
      pOuterAngleInRadians,
      pOuterGain,
    );
  }

  late final _ma_sound_get_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('ma_sound_get_cone');
  late final _ma_sound_get_cone = _ma_sound_get_conePtr.asFunction<
      void Function(ffi.Pointer<ma_sound>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  void ma_sound_set_doppler_factor(
    ffi.Pointer<ma_sound> pSound,
    double dopplerFactor,
  ) {
    return _ma_sound_set_doppler_factor(
      pSound,
      dopplerFactor,
    );
  }

  late final _ma_sound_set_doppler_factorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>,
              ffi.Float)>>('ma_sound_set_doppler_factor');
  late final _ma_sound_set_doppler_factor = _ma_sound_set_doppler_factorPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, double)>();

  double ma_sound_get_doppler_factor(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_doppler_factor(
      pSound,
    );
  }

  late final _ma_sound_get_doppler_factorPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_doppler_factor');
  late final _ma_sound_get_doppler_factor = _ma_sound_get_doppler_factorPtr
      .asFunction<double Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_directional_attenuation_factor(
    ffi.Pointer<ma_sound> pSound,
    double directionalAttenuationFactor,
  ) {
    return _ma_sound_set_directional_attenuation_factor(
      pSound,
      directionalAttenuationFactor,
    );
  }

  late final _ma_sound_set_directional_attenuation_factorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>,
              ffi.Float)>>('ma_sound_set_directional_attenuation_factor');
  late final _ma_sound_set_directional_attenuation_factor =
      _ma_sound_set_directional_attenuation_factorPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, double)>();

  double ma_sound_get_directional_attenuation_factor(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_directional_attenuation_factor(
      pSound,
    );
  }

  late final _ma_sound_get_directional_attenuation_factorPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_directional_attenuation_factor');
  late final _ma_sound_get_directional_attenuation_factor =
      _ma_sound_get_directional_attenuation_factorPtr
          .asFunction<double Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_fade_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    double volumeBeg,
    double volumeEnd,
    int fadeLengthInFrames,
  ) {
    return _ma_sound_set_fade_in_pcm_frames(
      pSound,
      volumeBeg,
      volumeEnd,
      fadeLengthInFrames,
    );
  }

  late final _ma_sound_set_fade_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ma_uint64)>>('ma_sound_set_fade_in_pcm_frames');
  late final _ma_sound_set_fade_in_pcm_frames =
      _ma_sound_set_fade_in_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ma_sound>, double, double, int)>();

  void ma_sound_set_fade_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
    double volumeBeg,
    double volumeEnd,
    int fadeLengthInMilliseconds,
  ) {
    return _ma_sound_set_fade_in_milliseconds(
      pSound,
      volumeBeg,
      volumeEnd,
      fadeLengthInMilliseconds,
    );
  }

  late final _ma_sound_set_fade_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ma_uint64)>>('ma_sound_set_fade_in_milliseconds');
  late final _ma_sound_set_fade_in_milliseconds =
      _ma_sound_set_fade_in_millisecondsPtr.asFunction<
          void Function(ffi.Pointer<ma_sound>, double, double, int)>();

  void ma_sound_set_fade_start_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    double volumeBeg,
    double volumeEnd,
    int fadeLengthInFrames,
    int absoluteGlobalTimeInFrames,
  ) {
    return _ma_sound_set_fade_start_in_pcm_frames(
      pSound,
      volumeBeg,
      volumeEnd,
      fadeLengthInFrames,
      absoluteGlobalTimeInFrames,
    );
  }

  late final _ma_sound_set_fade_start_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float, ffi.Float,
              ma_uint64, ma_uint64)>>('ma_sound_set_fade_start_in_pcm_frames');
  late final _ma_sound_set_fade_start_in_pcm_frames =
      _ma_sound_set_fade_start_in_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ma_sound>, double, double, int, int)>();

  void ma_sound_set_fade_start_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
    double volumeBeg,
    double volumeEnd,
    int fadeLengthInMilliseconds,
    int absoluteGlobalTimeInMilliseconds,
  ) {
    return _ma_sound_set_fade_start_in_milliseconds(
      pSound,
      volumeBeg,
      volumeEnd,
      fadeLengthInMilliseconds,
      absoluteGlobalTimeInMilliseconds,
    );
  }

  late final _ma_sound_set_fade_start_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>,
              ffi.Float,
              ffi.Float,
              ma_uint64,
              ma_uint64)>>('ma_sound_set_fade_start_in_milliseconds');
  late final _ma_sound_set_fade_start_in_milliseconds =
      _ma_sound_set_fade_start_in_millisecondsPtr.asFunction<
          void Function(ffi.Pointer<ma_sound>, double, double, int, int)>();

  double ma_sound_get_current_fade_volume(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_current_fade_volume(
      pSound,
    );
  }

  late final _ma_sound_get_current_fade_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_current_fade_volume');
  late final _ma_sound_get_current_fade_volume =
      _ma_sound_get_current_fade_volumePtr
          .asFunction<double Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_start_time_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    int absoluteGlobalTimeInFrames,
  ) {
    return _ma_sound_set_start_time_in_pcm_frames(
      pSound,
      absoluteGlobalTimeInFrames,
    );
  }

  late final _ma_sound_set_start_time_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>,
              ma_uint64)>>('ma_sound_set_start_time_in_pcm_frames');
  late final _ma_sound_set_start_time_in_pcm_frames =
      _ma_sound_set_start_time_in_pcm_framesPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>();

  void ma_sound_set_start_time_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
    int absoluteGlobalTimeInMilliseconds,
  ) {
    return _ma_sound_set_start_time_in_milliseconds(
      pSound,
      absoluteGlobalTimeInMilliseconds,
    );
  }

  late final _ma_sound_set_start_time_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>,
              ma_uint64)>>('ma_sound_set_start_time_in_milliseconds');
  late final _ma_sound_set_start_time_in_milliseconds =
      _ma_sound_set_start_time_in_millisecondsPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>();

  void ma_sound_set_stop_time_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    int absoluteGlobalTimeInFrames,
  ) {
    return _ma_sound_set_stop_time_in_pcm_frames(
      pSound,
      absoluteGlobalTimeInFrames,
    );
  }

  late final _ma_sound_set_stop_time_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>,
              ma_uint64)>>('ma_sound_set_stop_time_in_pcm_frames');
  late final _ma_sound_set_stop_time_in_pcm_frames =
      _ma_sound_set_stop_time_in_pcm_framesPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>();

  void ma_sound_set_stop_time_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
    int absoluteGlobalTimeInMilliseconds,
  ) {
    return _ma_sound_set_stop_time_in_milliseconds(
      pSound,
      absoluteGlobalTimeInMilliseconds,
    );
  }

  late final _ma_sound_set_stop_time_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>,
              ma_uint64)>>('ma_sound_set_stop_time_in_milliseconds');
  late final _ma_sound_set_stop_time_in_milliseconds =
      _ma_sound_set_stop_time_in_millisecondsPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int)>();

  void ma_sound_set_stop_time_with_fade_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    int stopAbsoluteGlobalTimeInFrames,
    int fadeLengthInFrames,
  ) {
    return _ma_sound_set_stop_time_with_fade_in_pcm_frames(
      pSound,
      stopAbsoluteGlobalTimeInFrames,
      fadeLengthInFrames,
    );
  }

  late final _ma_sound_set_stop_time_with_fade_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64,
              ma_uint64)>>('ma_sound_set_stop_time_with_fade_in_pcm_frames');
  late final _ma_sound_set_stop_time_with_fade_in_pcm_frames =
      _ma_sound_set_stop_time_with_fade_in_pcm_framesPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int, int)>();

  void ma_sound_set_stop_time_with_fade_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
    int stopAbsoluteGlobalTimeInMilliseconds,
    int fadeLengthInMilliseconds,
  ) {
    return _ma_sound_set_stop_time_with_fade_in_milliseconds(
      pSound,
      stopAbsoluteGlobalTimeInMilliseconds,
      fadeLengthInMilliseconds,
    );
  }

  late final _ma_sound_set_stop_time_with_fade_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64,
              ma_uint64)>>('ma_sound_set_stop_time_with_fade_in_milliseconds');
  late final _ma_sound_set_stop_time_with_fade_in_milliseconds =
      _ma_sound_set_stop_time_with_fade_in_millisecondsPtr
          .asFunction<void Function(ffi.Pointer<ma_sound>, int, int)>();

  int ma_sound_is_playing(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_is_playing(
      pSound,
    );
  }

  late final _ma_sound_is_playingPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_is_playing');
  late final _ma_sound_is_playing =
      _ma_sound_is_playingPtr.asFunction<int Function(ffi.Pointer<ma_sound>)>();

  int ma_sound_get_time_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_time_in_pcm_frames(
      pSound,
    );
  }

  late final _ma_sound_get_time_in_pcm_framesPtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_time_in_pcm_frames');
  late final _ma_sound_get_time_in_pcm_frames =
      _ma_sound_get_time_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>)>();

  int ma_sound_get_time_in_milliseconds(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_get_time_in_milliseconds(
      pSound,
    );
  }

  late final _ma_sound_get_time_in_millisecondsPtr =
      _lookup<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_get_time_in_milliseconds');
  late final _ma_sound_get_time_in_milliseconds =
      _ma_sound_get_time_in_millisecondsPtr
          .asFunction<int Function(ffi.Pointer<ma_sound>)>();

  void ma_sound_set_looping(
    ffi.Pointer<ma_sound> pSound,
    int isLooping,
  ) {
    return _ma_sound_set_looping(
      pSound,
      isLooping,
    );
  }

  late final _ma_sound_set_loopingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>, ma_bool32)>>('ma_sound_set_looping');
  late final _ma_sound_set_looping = _ma_sound_set_loopingPtr
      .asFunction<void Function(ffi.Pointer<ma_sound>, int)>();

  int ma_sound_is_looping(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_is_looping(
      pSound,
    );
  }

  late final _ma_sound_is_loopingPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_is_looping');
  late final _ma_sound_is_looping =
      _ma_sound_is_loopingPtr.asFunction<int Function(ffi.Pointer<ma_sound>)>();

  int ma_sound_at_end(
    ffi.Pointer<ma_sound> pSound,
  ) {
    return _ma_sound_at_end(
      pSound,
    );
  }

  late final _ma_sound_at_endPtr =
      _lookup<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound>)>>(
          'ma_sound_at_end');
  late final _ma_sound_at_end =
      _ma_sound_at_endPtr.asFunction<int Function(ffi.Pointer<ma_sound>)>();

  int ma_sound_seek_to_pcm_frame(
    ffi.Pointer<ma_sound> pSound,
    int frameIndex,
  ) {
    return _ma_sound_seek_to_pcm_frame(
      pSound,
      frameIndex,
    );
  }

  late final _ma_sound_seek_to_pcm_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_sound>, ma_uint64)>>('ma_sound_seek_to_pcm_frame');
  late final _ma_sound_seek_to_pcm_frame = _ma_sound_seek_to_pcm_framePtr
      .asFunction<int Function(ffi.Pointer<ma_sound>, int)>();

  int ma_sound_get_data_format(
    ffi.Pointer<ma_sound> pSound,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ma_uint32> pChannels,
    ffi.Pointer<ma_uint32> pSampleRate,
    ffi.Pointer<ma_channel> pChannelMap,
    int channelMapCap,
  ) {
    return _ma_sound_get_data_format(
      pSound,
      pFormat,
      pChannels,
      pSampleRate,
      pChannelMap,
      channelMapCap,
    );
  }

  late final _ma_sound_get_data_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_sound>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>>('ma_sound_get_data_format');
  late final _ma_sound_get_data_format =
      _ma_sound_get_data_formatPtr.asFunction<
          int Function(
              ffi.Pointer<ma_sound>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              int)>();

  int ma_sound_get_cursor_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    ffi.Pointer<ma_uint64> pCursor,
  ) {
    return _ma_sound_get_cursor_in_pcm_frames(
      pSound,
      pCursor,
    );
  }

  late final _ma_sound_get_cursor_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>,
              ffi.Pointer<ma_uint64>)>>('ma_sound_get_cursor_in_pcm_frames');
  late final _ma_sound_get_cursor_in_pcm_frames =
      _ma_sound_get_cursor_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_sound>, ffi.Pointer<ma_uint64>)>();

  int ma_sound_get_length_in_pcm_frames(
    ffi.Pointer<ma_sound> pSound,
    ffi.Pointer<ma_uint64> pLength,
  ) {
    return _ma_sound_get_length_in_pcm_frames(
      pSound,
      pLength,
    );
  }

  late final _ma_sound_get_length_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>,
              ffi.Pointer<ma_uint64>)>>('ma_sound_get_length_in_pcm_frames');
  late final _ma_sound_get_length_in_pcm_frames =
      _ma_sound_get_length_in_pcm_framesPtr.asFunction<
          int Function(ffi.Pointer<ma_sound>, ffi.Pointer<ma_uint64>)>();

  int ma_sound_get_cursor_in_seconds(
    ffi.Pointer<ma_sound> pSound,
    ffi.Pointer<ffi.Float> pCursor,
  ) {
    return _ma_sound_get_cursor_in_seconds(
      pSound,
      pCursor,
    );
  }

  late final _ma_sound_get_cursor_in_secondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>,
              ffi.Pointer<ffi.Float>)>>('ma_sound_get_cursor_in_seconds');
  late final _ma_sound_get_cursor_in_seconds =
      _ma_sound_get_cursor_in_secondsPtr.asFunction<
          int Function(ffi.Pointer<ma_sound>, ffi.Pointer<ffi.Float>)>();

  int ma_sound_get_length_in_seconds(
    ffi.Pointer<ma_sound> pSound,
    ffi.Pointer<ffi.Float> pLength,
  ) {
    return _ma_sound_get_length_in_seconds(
      pSound,
      pLength,
    );
  }

  late final _ma_sound_get_length_in_secondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>,
              ffi.Pointer<ffi.Float>)>>('ma_sound_get_length_in_seconds');
  late final _ma_sound_get_length_in_seconds =
      _ma_sound_get_length_in_secondsPtr.asFunction<
          int Function(ffi.Pointer<ma_sound>, ffi.Pointer<ffi.Float>)>();

  int ma_sound_set_end_callback(
    ffi.Pointer<ma_sound> pSound,
    ma_sound_end_proc callback,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _ma_sound_set_end_callback(
      pSound,
      callback,
      pUserData,
    );
  }

  late final _ma_sound_set_end_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>, ma_sound_end_proc,
              ffi.Pointer<ffi.Void>)>>('ma_sound_set_end_callback');
  late final _ma_sound_set_end_callback =
      _ma_sound_set_end_callbackPtr.asFunction<
          int Function(ffi.Pointer<ma_sound>, ma_sound_end_proc,
              ffi.Pointer<ffi.Void>)>();

  int ma_sound_group_init(
    ffi.Pointer<ma_engine> pEngine,
    int flags,
    ffi.Pointer<ma_sound_group> pParentGroup,
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_init(
      pEngine,
      flags,
      pParentGroup,
      pGroup,
    );
  }

  late final _ma_sound_group_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_sound_group>)>>('ma_sound_group_init');
  late final _ma_sound_group_init = _ma_sound_group_initPtr.asFunction<
      int Function(ffi.Pointer<ma_engine>, int, ffi.Pointer<ma_sound_group>,
          ffi.Pointer<ma_sound_group>)>();

  int ma_sound_group_init_ex(
    ffi.Pointer<ma_engine> pEngine,
    ffi.Pointer<ma_sound_group_config> pConfig,
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_init_ex(
      pEngine,
      pConfig,
      pGroup,
    );
  }

  late final _ma_sound_group_init_exPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_sound_group_config>,
              ffi.Pointer<ma_sound_group>)>>('ma_sound_group_init_ex');
  late final _ma_sound_group_init_ex = _ma_sound_group_init_exPtr.asFunction<
      int Function(ffi.Pointer<ma_engine>, ffi.Pointer<ma_sound_group_config>,
          ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_uninit(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_uninit(
      pGroup,
    );
  }

  late final _ma_sound_group_uninitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_uninit');
  late final _ma_sound_group_uninit = _ma_sound_group_uninitPtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>)>();

  ffi.Pointer<ma_engine> ma_sound_group_get_engine(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_engine(
      pGroup,
    );
  }

  late final _ma_sound_group_get_enginePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ma_engine> Function(
              ffi.Pointer<ma_sound_group>)>>('ma_sound_group_get_engine');
  late final _ma_sound_group_get_engine =
      _ma_sound_group_get_enginePtr.asFunction<
          ffi.Pointer<ma_engine> Function(ffi.Pointer<ma_sound_group>)>();

  int ma_sound_group_start(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_start(
      pGroup,
    );
  }

  late final _ma_sound_group_startPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_start');
  late final _ma_sound_group_start = _ma_sound_group_startPtr
      .asFunction<int Function(ffi.Pointer<ma_sound_group>)>();

  int ma_sound_group_stop(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_stop(
      pGroup,
    );
  }

  late final _ma_sound_group_stopPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_stop');
  late final _ma_sound_group_stop = _ma_sound_group_stopPtr
      .asFunction<int Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_volume(
    ffi.Pointer<ma_sound_group> pGroup,
    double volume,
  ) {
    return _ma_sound_group_set_volume(
      pGroup,
      volume,
    );
  }

  late final _ma_sound_group_set_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_volume');
  late final _ma_sound_group_set_volume = _ma_sound_group_set_volumePtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>();

  double ma_sound_group_get_volume(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_volume(
      pGroup,
    );
  }

  late final _ma_sound_group_get_volumePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_volume');
  late final _ma_sound_group_get_volume = _ma_sound_group_get_volumePtr
      .asFunction<double Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_pan(
    ffi.Pointer<ma_sound_group> pGroup,
    double pan,
  ) {
    return _ma_sound_group_set_pan(
      pGroup,
      pan,
    );
  }

  late final _ma_sound_group_set_panPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_pan');
  late final _ma_sound_group_set_pan = _ma_sound_group_set_panPtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>();

  double ma_sound_group_get_pan(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_pan(
      pGroup,
    );
  }

  late final _ma_sound_group_get_panPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_pan');
  late final _ma_sound_group_get_pan = _ma_sound_group_get_panPtr
      .asFunction<double Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_pan_mode(
    ffi.Pointer<ma_sound_group> pGroup,
    int panMode,
  ) {
    return _ma_sound_group_set_pan_mode(
      pGroup,
      panMode,
    );
  }

  late final _ma_sound_group_set_pan_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Int32)>>('ma_sound_group_set_pan_mode');
  late final _ma_sound_group_set_pan_mode = _ma_sound_group_set_pan_modePtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>();

  int ma_sound_group_get_pan_mode(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_pan_mode(
      pGroup,
    );
  }

  late final _ma_sound_group_get_pan_modePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_pan_mode');
  late final _ma_sound_group_get_pan_mode = _ma_sound_group_get_pan_modePtr
      .asFunction<int Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_pitch(
    ffi.Pointer<ma_sound_group> pGroup,
    double pitch,
  ) {
    return _ma_sound_group_set_pitch(
      pGroup,
      pitch,
    );
  }

  late final _ma_sound_group_set_pitchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_pitch');
  late final _ma_sound_group_set_pitch = _ma_sound_group_set_pitchPtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>();

  double ma_sound_group_get_pitch(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_pitch(
      pGroup,
    );
  }

  late final _ma_sound_group_get_pitchPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_pitch');
  late final _ma_sound_group_get_pitch = _ma_sound_group_get_pitchPtr
      .asFunction<double Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_spatialization_enabled(
    ffi.Pointer<ma_sound_group> pGroup,
    int enabled,
  ) {
    return _ma_sound_group_set_spatialization_enabled(
      pGroup,
      enabled,
    );
  }

  late final _ma_sound_group_set_spatialization_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ma_bool32)>>('ma_sound_group_set_spatialization_enabled');
  late final _ma_sound_group_set_spatialization_enabled =
      _ma_sound_group_set_spatialization_enabledPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>();

  int ma_sound_group_is_spatialization_enabled(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_is_spatialization_enabled(
      pGroup,
    );
  }

  late final _ma_sound_group_is_spatialization_enabledPtr = _lookup<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_is_spatialization_enabled');
  late final _ma_sound_group_is_spatialization_enabled =
      _ma_sound_group_is_spatialization_enabledPtr
          .asFunction<int Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_pinned_listener_index(
    ffi.Pointer<ma_sound_group> pGroup,
    int listenerIndex,
  ) {
    return _ma_sound_group_set_pinned_listener_index(
      pGroup,
      listenerIndex,
    );
  }

  late final _ma_sound_group_set_pinned_listener_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ma_uint32)>>('ma_sound_group_set_pinned_listener_index');
  late final _ma_sound_group_set_pinned_listener_index =
      _ma_sound_group_set_pinned_listener_indexPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>();

  int ma_sound_group_get_pinned_listener_index(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_pinned_listener_index(
      pGroup,
    );
  }

  late final _ma_sound_group_get_pinned_listener_indexPtr = _lookup<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_pinned_listener_index');
  late final _ma_sound_group_get_pinned_listener_index =
      _ma_sound_group_get_pinned_listener_indexPtr
          .asFunction<int Function(ffi.Pointer<ma_sound_group>)>();

  int ma_sound_group_get_listener_index(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_listener_index(
      pGroup,
    );
  }

  late final _ma_sound_group_get_listener_indexPtr = _lookup<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_listener_index');
  late final _ma_sound_group_get_listener_index =
      _ma_sound_group_get_listener_indexPtr
          .asFunction<int Function(ffi.Pointer<ma_sound_group>)>();

  ma_vec3f ma_sound_group_get_direction_to_listener(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_direction_to_listener(
      pGroup,
    );
  }

  late final _ma_sound_group_get_direction_to_listenerPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_direction_to_listener');
  late final _ma_sound_group_get_direction_to_listener =
      _ma_sound_group_get_direction_to_listenerPtr
          .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_position(
    ffi.Pointer<ma_sound_group> pGroup,
    double x,
    double y,
    double z,
  ) {
    return _ma_sound_group_set_position(
      pGroup,
      x,
      y,
      z,
    );
  }

  late final _ma_sound_group_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_group_set_position');
  late final _ma_sound_group_set_position =
      _ma_sound_group_set_positionPtr.asFunction<
          void Function(ffi.Pointer<ma_sound_group>, double, double, double)>();

  ma_vec3f ma_sound_group_get_position(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_position(
      pGroup,
    );
  }

  late final _ma_sound_group_get_positionPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_position');
  late final _ma_sound_group_get_position = _ma_sound_group_get_positionPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_direction(
    ffi.Pointer<ma_sound_group> pGroup,
    double x,
    double y,
    double z,
  ) {
    return _ma_sound_group_set_direction(
      pGroup,
      x,
      y,
      z,
    );
  }

  late final _ma_sound_group_set_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_group_set_direction');
  late final _ma_sound_group_set_direction =
      _ma_sound_group_set_directionPtr.asFunction<
          void Function(ffi.Pointer<ma_sound_group>, double, double, double)>();

  ma_vec3f ma_sound_group_get_direction(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_direction(
      pGroup,
    );
  }

  late final _ma_sound_group_get_directionPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_direction');
  late final _ma_sound_group_get_direction = _ma_sound_group_get_directionPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_velocity(
    ffi.Pointer<ma_sound_group> pGroup,
    double x,
    double y,
    double z,
  ) {
    return _ma_sound_group_set_velocity(
      pGroup,
      x,
      y,
      z,
    );
  }

  late final _ma_sound_group_set_velocityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_group_set_velocity');
  late final _ma_sound_group_set_velocity =
      _ma_sound_group_set_velocityPtr.asFunction<
          void Function(ffi.Pointer<ma_sound_group>, double, double, double)>();

  ma_vec3f ma_sound_group_get_velocity(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_velocity(
      pGroup,
    );
  }

  late final _ma_sound_group_get_velocityPtr = _lookup<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_velocity');
  late final _ma_sound_group_get_velocity = _ma_sound_group_get_velocityPtr
      .asFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_attenuation_model(
    ffi.Pointer<ma_sound_group> pGroup,
    int attenuationModel,
  ) {
    return _ma_sound_group_set_attenuation_model(
      pGroup,
      attenuationModel,
    );
  }

  late final _ma_sound_group_set_attenuation_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Int32)>>('ma_sound_group_set_attenuation_model');
  late final _ma_sound_group_set_attenuation_model =
      _ma_sound_group_set_attenuation_modelPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>();

  int ma_sound_group_get_attenuation_model(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_attenuation_model(
      pGroup,
    );
  }

  late final _ma_sound_group_get_attenuation_modelPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_attenuation_model');
  late final _ma_sound_group_get_attenuation_model =
      _ma_sound_group_get_attenuation_modelPtr
          .asFunction<int Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_positioning(
    ffi.Pointer<ma_sound_group> pGroup,
    int positioning,
  ) {
    return _ma_sound_group_set_positioning(
      pGroup,
      positioning,
    );
  }

  late final _ma_sound_group_set_positioningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Int32)>>('ma_sound_group_set_positioning');
  late final _ma_sound_group_set_positioning =
      _ma_sound_group_set_positioningPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>();

  int ma_sound_group_get_positioning(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_positioning(
      pGroup,
    );
  }

  late final _ma_sound_group_get_positioningPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_positioning');
  late final _ma_sound_group_get_positioning =
      _ma_sound_group_get_positioningPtr
          .asFunction<int Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_rolloff(
    ffi.Pointer<ma_sound_group> pGroup,
    double rolloff,
  ) {
    return _ma_sound_group_set_rolloff(
      pGroup,
      rolloff,
    );
  }

  late final _ma_sound_group_set_rolloffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_rolloff');
  late final _ma_sound_group_set_rolloff = _ma_sound_group_set_rolloffPtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>();

  double ma_sound_group_get_rolloff(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_rolloff(
      pGroup,
    );
  }

  late final _ma_sound_group_get_rolloffPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_rolloff');
  late final _ma_sound_group_get_rolloff = _ma_sound_group_get_rolloffPtr
      .asFunction<double Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_min_gain(
    ffi.Pointer<ma_sound_group> pGroup,
    double minGain,
  ) {
    return _ma_sound_group_set_min_gain(
      pGroup,
      minGain,
    );
  }

  late final _ma_sound_group_set_min_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_min_gain');
  late final _ma_sound_group_set_min_gain = _ma_sound_group_set_min_gainPtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>();

  double ma_sound_group_get_min_gain(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_min_gain(
      pGroup,
    );
  }

  late final _ma_sound_group_get_min_gainPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_min_gain');
  late final _ma_sound_group_get_min_gain = _ma_sound_group_get_min_gainPtr
      .asFunction<double Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_max_gain(
    ffi.Pointer<ma_sound_group> pGroup,
    double maxGain,
  ) {
    return _ma_sound_group_set_max_gain(
      pGroup,
      maxGain,
    );
  }

  late final _ma_sound_group_set_max_gainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_max_gain');
  late final _ma_sound_group_set_max_gain = _ma_sound_group_set_max_gainPtr
      .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>();

  double ma_sound_group_get_max_gain(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_max_gain(
      pGroup,
    );
  }

  late final _ma_sound_group_get_max_gainPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_max_gain');
  late final _ma_sound_group_get_max_gain = _ma_sound_group_get_max_gainPtr
      .asFunction<double Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_min_distance(
    ffi.Pointer<ma_sound_group> pGroup,
    double minDistance,
  ) {
    return _ma_sound_group_set_min_distance(
      pGroup,
      minDistance,
    );
  }

  late final _ma_sound_group_set_min_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_min_distance');
  late final _ma_sound_group_set_min_distance =
      _ma_sound_group_set_min_distancePtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>();

  double ma_sound_group_get_min_distance(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_min_distance(
      pGroup,
    );
  }

  late final _ma_sound_group_get_min_distancePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_min_distance');
  late final _ma_sound_group_get_min_distance =
      _ma_sound_group_get_min_distancePtr
          .asFunction<double Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_max_distance(
    ffi.Pointer<ma_sound_group> pGroup,
    double maxDistance,
  ) {
    return _ma_sound_group_set_max_distance(
      pGroup,
      maxDistance,
    );
  }

  late final _ma_sound_group_set_max_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_max_distance');
  late final _ma_sound_group_set_max_distance =
      _ma_sound_group_set_max_distancePtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>();

  double ma_sound_group_get_max_distance(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_max_distance(
      pGroup,
    );
  }

  late final _ma_sound_group_get_max_distancePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_max_distance');
  late final _ma_sound_group_get_max_distance =
      _ma_sound_group_get_max_distancePtr
          .asFunction<double Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_cone(
    ffi.Pointer<ma_sound_group> pGroup,
    double innerAngleInRadians,
    double outerAngleInRadians,
    double outerGain,
  ) {
    return _ma_sound_group_set_cone(
      pGroup,
      innerAngleInRadians,
      outerAngleInRadians,
      outerGain,
    );
  }

  late final _ma_sound_group_set_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ffi.Float)>>('ma_sound_group_set_cone');
  late final _ma_sound_group_set_cone = _ma_sound_group_set_conePtr.asFunction<
      void Function(ffi.Pointer<ma_sound_group>, double, double, double)>();

  void ma_sound_group_get_cone(
    ffi.Pointer<ma_sound_group> pGroup,
    ffi.Pointer<ffi.Float> pInnerAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterAngleInRadians,
    ffi.Pointer<ffi.Float> pOuterGain,
  ) {
    return _ma_sound_group_get_cone(
      pGroup,
      pInnerAngleInRadians,
      pOuterAngleInRadians,
      pOuterGain,
    );
  }

  late final _ma_sound_group_get_conePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('ma_sound_group_get_cone');
  late final _ma_sound_group_get_cone = _ma_sound_group_get_conePtr.asFunction<
      void Function(ffi.Pointer<ma_sound_group>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  void ma_sound_group_set_doppler_factor(
    ffi.Pointer<ma_sound_group> pGroup,
    double dopplerFactor,
  ) {
    return _ma_sound_group_set_doppler_factor(
      pGroup,
      dopplerFactor,
    );
  }

  late final _ma_sound_group_set_doppler_factorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_doppler_factor');
  late final _ma_sound_group_set_doppler_factor =
      _ma_sound_group_set_doppler_factorPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>();

  double ma_sound_group_get_doppler_factor(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_doppler_factor(
      pGroup,
    );
  }

  late final _ma_sound_group_get_doppler_factorPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_doppler_factor');
  late final _ma_sound_group_get_doppler_factor =
      _ma_sound_group_get_doppler_factorPtr
          .asFunction<double Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_directional_attenuation_factor(
    ffi.Pointer<ma_sound_group> pGroup,
    double directionalAttenuationFactor,
  ) {
    return _ma_sound_group_set_directional_attenuation_factor(
      pGroup,
      directionalAttenuationFactor,
    );
  }

  late final _ma_sound_group_set_directional_attenuation_factorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ffi.Float)>>('ma_sound_group_set_directional_attenuation_factor');
  late final _ma_sound_group_set_directional_attenuation_factor =
      _ma_sound_group_set_directional_attenuation_factorPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, double)>();

  double ma_sound_group_get_directional_attenuation_factor(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_directional_attenuation_factor(
      pGroup,
    );
  }

  late final _ma_sound_group_get_directional_attenuation_factorPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_directional_attenuation_factor');
  late final _ma_sound_group_get_directional_attenuation_factor =
      _ma_sound_group_get_directional_attenuation_factorPtr
          .asFunction<double Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_fade_in_pcm_frames(
    ffi.Pointer<ma_sound_group> pGroup,
    double volumeBeg,
    double volumeEnd,
    int fadeLengthInFrames,
  ) {
    return _ma_sound_group_set_fade_in_pcm_frames(
      pGroup,
      volumeBeg,
      volumeEnd,
      fadeLengthInFrames,
    );
  }

  late final _ma_sound_group_set_fade_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ma_uint64)>>('ma_sound_group_set_fade_in_pcm_frames');
  late final _ma_sound_group_set_fade_in_pcm_frames =
      _ma_sound_group_set_fade_in_pcm_framesPtr.asFunction<
          void Function(ffi.Pointer<ma_sound_group>, double, double, int)>();

  void ma_sound_group_set_fade_in_milliseconds(
    ffi.Pointer<ma_sound_group> pGroup,
    double volumeBeg,
    double volumeEnd,
    int fadeLengthInMilliseconds,
  ) {
    return _ma_sound_group_set_fade_in_milliseconds(
      pGroup,
      volumeBeg,
      volumeEnd,
      fadeLengthInMilliseconds,
    );
  }

  late final _ma_sound_group_set_fade_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ma_uint64)>>('ma_sound_group_set_fade_in_milliseconds');
  late final _ma_sound_group_set_fade_in_milliseconds =
      _ma_sound_group_set_fade_in_millisecondsPtr.asFunction<
          void Function(ffi.Pointer<ma_sound_group>, double, double, int)>();

  double ma_sound_group_get_current_fade_volume(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_current_fade_volume(
      pGroup,
    );
  }

  late final _ma_sound_group_get_current_fade_volumePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_current_fade_volume');
  late final _ma_sound_group_get_current_fade_volume =
      _ma_sound_group_get_current_fade_volumePtr
          .asFunction<double Function(ffi.Pointer<ma_sound_group>)>();

  void ma_sound_group_set_start_time_in_pcm_frames(
    ffi.Pointer<ma_sound_group> pGroup,
    int absoluteGlobalTimeInFrames,
  ) {
    return _ma_sound_group_set_start_time_in_pcm_frames(
      pGroup,
      absoluteGlobalTimeInFrames,
    );
  }

  late final _ma_sound_group_set_start_time_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ma_uint64)>>('ma_sound_group_set_start_time_in_pcm_frames');
  late final _ma_sound_group_set_start_time_in_pcm_frames =
      _ma_sound_group_set_start_time_in_pcm_framesPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>();

  void ma_sound_group_set_start_time_in_milliseconds(
    ffi.Pointer<ma_sound_group> pGroup,
    int absoluteGlobalTimeInMilliseconds,
  ) {
    return _ma_sound_group_set_start_time_in_milliseconds(
      pGroup,
      absoluteGlobalTimeInMilliseconds,
    );
  }

  late final _ma_sound_group_set_start_time_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ma_uint64)>>('ma_sound_group_set_start_time_in_milliseconds');
  late final _ma_sound_group_set_start_time_in_milliseconds =
      _ma_sound_group_set_start_time_in_millisecondsPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>();

  void ma_sound_group_set_stop_time_in_pcm_frames(
    ffi.Pointer<ma_sound_group> pGroup,
    int absoluteGlobalTimeInFrames,
  ) {
    return _ma_sound_group_set_stop_time_in_pcm_frames(
      pGroup,
      absoluteGlobalTimeInFrames,
    );
  }

  late final _ma_sound_group_set_stop_time_in_pcm_framesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ma_uint64)>>('ma_sound_group_set_stop_time_in_pcm_frames');
  late final _ma_sound_group_set_stop_time_in_pcm_frames =
      _ma_sound_group_set_stop_time_in_pcm_framesPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>();

  void ma_sound_group_set_stop_time_in_milliseconds(
    ffi.Pointer<ma_sound_group> pGroup,
    int absoluteGlobalTimeInMilliseconds,
  ) {
    return _ma_sound_group_set_stop_time_in_milliseconds(
      pGroup,
      absoluteGlobalTimeInMilliseconds,
    );
  }

  late final _ma_sound_group_set_stop_time_in_millisecondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>,
              ma_uint64)>>('ma_sound_group_set_stop_time_in_milliseconds');
  late final _ma_sound_group_set_stop_time_in_milliseconds =
      _ma_sound_group_set_stop_time_in_millisecondsPtr
          .asFunction<void Function(ffi.Pointer<ma_sound_group>, int)>();

  int ma_sound_group_is_playing(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_is_playing(
      pGroup,
    );
  }

  late final _ma_sound_group_is_playingPtr = _lookup<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_is_playing');
  late final _ma_sound_group_is_playing = _ma_sound_group_is_playingPtr
      .asFunction<int Function(ffi.Pointer<ma_sound_group>)>();

  int ma_sound_group_get_time_in_pcm_frames(
    ffi.Pointer<ma_sound_group> pGroup,
  ) {
    return _ma_sound_group_get_time_in_pcm_frames(
      pGroup,
    );
  }

  late final _ma_sound_group_get_time_in_pcm_framesPtr = _lookup<
          ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_sound_group>)>>(
      'ma_sound_group_get_time_in_pcm_frames');
  late final _ma_sound_group_get_time_in_pcm_frames =
      _ma_sound_group_get_time_in_pcm_framesPtr
          .asFunction<int Function(ffi.Pointer<ma_sound_group>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final MiniAudioBindings _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_uint32>, ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>)>> get ma_version =>
      _library._ma_versionPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>
      get ma_version_string => _library._ma_version_stringPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_log_callback Function(
                  ma_log_callback_proc, ffi.Pointer<ffi.Void>)>>
      get ma_log_callback_init => _library._ma_log_callback_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_allocation_callbacks>, ffi.Pointer<ma_log>)>>
      get ma_log_init => _library._ma_log_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_log>)>>
      get ma_log_uninit => _library._ma_log_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_log>, ma_log_callback)>>
      get ma_log_register_callback => _library._ma_log_register_callbackPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_log>, ma_log_callback)>>
      get ma_log_unregister_callback => _library._ma_log_unregister_callbackPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_log>, ma_uint32, ffi.Pointer<ffi.Char>)>>
      get ma_log_post => _library._ma_log_postPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_log>,
              ma_uint32,
              ffi.Pointer<ffi.Char>,
              va_list)>> get ma_log_postv => _library._ma_log_postvPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_log>, ma_uint32, ffi.Pointer<ffi.Char>)>>
      get ma_log_postf => _library._ma_log_postfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ma_biquad_config Function(
              ffi.Int32,
              ma_uint32,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>> get ma_biquad_config_init =>
      _library._ma_biquad_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_biquad_config>, ffi.Pointer<ffi.Size>)>>
      get ma_biquad_get_heap_size => _library._ma_biquad_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_biquad>)>> get ma_biquad_init_preallocated =>
      _library._ma_biquad_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_biquad_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_biquad>)>> get ma_biquad_init =>
      _library._ma_biquad_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_biquad>,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_biquad_uninit =>
      _library._ma_biquad_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_biquad_config>, ffi.Pointer<ma_biquad>)>>
      get ma_biquad_reinit => _library._ma_biquad_reinitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_biquad>)>>
      get ma_biquad_clear_cache => _library._ma_biquad_clear_cachePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_biquad>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_biquad_process_pcm_frames =>
      _library._ma_biquad_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_biquad>)>>
      get ma_biquad_get_latency => _library._ma_biquad_get_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_lpf1_config Function(
                  ffi.Int32, ma_uint32, ma_uint32, ffi.Double)>>
      get ma_lpf1_config_init => _library._ma_lpf1_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_lpf2_config Function(
                  ffi.Int32, ma_uint32, ma_uint32, ffi.Double, ffi.Double)>>
      get ma_lpf2_config_init => _library._ma_lpf2_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ffi.Size>)>>
      get ma_lpf1_get_heap_size => _library._ma_lpf1_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf1>)>> get ma_lpf1_init_preallocated =>
      _library._ma_lpf1_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_lpf1_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_lpf1>)>> get ma_lpf1_init =>
      _library._ma_lpf1_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_lpf1>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_lpf1_uninit => _library._ma_lpf1_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_lpf1_config>, ffi.Pointer<ma_lpf1>)>>
      get ma_lpf1_reinit => _library._ma_lpf1_reinitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_lpf1>)>>
      get ma_lpf1_clear_cache => _library._ma_lpf1_clear_cachePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_lpf1>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_lpf1_process_pcm_frames =>
      _library._ma_lpf1_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_lpf1>)>>
      get ma_lpf1_get_latency => _library._ma_lpf1_get_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ffi.Size>)>>
      get ma_lpf2_get_heap_size => _library._ma_lpf2_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf2>)>> get ma_lpf2_init_preallocated =>
      _library._ma_lpf2_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_lpf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_lpf2>)>> get ma_lpf2_init =>
      _library._ma_lpf2_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_lpf2>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_lpf2_uninit => _library._ma_lpf2_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_lpf2_config>, ffi.Pointer<ma_lpf2>)>>
      get ma_lpf2_reinit => _library._ma_lpf2_reinitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_lpf2>)>>
      get ma_lpf2_clear_cache => _library._ma_lpf2_clear_cachePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_lpf2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_lpf2_process_pcm_frames =>
      _library._ma_lpf2_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_lpf2>)>>
      get ma_lpf2_get_latency => _library._ma_lpf2_get_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_lpf_config Function(
                  ffi.Int32, ma_uint32, ma_uint32, ffi.Double, ma_uint32)>>
      get ma_lpf_config_init => _library._ma_lpf_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_lpf_config>, ffi.Pointer<ffi.Size>)>>
      get ma_lpf_get_heap_size => _library._ma_lpf_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_lpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_lpf>)>> get ma_lpf_init_preallocated =>
      _library._ma_lpf_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_lpf_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_lpf>)>> get ma_lpf_init =>
      _library._ma_lpf_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_lpf>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_lpf_uninit => _library._ma_lpf_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_lpf_config>, ffi.Pointer<ma_lpf>)>>
      get ma_lpf_reinit => _library._ma_lpf_reinitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_lpf>)>>
      get ma_lpf_clear_cache => _library._ma_lpf_clear_cachePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_lpf>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_lpf_process_pcm_frames =>
      _library._ma_lpf_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_lpf>)>>
      get ma_lpf_get_latency => _library._ma_lpf_get_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_hpf1_config Function(
                  ffi.Int32, ma_uint32, ma_uint32, ffi.Double)>>
      get ma_hpf1_config_init => _library._ma_hpf1_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_hpf2_config Function(
                  ffi.Int32, ma_uint32, ma_uint32, ffi.Double, ffi.Double)>>
      get ma_hpf2_config_init => _library._ma_hpf2_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ffi.Size>)>>
      get ma_hpf1_get_heap_size => _library._ma_hpf1_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf1>)>> get ma_hpf1_init_preallocated =>
      _library._ma_hpf1_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hpf1_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hpf1>)>> get ma_hpf1_init =>
      _library._ma_hpf1_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_hpf1>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_hpf1_uninit => _library._ma_hpf1_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_hpf1_config>, ffi.Pointer<ma_hpf1>)>>
      get ma_hpf1_reinit => _library._ma_hpf1_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hpf1>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_hpf1_process_pcm_frames =>
      _library._ma_hpf1_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hpf1>)>>
      get ma_hpf1_get_latency => _library._ma_hpf1_get_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ffi.Size>)>>
      get ma_hpf2_get_heap_size => _library._ma_hpf2_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf2>)>> get ma_hpf2_init_preallocated =>
      _library._ma_hpf2_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hpf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hpf2>)>> get ma_hpf2_init =>
      _library._ma_hpf2_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_hpf2>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_hpf2_uninit => _library._ma_hpf2_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_hpf2_config>, ffi.Pointer<ma_hpf2>)>>
      get ma_hpf2_reinit => _library._ma_hpf2_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hpf2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_hpf2_process_pcm_frames =>
      _library._ma_hpf2_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hpf2>)>>
      get ma_hpf2_get_latency => _library._ma_hpf2_get_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_hpf_config Function(
                  ffi.Int32, ma_uint32, ma_uint32, ffi.Double, ma_uint32)>>
      get ma_hpf_config_init => _library._ma_hpf_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_hpf_config>, ffi.Pointer<ffi.Size>)>>
      get ma_hpf_get_heap_size => _library._ma_hpf_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hpf>)>> get ma_hpf_init_preallocated =>
      _library._ma_hpf_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hpf_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hpf>)>> get ma_hpf_init =>
      _library._ma_hpf_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_hpf>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_hpf_uninit => _library._ma_hpf_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_hpf_config>, ffi.Pointer<ma_hpf>)>>
      get ma_hpf_reinit => _library._ma_hpf_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hpf>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_hpf_process_pcm_frames =>
      _library._ma_hpf_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hpf>)>>
      get ma_hpf_get_latency => _library._ma_hpf_get_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bpf2_config Function(
                  ffi.Int32, ma_uint32, ma_uint32, ffi.Double, ffi.Double)>>
      get ma_bpf2_config_init => _library._ma_bpf2_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ffi.Size>)>>
      get ma_bpf2_get_heap_size => _library._ma_bpf2_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_bpf2>)>> get ma_bpf2_init_preallocated =>
      _library._ma_bpf2_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_bpf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_bpf2>)>> get ma_bpf2_init =>
      _library._ma_bpf2_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_bpf2>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_bpf2_uninit => _library._ma_bpf2_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_bpf2_config>, ffi.Pointer<ma_bpf2>)>>
      get ma_bpf2_reinit => _library._ma_bpf2_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_bpf2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_bpf2_process_pcm_frames =>
      _library._ma_bpf2_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_bpf2>)>>
      get ma_bpf2_get_latency => _library._ma_bpf2_get_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bpf_config Function(
                  ffi.Int32, ma_uint32, ma_uint32, ffi.Double, ma_uint32)>>
      get ma_bpf_config_init => _library._ma_bpf_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_bpf_config>, ffi.Pointer<ffi.Size>)>>
      get ma_bpf_get_heap_size => _library._ma_bpf_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_bpf_config>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_bpf>)>> get ma_bpf_init_preallocated =>
      _library._ma_bpf_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_bpf_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_bpf>)>> get ma_bpf_init =>
      _library._ma_bpf_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_bpf>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_bpf_uninit => _library._ma_bpf_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_bpf_config>, ffi.Pointer<ma_bpf>)>>
      get ma_bpf_reinit => _library._ma_bpf_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_bpf>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_bpf_process_pcm_frames =>
      _library._ma_bpf_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_bpf>)>>
      get ma_bpf_get_latency => _library._ma_bpf_get_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_notch2_config Function(
                  ffi.Int32, ma_uint32, ma_uint32, ffi.Double, ffi.Double)>>
      get ma_notch2_config_init => _library._ma_notch2_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_notch2_config>, ffi.Pointer<ffi.Size>)>>
      get ma_notch2_get_heap_size => _library._ma_notch2_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_notch2_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_notch2>)>> get ma_notch2_init_preallocated =>
      _library._ma_notch2_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_notch2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_notch2>)>> get ma_notch2_init =>
      _library._ma_notch2_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_notch2>,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_notch2_uninit =>
      _library._ma_notch2_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_notch2_config>, ffi.Pointer<ma_notch2>)>>
      get ma_notch2_reinit => _library._ma_notch2_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_notch2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_notch2_process_pcm_frames =>
      _library._ma_notch2_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_notch2>)>>
      get ma_notch2_get_latency => _library._ma_notch2_get_latencyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ma_peak2_config Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Double,
              ffi.Double,
              ffi.Double)>> get ma_peak2_config_init =>
      _library._ma_peak2_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_peak2_config>, ffi.Pointer<ffi.Size>)>>
      get ma_peak2_get_heap_size => _library._ma_peak2_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_peak2_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_peak2>)>> get ma_peak2_init_preallocated =>
      _library._ma_peak2_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_peak2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_peak2>)>> get ma_peak2_init =>
      _library._ma_peak2_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_peak2>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_peak2_uninit => _library._ma_peak2_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_peak2_config>, ffi.Pointer<ma_peak2>)>>
      get ma_peak2_reinit => _library._ma_peak2_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_peak2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_peak2_process_pcm_frames =>
      _library._ma_peak2_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_peak2>)>>
      get ma_peak2_get_latency => _library._ma_peak2_get_latencyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ma_loshelf2_config Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Double,
              ffi.Double,
              ffi.Double)>> get ma_loshelf2_config_init =>
      _library._ma_loshelf2_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_loshelf2_config>, ffi.Pointer<ffi.Size>)>>
      get ma_loshelf2_get_heap_size => _library._ma_loshelf2_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_loshelf2>)>> get ma_loshelf2_init_preallocated =>
      _library._ma_loshelf2_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_loshelf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_loshelf2>)>> get ma_loshelf2_init =>
      _library._ma_loshelf2_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_loshelf2>,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_loshelf2_uninit =>
      _library._ma_loshelf2_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_loshelf2_config>, ffi.Pointer<ma_loshelf2>)>>
      get ma_loshelf2_reinit => _library._ma_loshelf2_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_loshelf2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_loshelf2_process_pcm_frames =>
      _library._ma_loshelf2_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_loshelf2>)>>
      get ma_loshelf2_get_latency => _library._ma_loshelf2_get_latencyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ma_hishelf2_config Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Double,
              ffi.Double,
              ffi.Double)>> get ma_hishelf2_config_init =>
      _library._ma_hishelf2_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_hishelf2_config>, ffi.Pointer<ffi.Size>)>>
      get ma_hishelf2_get_heap_size => _library._ma_hishelf2_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_hishelf2>)>> get ma_hishelf2_init_preallocated =>
      _library._ma_hishelf2_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hishelf2_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hishelf2>)>> get ma_hishelf2_init =>
      _library._ma_hishelf2_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hishelf2>,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_hishelf2_uninit =>
      _library._ma_hishelf2_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_hishelf2_config>, ffi.Pointer<ma_hishelf2>)>>
      get ma_hishelf2_reinit => _library._ma_hishelf2_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_hishelf2>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_hishelf2_process_pcm_frames =>
      _library._ma_hishelf2_process_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_hishelf2>)>>
      get ma_hishelf2_get_latency => _library._ma_hishelf2_get_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_delay_config Function(
                  ma_uint32, ma_uint32, ma_uint32, ffi.Float)>>
      get ma_delay_config_init => _library._ma_delay_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_delay_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_delay>)>> get ma_delay_init =>
      _library._ma_delay_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_delay>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_delay_uninit => _library._ma_delay_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_delay>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint32)>> get ma_delay_process_pcm_frames =>
      _library._ma_delay_process_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_delay>, ffi.Float)>>
      get ma_delay_set_wet => _library._ma_delay_set_wetPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay>)>>
      get ma_delay_get_wet => _library._ma_delay_get_wetPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_delay>, ffi.Float)>>
      get ma_delay_set_dry => _library._ma_delay_set_dryPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay>)>>
      get ma_delay_get_dry => _library._ma_delay_get_dryPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_delay>, ffi.Float)>>
      get ma_delay_set_decay => _library._ma_delay_set_decayPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay>)>>
      get ma_delay_get_decay => _library._ma_delay_get_decayPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_gainer_config Function(ma_uint32, ma_uint32)>>
      get ma_gainer_config_init => _library._ma_gainer_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_gainer_config>, ffi.Pointer<ffi.Size>)>>
      get ma_gainer_get_heap_size => _library._ma_gainer_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_gainer_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_gainer>)>> get ma_gainer_init_preallocated =>
      _library._ma_gainer_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_gainer_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_gainer>)>> get ma_gainer_init =>
      _library._ma_gainer_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_gainer>,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_gainer_uninit =>
      _library._ma_gainer_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_gainer>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_gainer_process_pcm_frames =>
      _library._ma_gainer_process_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_gainer>, ffi.Float)>>
      get ma_gainer_set_gain => _library._ma_gainer_set_gainPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_gainer>, ffi.Pointer<ffi.Float>)>>
      get ma_gainer_set_gains => _library._ma_gainer_set_gainsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_gainer>, ffi.Float)>>
      get ma_gainer_set_master_volume =>
          _library._ma_gainer_set_master_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_gainer>, ffi.Pointer<ffi.Float>)>>
      get ma_gainer_get_master_volume =>
          _library._ma_gainer_get_master_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_panner_config Function(ffi.Int32, ma_uint32)>>
      get ma_panner_config_init => _library._ma_panner_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_panner_config>, ffi.Pointer<ma_panner>)>>
      get ma_panner_init => _library._ma_panner_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_panner>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_panner_process_pcm_frames =>
      _library._ma_panner_process_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_panner>, ffi.Int32)>>
      get ma_panner_set_mode => _library._ma_panner_set_modePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_panner>)>>
      get ma_panner_get_mode => _library._ma_panner_get_modePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_panner>, ffi.Float)>>
      get ma_panner_set_pan => _library._ma_panner_set_panPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_panner>)>>
      get ma_panner_get_pan => _library._ma_panner_get_panPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_fader_config Function(ffi.Int32, ma_uint32, ma_uint32)>>
      get ma_fader_config_init => _library._ma_fader_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_fader_config>, ffi.Pointer<ma_fader>)>>
      get ma_fader_init => _library._ma_fader_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_fader>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_fader_process_pcm_frames =>
      _library._ma_fader_process_pcm_framesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_fader>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>)>> get ma_fader_get_data_format =>
      _library._ma_fader_get_data_formatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_fader>, ffi.Float, ffi.Float, ma_uint64)>>
      get ma_fader_set_fade => _library._ma_fader_set_fadePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_fader>,
              ffi.Float,
              ffi.Float,
              ma_uint64,
              ma_int64)>> get ma_fader_set_fade_ex =>
      _library._ma_fader_set_fade_exPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_fader>)>>
      get ma_fader_get_current_volume =>
          _library._ma_fader_get_current_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_spatializer_listener_config Function(ma_uint32)>>
      get ma_spatializer_listener_config_init =>
          _library._ma_spatializer_listener_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_spatializer_listener_config>,
                  ffi.Pointer<ffi.Size>)>>
      get ma_spatializer_listener_get_heap_size =>
          _library._ma_spatializer_listener_get_heap_sizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_spatializer_listener_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_spatializer_listener>)>>
      get ma_spatializer_listener_init_preallocated =>
          _library._ma_spatializer_listener_init_preallocatedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_spatializer_listener_config>,
                  ffi.Pointer<ma_allocation_callbacks>,
                  ffi.Pointer<ma_spatializer_listener>)>>
      get ma_spatializer_listener_init =>
          _library._ma_spatializer_listener_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer_listener>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_spatializer_listener_uninit =>
          _library._ma_spatializer_listener_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_channel> Function(
                  ffi.Pointer<ma_spatializer_listener>)>>
      get ma_spatializer_listener_get_channel_map =>
          _library._ma_spatializer_listener_get_channel_mapPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Float,
              ffi.Float,
              ffi.Float)>> get ma_spatializer_listener_set_cone =>
      _library._ma_spatializer_listener_set_conePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>> get ma_spatializer_listener_get_cone =>
      _library._ma_spatializer_listener_get_conePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Float,
              ffi.Float,
              ffi.Float)>> get ma_spatializer_listener_set_position =>
      _library._ma_spatializer_listener_set_positionPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>>
      get ma_spatializer_listener_get_position =>
          _library._ma_spatializer_listener_get_positionPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Float,
              ffi.Float,
              ffi.Float)>> get ma_spatializer_listener_set_direction =>
      _library._ma_spatializer_listener_set_directionPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>>
      get ma_spatializer_listener_get_direction =>
          _library._ma_spatializer_listener_get_directionPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Float,
              ffi.Float,
              ffi.Float)>> get ma_spatializer_listener_set_velocity =>
      _library._ma_spatializer_listener_set_velocityPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>>
      get ma_spatializer_listener_get_velocity =>
          _library._ma_spatializer_listener_get_velocityPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_spatializer_listener>, ffi.Float)>>
      get ma_spatializer_listener_set_speed_of_sound =>
          _library._ma_spatializer_listener_set_speed_of_soundPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Pointer<ma_spatializer_listener>)>>
      get ma_spatializer_listener_get_speed_of_sound =>
          _library._ma_spatializer_listener_get_speed_of_soundPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Float,
              ffi.Float,
              ffi.Float)>> get ma_spatializer_listener_set_world_up =>
      _library._ma_spatializer_listener_set_world_upPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_spatializer_listener>)>>
      get ma_spatializer_listener_get_world_up =>
          _library._ma_spatializer_listener_get_world_upPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_spatializer_listener>, ma_bool32)>>
      get ma_spatializer_listener_set_enabled =>
          _library._ma_spatializer_listener_set_enabledPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_spatializer_listener>)>>
      get ma_spatializer_listener_is_enabled =>
          _library._ma_spatializer_listener_is_enabledPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_spatializer_config Function(ma_uint32, ma_uint32)>>
      get ma_spatializer_config_init => _library._ma_spatializer_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_spatializer_config>, ffi.Pointer<ffi.Size>)>>
      get ma_spatializer_get_heap_size =>
          _library._ma_spatializer_get_heap_sizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_spatializer_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_init_preallocated =>
          _library._ma_spatializer_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_spatializer_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_spatializer>)>> get ma_spatializer_init =>
      _library._ma_spatializer_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_spatializer_uninit => _library._ma_spatializer_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ma_spatializer_listener>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_spatializer_process_pcm_frames =>
      _library._ma_spatializer_process_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_spatializer>, ffi.Float)>>
      get ma_spatializer_set_master_volume =>
          _library._ma_spatializer_set_master_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_spatializer>, ffi.Pointer<ffi.Float>)>>
      get ma_spatializer_get_master_volume =>
          _library._ma_spatializer_get_master_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_input_channels =>
          _library._ma_spatializer_get_input_channelsPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_output_channels =>
          _library._ma_spatializer_get_output_channelsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Int32)>>
      get ma_spatializer_set_attenuation_model =>
          _library._ma_spatializer_set_attenuation_modelPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_attenuation_model =>
          _library._ma_spatializer_get_attenuation_modelPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Int32)>>
      get ma_spatializer_set_positioning =>
          _library._ma_spatializer_set_positioningPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_positioning =>
          _library._ma_spatializer_get_positioningPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float)>>
      get ma_spatializer_set_rolloff => _library._ma_spatializer_set_rolloffPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_rolloff => _library._ma_spatializer_get_rolloffPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float)>>
      get ma_spatializer_set_min_gain =>
          _library._ma_spatializer_set_min_gainPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_min_gain =>
          _library._ma_spatializer_get_min_gainPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float)>>
      get ma_spatializer_set_max_gain =>
          _library._ma_spatializer_set_max_gainPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_max_gain =>
          _library._ma_spatializer_get_max_gainPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float)>>
      get ma_spatializer_set_min_distance =>
          _library._ma_spatializer_set_min_distancePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_min_distance =>
          _library._ma_spatializer_get_min_distancePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float)>>
      get ma_spatializer_set_max_distance =>
          _library._ma_spatializer_set_max_distancePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_max_distance =>
          _library._ma_spatializer_get_max_distancePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float, ffi.Float,
              ffi.Float)>> get ma_spatializer_set_cone =>
      _library._ma_spatializer_set_conePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_spatializer>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>> get ma_spatializer_get_cone =>
      _library._ma_spatializer_get_conePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float)>>
      get ma_spatializer_set_doppler_factor =>
          _library._ma_spatializer_set_doppler_factorPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_doppler_factor =>
          _library._ma_spatializer_get_doppler_factorPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float)>>
      get ma_spatializer_set_directional_attenuation_factor =>
          _library._ma_spatializer_set_directional_attenuation_factorPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_directional_attenuation_factor =>
          _library._ma_spatializer_get_directional_attenuation_factorPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float, ffi.Float,
              ffi.Float)>> get ma_spatializer_set_position =>
      _library._ma_spatializer_set_positionPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_position =>
          _library._ma_spatializer_get_positionPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float, ffi.Float,
              ffi.Float)>> get ma_spatializer_set_direction =>
      _library._ma_spatializer_set_directionPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_direction =>
          _library._ma_spatializer_get_directionPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_spatializer>, ffi.Float, ffi.Float,
              ffi.Float)>> get ma_spatializer_set_velocity =>
      _library._ma_spatializer_set_velocityPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_spatializer>)>>
      get ma_spatializer_get_velocity =>
          _library._ma_spatializer_get_velocityPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_spatializer>,
                  ffi.Pointer<ma_spatializer_listener>,
                  ffi.Pointer<ma_vec3f>,
                  ffi.Pointer<ma_vec3f>)>>
      get ma_spatializer_get_relative_position_and_direction =>
          _library._ma_spatializer_get_relative_position_and_directionPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_linear_resampler_config Function(
                  ffi.Int32, ma_uint32, ma_uint32, ma_uint32)>>
      get ma_linear_resampler_config_init =>
          _library._ma_linear_resampler_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_linear_resampler_config>,
              ffi.Pointer<ffi.Size>)>> get ma_linear_resampler_get_heap_size =>
      _library._ma_linear_resampler_get_heap_sizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_linear_resampler_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_linear_resampler>)>>
      get ma_linear_resampler_init_preallocated =>
          _library._ma_linear_resampler_init_preallocatedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_linear_resampler_config>,
                  ffi.Pointer<ma_allocation_callbacks>,
                  ffi.Pointer<ma_linear_resampler>)>>
      get ma_linear_resampler_init => _library._ma_linear_resampler_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_linear_resampler>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_linear_resampler_uninit => _library._ma_linear_resampler_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_linear_resampler>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_uint64>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_uint64>)>>
      get ma_linear_resampler_process_pcm_frames =>
          _library._ma_linear_resampler_process_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_linear_resampler>, ma_uint32, ma_uint32)>>
      get ma_linear_resampler_set_rate =>
          _library._ma_linear_resampler_set_ratePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_linear_resampler>, ffi.Float)>>
      get ma_linear_resampler_set_rate_ratio =>
          _library._ma_linear_resampler_set_rate_ratioPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_linear_resampler>)>>
      get ma_linear_resampler_get_input_latency =>
          _library._ma_linear_resampler_get_input_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_linear_resampler>)>>
      get ma_linear_resampler_get_output_latency =>
          _library._ma_linear_resampler_get_output_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_linear_resampler>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>
      get ma_linear_resampler_get_required_input_frame_count =>
          _library._ma_linear_resampler_get_required_input_frame_countPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_linear_resampler>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>
      get ma_linear_resampler_get_expected_output_frame_count =>
          _library._ma_linear_resampler_get_expected_output_frame_countPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_linear_resampler>)>>
      get ma_linear_resampler_reset => _library._ma_linear_resampler_resetPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_resampler_config Function(
                  ffi.Int32, ma_uint32, ma_uint32, ma_uint32, ffi.Int32)>>
      get ma_resampler_config_init => _library._ma_resampler_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resampler_config>, ffi.Pointer<ffi.Size>)>>
      get ma_resampler_get_heap_size => _library._ma_resampler_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resampler_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_resampler>)>> get ma_resampler_init_preallocated =>
      _library._ma_resampler_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resampler_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_resampler>)>> get ma_resampler_init =>
      _library._ma_resampler_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_resampler>,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_resampler_uninit =>
      _library._ma_resampler_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resampler>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_uint64>)>> get ma_resampler_process_pcm_frames =>
      _library._ma_resampler_process_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resampler>, ma_uint32, ma_uint32)>>
      get ma_resampler_set_rate => _library._ma_resampler_set_ratePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resampler>, ffi.Float)>>
      get ma_resampler_set_rate_ratio =>
          _library._ma_resampler_set_rate_ratioPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_resampler>)>>
      get ma_resampler_get_input_latency =>
          _library._ma_resampler_get_input_latencyPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_resampler>)>>
      get ma_resampler_get_output_latency =>
          _library._ma_resampler_get_output_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resampler>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>
      get ma_resampler_get_required_input_frame_count =>
          _library._ma_resampler_get_required_input_frame_countPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resampler>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>
      get ma_resampler_get_expected_output_frame_count =>
          _library._ma_resampler_get_expected_output_frame_countPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_resampler>)>>
      get ma_resampler_reset => _library._ma_resampler_resetPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ma_channel_converter_config Function(
              ffi.Int32,
              ma_uint32,
              ffi.Pointer<ma_channel>,
              ma_uint32,
              ffi.Pointer<ma_channel>,
              ffi.Int32)>> get ma_channel_converter_config_init =>
      _library._ma_channel_converter_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_channel_converter_config>,
              ffi.Pointer<ffi.Size>)>> get ma_channel_converter_get_heap_size =>
      _library._ma_channel_converter_get_heap_sizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_channel_converter_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_channel_converter>)>>
      get ma_channel_converter_init_preallocated =>
          _library._ma_channel_converter_init_preallocatedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_channel_converter_config>,
                  ffi.Pointer<ma_allocation_callbacks>,
                  ffi.Pointer<ma_channel_converter>)>>
      get ma_channel_converter_init => _library._ma_channel_converter_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_channel_converter>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_channel_converter_uninit =>
          _library._ma_channel_converter_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_channel_converter_process_pcm_frames =>
      _library._ma_channel_converter_process_pcm_framesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>> get ma_channel_converter_get_input_channel_map =>
      _library._ma_channel_converter_get_input_channel_mapPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_channel_converter>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>> get ma_channel_converter_get_output_channel_map =>
      _library._ma_channel_converter_get_output_channel_mapPtr;
  ffi.Pointer<ffi.NativeFunction<ma_data_converter_config Function()>>
      get ma_data_converter_config_init_default =>
          _library._ma_data_converter_config_init_defaultPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ma_data_converter_config Function(
              ffi.Int32,
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ma_uint32)>> get ma_data_converter_config_init =>
      _library._ma_data_converter_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_converter_config>,
              ffi.Pointer<ffi.Size>)>> get ma_data_converter_get_heap_size =>
      _library._ma_data_converter_get_heap_sizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_converter_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_data_converter>)>>
      get ma_data_converter_init_preallocated =>
          _library._ma_data_converter_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_converter_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_data_converter>)>> get ma_data_converter_init =>
      _library._ma_data_converter_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_data_converter>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_data_converter_uninit => _library._ma_data_converter_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_converter>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_uint64>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_uint64>)>>
      get ma_data_converter_process_pcm_frames =>
          _library._ma_data_converter_process_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_converter>, ma_uint32, ma_uint32)>>
      get ma_data_converter_set_rate => _library._ma_data_converter_set_ratePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_converter>, ffi.Float)>>
      get ma_data_converter_set_rate_ratio =>
          _library._ma_data_converter_set_rate_ratioPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_data_converter>)>>
      get ma_data_converter_get_input_latency =>
          _library._ma_data_converter_get_input_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_data_converter>)>>
      get ma_data_converter_get_output_latency =>
          _library._ma_data_converter_get_output_latencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_converter>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>
      get ma_data_converter_get_required_input_frame_count =>
          _library._ma_data_converter_get_required_input_frame_countPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_converter>, ma_uint64,
                  ffi.Pointer<ma_uint64>)>>
      get ma_data_converter_get_expected_output_frame_count =>
          _library._ma_data_converter_get_expected_output_frame_countPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>> get ma_data_converter_get_input_channel_map =>
      _library._ma_data_converter_get_input_channel_mapPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_converter>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>> get ma_data_converter_get_output_channel_map =>
      _library._ma_data_converter_get_output_channel_mapPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_converter>)>>
      get ma_data_converter_reset => _library._ma_data_converter_resetPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_u8_to_s16 =>
      _library._ma_pcm_u8_to_s16Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_u8_to_s24 =>
      _library._ma_pcm_u8_to_s24Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_u8_to_s32 =>
      _library._ma_pcm_u8_to_s32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_u8_to_f32 =>
      _library._ma_pcm_u8_to_f32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_s16_to_u8 =>
      _library._ma_pcm_s16_to_u8Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_s16_to_s24 =>
      _library._ma_pcm_s16_to_s24Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_s16_to_s32 =>
      _library._ma_pcm_s16_to_s32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_s16_to_f32 =>
      _library._ma_pcm_s16_to_f32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_s24_to_u8 =>
      _library._ma_pcm_s24_to_u8Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_s24_to_s16 =>
      _library._ma_pcm_s24_to_s16Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_s24_to_s32 =>
      _library._ma_pcm_s24_to_s32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_s24_to_f32 =>
      _library._ma_pcm_s24_to_f32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_s32_to_u8 =>
      _library._ma_pcm_s32_to_u8Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_s32_to_s16 =>
      _library._ma_pcm_s32_to_s16Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_s32_to_s24 =>
      _library._ma_pcm_s32_to_s24Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_s32_to_f32 =>
      _library._ma_pcm_s32_to_f32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_f32_to_u8 =>
      _library._ma_pcm_f32_to_u8Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_f32_to_s16 =>
      _library._ma_pcm_f32_to_s16Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_f32_to_s24 =>
      _library._ma_pcm_f32_to_s24Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_f32_to_s32 =>
      _library._ma_pcm_f32_to_s32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ma_uint64,
              ffi.Int32)>> get ma_pcm_convert => _library._ma_pcm_convertPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ma_uint64,
              ma_uint32,
              ffi.Int32)>> get ma_convert_pcm_frames_format =>
      _library._ma_convert_pcm_frames_formatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int32, ma_uint32, ma_uint64,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>
      get ma_deinterleave_pcm_frames => _library._ma_deinterleave_pcm_framesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ma_uint32,
              ma_uint64,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>)>> get ma_interleave_pcm_frames =>
      _library._ma_interleave_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_channel Function(
                  ffi.Pointer<ma_channel>, ma_uint32, ma_uint32)>>
      get ma_channel_map_get_channel => _library._ma_channel_map_get_channelPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_channel>, ma_uint32)>>
      get ma_channel_map_init_blank => _library._ma_channel_map_init_blankPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int32, ffi.Pointer<ma_channel>, ffi.Size, ma_uint32)>>
      get ma_channel_map_init_standard =>
          _library._ma_channel_map_init_standardPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>, ma_uint32)>>
      get ma_channel_map_copy => _library._ma_channel_map_copyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_channel>,
              ffi.Size,
              ffi.Pointer<ma_channel>,
              ma_uint32)>> get ma_channel_map_copy_or_default =>
      _library._ma_channel_map_copy_or_defaultPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_channel>, ma_uint32)>>
      get ma_channel_map_is_valid => _library._ma_channel_map_is_validPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(
                  ffi.Pointer<ma_channel>, ffi.Pointer<ma_channel>, ma_uint32)>>
      get ma_channel_map_is_equal => _library._ma_channel_map_is_equalPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_channel>, ma_uint32)>>
      get ma_channel_map_is_blank => _library._ma_channel_map_is_blankPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(
                  ma_uint32, ffi.Pointer<ma_channel>, ma_channel)>>
      get ma_channel_map_contains_channel_position =>
          _library._ma_channel_map_contains_channel_positionPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(ma_uint32, ffi.Pointer<ma_channel>, ma_channel,
                  ffi.Pointer<ma_uint32>)>>
      get ma_channel_map_find_channel_position =>
          _library._ma_channel_map_find_channel_positionPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ma_channel>,
              ma_uint32,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>> get ma_channel_map_to_string =>
      _library._ma_channel_map_to_stringPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ma_channel)>>
      get ma_channel_position_to_string =>
          _library._ma_channel_position_to_stringPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32)>> get ma_convert_frames =>
      _library._ma_convert_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_uint64 Function(
                  ffi.Pointer<ffi.Void>,
                  ma_uint64,
                  ffi.Pointer<ffi.Void>,
                  ma_uint64,
                  ffi.Pointer<ma_data_converter_config>)>>
      get ma_convert_frames_ex => _library._ma_convert_frames_exPtr;
  ffi.Pointer<ffi.NativeFunction<ma_data_source_config Function()>>
      get ma_data_source_config_init => _library._ma_data_source_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source_config>,
              ffi.Pointer<ma_data_source>)>> get ma_data_source_init =>
      _library._ma_data_source_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_data_source>)>>
      get ma_data_source_uninit => _library._ma_data_source_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>> get ma_data_source_read_pcm_frames =>
      _library._ma_data_source_read_pcm_framesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source>, ma_uint64,
              ffi.Pointer<ma_uint64>)>> get ma_data_source_seek_pcm_frames =>
      _library._ma_data_source_seek_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_source>, ma_uint64)>>
      get ma_data_source_seek_to_pcm_frame =>
          _library._ma_data_source_seek_to_pcm_framePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_source>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>> get ma_data_source_get_data_format =>
      _library._ma_data_source_get_data_formatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>>
      get ma_data_source_get_cursor_in_pcm_frames =>
          _library._ma_data_source_get_cursor_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ma_uint64>)>>
      get ma_data_source_get_length_in_pcm_frames =>
          _library._ma_data_source_get_length_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ffi.Float>)>>
      get ma_data_source_get_cursor_in_seconds =>
          _library._ma_data_source_get_cursor_in_secondsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ffi.Float>)>>
      get ma_data_source_get_length_in_seconds =>
          _library._ma_data_source_get_length_in_secondsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_source>, ma_bool32)>>
      get ma_data_source_set_looping => _library._ma_data_source_set_loopingPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_data_source>)>>
      get ma_data_source_is_looping => _library._ma_data_source_is_loopingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ma_uint64, ma_uint64)>>
      get ma_data_source_set_range_in_pcm_frames =>
          _library._ma_data_source_set_range_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_data_source>,
                  ffi.Pointer<ma_uint64>, ffi.Pointer<ma_uint64>)>>
      get ma_data_source_get_range_in_pcm_frames =>
          _library._ma_data_source_get_range_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ma_uint64, ma_uint64)>>
      get ma_data_source_set_loop_point_in_pcm_frames =>
          _library._ma_data_source_set_loop_point_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_data_source>,
                  ffi.Pointer<ma_uint64>, ffi.Pointer<ma_uint64>)>>
      get ma_data_source_get_loop_point_in_pcm_frames =>
          _library._ma_data_source_get_loop_point_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ma_data_source>)>>
      get ma_data_source_set_current => _library._ma_data_source_set_currentPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ma_data_source> Function(
              ffi.Pointer<ma_data_source>)>> get ma_data_source_get_current =>
      _library._ma_data_source_get_currentPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ffi.Pointer<ma_data_source>)>>
      get ma_data_source_set_next => _library._ma_data_source_set_nextPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ma_data_source> Function(
              ffi.Pointer<ma_data_source>)>> get ma_data_source_get_next =>
      _library._ma_data_source_get_nextPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_data_source>, ma_data_source_get_next_proc)>>
      get ma_data_source_set_next_callback =>
          _library._ma_data_source_set_next_callbackPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_data_source_get_next_proc Function(
                  ffi.Pointer<ma_data_source>)>>
      get ma_data_source_get_next_callback =>
          _library._ma_data_source_get_next_callbackPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Int32, ma_uint32, ffi.Pointer<ffi.Void>,
                  ma_uint64, ffi.Pointer<ma_audio_buffer_ref>)>>
      get ma_audio_buffer_ref_init => _library._ma_audio_buffer_ref_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_audio_buffer_ref>)>>
      get ma_audio_buffer_ref_uninit => _library._ma_audio_buffer_ref_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ffi.Void>,
              ma_uint64)>> get ma_audio_buffer_ref_set_data =>
      _library._ma_audio_buffer_ref_set_dataPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ma_bool32)>> get ma_audio_buffer_ref_read_pcm_frames =>
      _library._ma_audio_buffer_ref_read_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_ref>, ma_uint64)>>
      get ma_audio_buffer_ref_seek_to_pcm_frame =>
          _library._ma_audio_buffer_ref_seek_to_pcm_framePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_audio_buffer_ref>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ma_uint64>)>> get ma_audio_buffer_ref_map =>
      _library._ma_audio_buffer_ref_mapPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_ref>, ma_uint64)>>
      get ma_audio_buffer_ref_unmap => _library._ma_audio_buffer_ref_unmapPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_audio_buffer_ref>)>>
      get ma_audio_buffer_ref_at_end => _library._ma_audio_buffer_ref_at_endPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>>
      get ma_audio_buffer_ref_get_cursor_in_pcm_frames =>
          _library._ma_audio_buffer_ref_get_cursor_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>>
      get ma_audio_buffer_ref_get_length_in_pcm_frames =>
          _library._ma_audio_buffer_ref_get_length_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer_ref>, ffi.Pointer<ma_uint64>)>>
      get ma_audio_buffer_ref_get_available_frames =>
          _library._ma_audio_buffer_ref_get_available_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_audio_buffer_config Function(ffi.Int32, ma_uint32, ma_uint64,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_audio_buffer_config_init =>
          _library._ma_audio_buffer_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ma_audio_buffer>)>> get ma_audio_buffer_init =>
      _library._ma_audio_buffer_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_config>,
              ffi.Pointer<ma_audio_buffer>)>> get ma_audio_buffer_init_copy =>
      _library._ma_audio_buffer_init_copyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_audio_buffer_config>,
                  ffi.Pointer<ffi.Pointer<ma_audio_buffer>>)>>
      get ma_audio_buffer_alloc_and_init =>
          _library._ma_audio_buffer_alloc_and_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_audio_buffer>)>>
      get ma_audio_buffer_uninit => _library._ma_audio_buffer_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_audio_buffer>)>>
      get ma_audio_buffer_uninit_and_free =>
          _library._ma_audio_buffer_uninit_and_freePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ma_uint64 Function(
              ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ma_bool32)>> get ma_audio_buffer_read_pcm_frames =>
      _library._ma_audio_buffer_read_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_audio_buffer>, ma_uint64)>>
      get ma_audio_buffer_seek_to_pcm_frame =>
          _library._ma_audio_buffer_seek_to_pcm_framePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_audio_buffer>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ma_uint64>)>> get ma_audio_buffer_map =>
      _library._ma_audio_buffer_mapPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_audio_buffer>, ma_uint64)>>
      get ma_audio_buffer_unmap => _library._ma_audio_buffer_unmapPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_audio_buffer>)>>
      get ma_audio_buffer_at_end => _library._ma_audio_buffer_at_endPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>>
      get ma_audio_buffer_get_cursor_in_pcm_frames =>
          _library._ma_audio_buffer_get_cursor_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>>
      get ma_audio_buffer_get_length_in_pcm_frames =>
          _library._ma_audio_buffer_get_length_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_audio_buffer>, ffi.Pointer<ma_uint64>)>>
      get ma_audio_buffer_get_available_frames =>
          _library._ma_audio_buffer_get_available_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Int32, ma_uint32,
                  ffi.Pointer<ma_paged_audio_buffer_data>)>>
      get ma_paged_audio_buffer_data_init =>
          _library._ma_paged_audio_buffer_data_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_paged_audio_buffer_data>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_paged_audio_buffer_data_uninit =>
          _library._ma_paged_audio_buffer_data_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_paged_audio_buffer_page> Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>)>>
      get ma_paged_audio_buffer_data_get_head =>
          _library._ma_paged_audio_buffer_data_get_headPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_paged_audio_buffer_page> Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>)>>
      get ma_paged_audio_buffer_data_get_tail =>
          _library._ma_paged_audio_buffer_data_get_tailPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer_data>,
                  ffi.Pointer<ma_uint64>)>>
      get ma_paged_audio_buffer_data_get_length_in_pcm_frames =>
          _library._ma_paged_audio_buffer_data_get_length_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>,
                  ma_uint64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_allocation_callbacks>,
                  ffi.Pointer<ffi.Pointer<ma_paged_audio_buffer_page>>)>>
      get ma_paged_audio_buffer_data_allocate_page =>
          _library._ma_paged_audio_buffer_data_allocate_pagePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>,
                  ffi.Pointer<ma_paged_audio_buffer_page>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_paged_audio_buffer_data_free_page =>
          _library._ma_paged_audio_buffer_data_free_pagePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer_data>,
                  ffi.Pointer<ma_paged_audio_buffer_page>)>>
      get ma_paged_audio_buffer_data_append_page =>
          _library._ma_paged_audio_buffer_data_append_pagePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>,
                  ma_uint32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_paged_audio_buffer_data_allocate_and_append_page =>
          _library._ma_paged_audio_buffer_data_allocate_and_append_pagePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_paged_audio_buffer_config Function(
                  ffi.Pointer<ma_paged_audio_buffer_data>)>>
      get ma_paged_audio_buffer_config_init =>
          _library._ma_paged_audio_buffer_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer_config>,
                  ffi.Pointer<ma_paged_audio_buffer>)>>
      get ma_paged_audio_buffer_init => _library._ma_paged_audio_buffer_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_paged_audio_buffer>)>>
      get ma_paged_audio_buffer_uninit =>
          _library._ma_paged_audio_buffer_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_paged_audio_buffer>,
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Pointer<ma_uint64>)>>
      get ma_paged_audio_buffer_read_pcm_frames =>
          _library._ma_paged_audio_buffer_read_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer>, ma_uint64)>>
      get ma_paged_audio_buffer_seek_to_pcm_frame =>
          _library._ma_paged_audio_buffer_seek_to_pcm_framePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer>, ffi.Pointer<ma_uint64>)>>
      get ma_paged_audio_buffer_get_cursor_in_pcm_frames =>
          _library._ma_paged_audio_buffer_get_cursor_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_paged_audio_buffer>, ffi.Pointer<ma_uint64>)>>
      get ma_paged_audio_buffer_get_length_in_pcm_frames =>
          _library._ma_paged_audio_buffer_get_length_in_pcm_framesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_rb>)>> get ma_rb_init_ex =>
      _library._ma_rb_init_exPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_rb>)>> get ma_rb_init => _library._ma_rb_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_rb>)>>
      get ma_rb_uninit => _library._ma_rb_uninitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_rb>)>>
      get ma_rb_reset => _library._ma_rb_resetPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>> get ma_rb_acquire_read =>
      _library._ma_rb_acquire_readPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Size)>>
      get ma_rb_commit_read => _library._ma_rb_commit_readPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>> get ma_rb_acquire_write =>
      _library._ma_rb_acquire_writePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Size)>>
      get ma_rb_commit_write => _library._ma_rb_commit_writePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Size)>>
      get ma_rb_seek_read => _library._ma_rb_seek_readPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_rb>, ffi.Size)>>
      get ma_rb_seek_write => _library._ma_rb_seek_writePtr;
  ffi.Pointer<ffi.NativeFunction<ma_int32 Function(ffi.Pointer<ma_rb>)>>
      get ma_rb_pointer_distance => _library._ma_rb_pointer_distancePtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_rb>)>>
      get ma_rb_available_read => _library._ma_rb_available_readPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_rb>)>>
      get ma_rb_available_write => _library._ma_rb_available_writePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ma_rb>)>>
      get ma_rb_get_subbuffer_size => _library._ma_rb_get_subbuffer_sizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ma_rb>)>>
      get ma_rb_get_subbuffer_stride => _library._ma_rb_get_subbuffer_stridePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ma_rb>, ffi.Size)>>
      get ma_rb_get_subbuffer_offset => _library._ma_rb_get_subbuffer_offsetPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ma_rb>, ffi.Size, ffi.Pointer<ffi.Void>)>>
      get ma_rb_get_subbuffer_ptr => _library._ma_rb_get_subbuffer_ptrPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_pcm_rb>)>> get ma_pcm_rb_init_ex =>
      _library._ma_pcm_rb_init_exPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_pcm_rb>)>> get ma_pcm_rb_init =>
      _library._ma_pcm_rb_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_pcm_rb>)>>
      get ma_pcm_rb_uninit => _library._ma_pcm_rb_uninitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_pcm_rb>)>>
      get ma_pcm_rb_reset => _library._ma_pcm_rb_resetPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>
      get ma_pcm_rb_acquire_read => _library._ma_pcm_rb_acquire_readPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>, ma_uint32)>>
      get ma_pcm_rb_commit_read => _library._ma_pcm_rb_commit_readPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>, ffi.Pointer<ma_uint32>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>
      get ma_pcm_rb_acquire_write => _library._ma_pcm_rb_acquire_writePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>, ma_uint32)>>
      get ma_pcm_rb_commit_write => _library._ma_pcm_rb_commit_writePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>, ma_uint32)>>
      get ma_pcm_rb_seek_read => _library._ma_pcm_rb_seek_readPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>, ma_uint32)>>
      get ma_pcm_rb_seek_write => _library._ma_pcm_rb_seek_writePtr;
  ffi.Pointer<ffi.NativeFunction<ma_int32 Function(ffi.Pointer<ma_pcm_rb>)>>
      get ma_pcm_rb_pointer_distance => _library._ma_pcm_rb_pointer_distancePtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>
      get ma_pcm_rb_available_read => _library._ma_pcm_rb_available_readPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>
      get ma_pcm_rb_available_write => _library._ma_pcm_rb_available_writePtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>
      get ma_pcm_rb_get_subbuffer_size =>
          _library._ma_pcm_rb_get_subbuffer_sizePtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>
      get ma_pcm_rb_get_subbuffer_stride =>
          _library._ma_pcm_rb_get_subbuffer_stridePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_uint32 Function(ffi.Pointer<ma_pcm_rb>, ma_uint32)>>
      get ma_pcm_rb_get_subbuffer_offset =>
          _library._ma_pcm_rb_get_subbuffer_offsetPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ma_pcm_rb>, ma_uint32, ffi.Pointer<ffi.Void>)>>
      get ma_pcm_rb_get_subbuffer_ptr =>
          _library._ma_pcm_rb_get_subbuffer_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_pcm_rb>)>>
      get ma_pcm_rb_get_format => _library._ma_pcm_rb_get_formatPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>
      get ma_pcm_rb_get_channels => _library._ma_pcm_rb_get_channelsPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_pcm_rb>)>>
      get ma_pcm_rb_get_sample_rate => _library._ma_pcm_rb_get_sample_ratePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_pcm_rb>, ma_uint32)>>
      get ma_pcm_rb_set_sample_rate => _library._ma_pcm_rb_set_sample_ratePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ma_uint32,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_duplex_rb>)>> get ma_duplex_rb_init =>
      _library._ma_duplex_rb_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_duplex_rb>)>>
      get ma_duplex_rb_uninit => _library._ma_duplex_rb_uninitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>
      get ma_result_description => _library._ma_result_descriptionPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<ma_allocation_callbacks>)>> get ma_malloc =>
      _library._ma_mallocPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<ma_allocation_callbacks>)>> get ma_calloc =>
      _library._ma_callocPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_realloc =>
      _library._ma_reallocPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_free => _library._ma_freePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Size, ffi.Size, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_aligned_malloc => _library._ma_aligned_mallocPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_aligned_free => _library._ma_aligned_freePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>
      get ma_get_format_name => _library._ma_get_format_namePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ma_uint32)>> get ma_blend_f32 => _library._ma_blend_f32Ptr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Int32)>>
      get ma_get_bytes_per_sample => _library._ma_get_bytes_per_samplePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ma_uint32)>>
      get ma_log_level_to_string => _library._ma_log_level_to_stringPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spinlock>)>>
      get ma_spinlock_lock => _library._ma_spinlock_lockPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spinlock>)>>
      get ma_spinlock_lock_noyield => _library._ma_spinlock_lock_noyieldPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_spinlock>)>>
      get ma_spinlock_unlock => _library._ma_spinlock_unlockPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_mutex>)>>
      get ma_mutex_init => _library._ma_mutex_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_mutex>)>>
      get ma_mutex_uninit => _library._ma_mutex_uninitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_mutex>)>>
      get ma_mutex_lock => _library._ma_mutex_lockPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_mutex>)>>
      get ma_mutex_unlock => _library._ma_mutex_unlockPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_event>)>>
      get ma_event_init => _library._ma_event_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_event>)>>
      get ma_event_uninit => _library._ma_event_uninitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_event>)>>
      get ma_event_wait => _library._ma_event_waitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_event>)>>
      get ma_event_signal => _library._ma_event_signalPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_fence>)>>
      get ma_fence_init => _library._ma_fence_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_fence>)>>
      get ma_fence_uninit => _library._ma_fence_uninitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_fence>)>>
      get ma_fence_acquire => _library._ma_fence_acquirePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_fence>)>>
      get ma_fence_release => _library._ma_fence_releasePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_fence>)>>
      get ma_fence_wait => _library._ma_fence_waitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification>)>>
      get ma_async_notification_signal =>
          _library._ma_async_notification_signalPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_poll>)>>
      get ma_async_notification_poll_init =>
          _library._ma_async_notification_poll_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_async_notification_poll>)>>
      get ma_async_notification_poll_is_signalled =>
          _library._ma_async_notification_poll_is_signalledPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_event>)>>
      get ma_async_notification_event_init =>
          _library._ma_async_notification_event_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_event>)>>
      get ma_async_notification_event_uninit =>
          _library._ma_async_notification_event_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_event>)>>
      get ma_async_notification_event_wait =>
          _library._ma_async_notification_event_waitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_async_notification_event>)>>
      get ma_async_notification_event_signal =>
          _library._ma_async_notification_event_signalPtr;
  ffi.Pointer<ffi.NativeFunction<ma_slot_allocator_config Function(ma_uint32)>>
      get ma_slot_allocator_config_init =>
          _library._ma_slot_allocator_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_slot_allocator_config>,
              ffi.Pointer<ffi.Size>)>> get ma_slot_allocator_get_heap_size =>
      _library._ma_slot_allocator_get_heap_sizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_slot_allocator_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_slot_allocator>)>>
      get ma_slot_allocator_init_preallocated =>
          _library._ma_slot_allocator_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_slot_allocator_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_slot_allocator>)>> get ma_slot_allocator_init =>
      _library._ma_slot_allocator_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_slot_allocator>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_slot_allocator_uninit => _library._ma_slot_allocator_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_slot_allocator>, ffi.Pointer<ma_uint64>)>>
      get ma_slot_allocator_alloc => _library._ma_slot_allocator_allocPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_slot_allocator>, ma_uint64)>>
      get ma_slot_allocator_free => _library._ma_slot_allocator_freePtr;
  ffi.Pointer<ffi.NativeFunction<ma_job Function(ma_uint16)>> get ma_job_init =>
      _library._ma_job_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_job>)>>
      get ma_job_process => _library._ma_job_processPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_job_queue_config Function(ma_uint32, ma_uint32)>>
      get ma_job_queue_config_init => _library._ma_job_queue_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_job_queue_config>, ffi.Pointer<ffi.Size>)>>
      get ma_job_queue_get_heap_size => _library._ma_job_queue_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_job_queue_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_job_queue>)>> get ma_job_queue_init_preallocated =>
      _library._ma_job_queue_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_job_queue_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_job_queue>)>> get ma_job_queue_init =>
      _library._ma_job_queue_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_job_queue>,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_job_queue_uninit =>
      _library._ma_job_queue_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_job_queue>, ffi.Pointer<ma_job>)>>
      get ma_job_queue_post => _library._ma_job_queue_postPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_job_queue>, ffi.Pointer<ma_job>)>>
      get ma_job_queue_next => _library._ma_job_queue_nextPtr;
  ffi.Pointer<ffi.NativeFunction<ma_device_job_thread_config Function()>>
      get ma_device_job_thread_config_init =>
          _library._ma_device_job_thread_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_device_job_thread_config>,
                  ffi.Pointer<ma_allocation_callbacks>,
                  ffi.Pointer<ma_device_job_thread>)>>
      get ma_device_job_thread_init => _library._ma_device_job_thread_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_device_job_thread>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_device_job_thread_uninit =>
          _library._ma_device_job_thread_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_device_job_thread>, ffi.Pointer<ma_job>)>>
      get ma_device_job_thread_post => _library._ma_device_job_thread_postPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_device_job_thread>, ffi.Pointer<ma_job>)>>
      get ma_device_job_thread_next => _library._ma_device_job_thread_nextPtr;
  ffi.Pointer<ffi.NativeFunction<ma_context_config Function()>>
      get ma_context_config_init => _library._ma_context_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int32>,
              ma_uint32,
              ffi.Pointer<ma_context_config>,
              ffi.Pointer<ma_context>)>> get ma_context_init =>
      _library._ma_context_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_context>)>>
      get ma_context_uninit => _library._ma_context_uninitPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Size Function()>> get ma_context_sizeof =>
      _library._ma_context_sizeofPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_log> Function(ffi.Pointer<ma_context>)>>
      get ma_context_get_log => _library._ma_context_get_logPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context>,
              ma_enum_devices_callback_proc,
              ffi.Pointer<ffi.Void>)>> get ma_context_enumerate_devices =>
      _library._ma_context_enumerate_devicesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context>,
              ffi.Pointer<ffi.Pointer<ma_device_info>>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ffi.Pointer<ma_device_info>>,
              ffi.Pointer<ma_uint32>)>> get ma_context_get_devices =>
      _library._ma_context_get_devicesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context>,
              ffi.Int32,
              ffi.Pointer<ma_device_id>,
              ffi.Pointer<ma_device_info>)>> get ma_context_get_device_info =>
      _library._ma_context_get_device_infoPtr;
  ffi.Pointer<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_context>)>>
      get ma_context_is_loopback_supported =>
          _library._ma_context_is_loopback_supportedPtr;
  ffi.Pointer<ffi.NativeFunction<ma_device_config Function(ffi.Int32)>>
      get ma_device_config_init => _library._ma_device_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context>,
              ffi.Pointer<ma_device_config>,
              ffi.Pointer<ma_device>)>> get ma_device_init =>
      _library._ma_device_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int32>,
              ma_uint32,
              ffi.Pointer<ma_context_config>,
              ffi.Pointer<ma_device_config>,
              ffi.Pointer<ma_device>)>> get ma_device_init_ex =>
      _library._ma_device_init_exPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_device>)>>
      get ma_device_uninit => _library._ma_device_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_context> Function(ffi.Pointer<ma_device>)>>
      get ma_device_get_context => _library._ma_device_get_contextPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_log> Function(ffi.Pointer<ma_device>)>>
      get ma_device_get_log => _library._ma_device_get_logPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device>, ffi.Int32,
              ffi.Pointer<ma_device_info>)>> get ma_device_get_info =>
      _library._ma_device_get_infoPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>> get ma_device_get_name =>
      _library._ma_device_get_namePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device>)>>
      get ma_device_start => _library._ma_device_startPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device>)>>
      get ma_device_stop => _library._ma_device_stopPtr;
  ffi.Pointer<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_device>)>>
      get ma_device_is_started => _library._ma_device_is_startedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_device>)>>
      get ma_device_get_state => _library._ma_device_get_statePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device>,
              ffi.Int32,
              ffi.Pointer<ma_device_descriptor>,
              ffi.Pointer<ma_device_descriptor>)>> get ma_device_post_init =>
      _library._ma_device_post_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_device>, ffi.Float)>>
      get ma_device_set_master_volume =>
          _library._ma_device_set_master_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_device>, ffi.Pointer<ffi.Float>)>>
      get ma_device_get_master_volume =>
          _library._ma_device_get_master_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_device>, ffi.Float)>>
      get ma_device_set_master_volume_db =>
          _library._ma_device_set_master_volume_dbPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_device>, ffi.Pointer<ffi.Float>)>>
      get ma_device_get_master_volume_db =>
          _library._ma_device_get_master_volume_dbPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint32)>> get ma_device_handle_backend_data_callback =>
      _library._ma_device_handle_backend_data_callbackPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_uint32 Function(
                  ffi.Pointer<ma_device_descriptor>, ma_uint32, ffi.Int32)>>
      get ma_calculate_buffer_size_in_frames_from_descriptor =>
          _library._ma_calculate_buffer_size_in_frames_from_descriptorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>
      get ma_get_backend_name => _library._ma_get_backend_namePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int32>)>>
      get ma_get_backend_from_name => _library._ma_get_backend_from_namePtr;
  ffi.Pointer<ffi.NativeFunction<ma_bool32 Function(ffi.Int32)>>
      get ma_is_backend_enabled => _library._ma_is_backend_enabledPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Int32>, ffi.Size, ffi.Pointer<ffi.Size>)>>
      get ma_get_enabled_backends => _library._ma_get_enabled_backendsPtr;
  ffi.Pointer<ffi.NativeFunction<ma_bool32 Function(ffi.Int32)>>
      get ma_is_loopback_supported => _library._ma_is_loopback_supportedPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ma_uint32, ma_uint32)>>
      get ma_calculate_buffer_size_in_milliseconds_from_frames =>
          _library._ma_calculate_buffer_size_in_milliseconds_from_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ma_uint32, ma_uint32)>>
      get ma_calculate_buffer_size_in_frames_from_milliseconds =>
          _library._ma_calculate_buffer_size_in_frames_from_millisecondsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32)>> get ma_copy_pcm_frames =>
      _library._ma_copy_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Int32, ma_uint32)>>
      get ma_silence_pcm_frames => _library._ma_silence_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Int32, ma_uint32)>>
      get ma_offset_pcm_frames_ptr => _library._ma_offset_pcm_frames_ptrPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Int32, ma_uint32)>>
      get ma_offset_pcm_frames_const_ptr =>
          _library._ma_offset_pcm_frames_const_ptrPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int16>, ma_uint64)>>
      get ma_clip_samples_u8 => _library._ma_clip_samples_u8Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_int16>, ffi.Pointer<ma_int32>, ma_uint64)>>
      get ma_clip_samples_s16 => _library._ma_clip_samples_s16Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_uint8>, ffi.Pointer<ma_int64>, ma_uint64)>>
      get ma_clip_samples_s24 => _library._ma_clip_samples_s24Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_int32>, ffi.Pointer<ma_int64>, ma_uint64)>>
      get ma_clip_samples_s32 => _library._ma_clip_samples_s32Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, ma_uint64)>>
      get ma_clip_samples_f32 => _library._ma_clip_samples_f32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32)>> get ma_clip_pcm_frames =>
      _library._ma_clip_pcm_framesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_uint8>,
              ffi.Pointer<ma_uint8>,
              ma_uint64,
              ffi.Float)>> get ma_copy_and_apply_volume_factor_u8 =>
      _library._ma_copy_and_apply_volume_factor_u8Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int16>,
              ffi.Pointer<ma_int16>,
              ma_uint64,
              ffi.Float)>> get ma_copy_and_apply_volume_factor_s16 =>
      _library._ma_copy_and_apply_volume_factor_s16Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Float)>> get ma_copy_and_apply_volume_factor_s24 =>
      _library._ma_copy_and_apply_volume_factor_s24Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int32>,
              ffi.Pointer<ma_int32>,
              ma_uint64,
              ffi.Float)>> get ma_copy_and_apply_volume_factor_s32 =>
      _library._ma_copy_and_apply_volume_factor_s32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ma_uint64,
              ffi.Float)>> get ma_copy_and_apply_volume_factor_f32 =>
      _library._ma_copy_and_apply_volume_factor_f32Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_uint8>, ma_uint64, ffi.Float)>>
      get ma_apply_volume_factor_u8 => _library._ma_apply_volume_factor_u8Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_int16>, ma_uint64, ffi.Float)>>
      get ma_apply_volume_factor_s16 => _library._ma_apply_volume_factor_s16Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ma_uint64, ffi.Float)>>
      get ma_apply_volume_factor_s24 => _library._ma_apply_volume_factor_s24Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_int32>, ma_uint64, ffi.Float)>>
      get ma_apply_volume_factor_s32 => _library._ma_apply_volume_factor_s32Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Float>, ma_uint64, ffi.Float)>>
      get ma_apply_volume_factor_f32 => _library._ma_apply_volume_factor_f32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_uint8>,
              ffi.Pointer<ma_uint8>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>> get ma_copy_and_apply_volume_factor_pcm_frames_u8 =>
      _library._ma_copy_and_apply_volume_factor_pcm_frames_u8Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int16>,
              ffi.Pointer<ma_int16>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>> get ma_copy_and_apply_volume_factor_pcm_frames_s16 =>
      _library._ma_copy_and_apply_volume_factor_pcm_frames_s16Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>> get ma_copy_and_apply_volume_factor_pcm_frames_s24 =>
      _library._ma_copy_and_apply_volume_factor_pcm_frames_s24Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int32>,
              ffi.Pointer<ma_int32>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>> get ma_copy_and_apply_volume_factor_pcm_frames_s32 =>
      _library._ma_copy_and_apply_volume_factor_pcm_frames_s32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>> get ma_copy_and_apply_volume_factor_pcm_frames_f32 =>
      _library._ma_copy_and_apply_volume_factor_pcm_frames_f32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ffi.Float)>> get ma_copy_and_apply_volume_factor_pcm_frames =>
      _library._ma_copy_and_apply_volume_factor_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_uint8>, ma_uint64, ma_uint32, ffi.Float)>>
      get ma_apply_volume_factor_pcm_frames_u8 =>
          _library._ma_apply_volume_factor_pcm_frames_u8Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_int16>, ma_uint64, ma_uint32, ffi.Float)>>
      get ma_apply_volume_factor_pcm_frames_s16 =>
          _library._ma_apply_volume_factor_pcm_frames_s16Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ma_uint64, ma_uint32, ffi.Float)>>
      get ma_apply_volume_factor_pcm_frames_s24 =>
          _library._ma_apply_volume_factor_pcm_frames_s24Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_int32>, ma_uint64, ma_uint32, ffi.Float)>>
      get ma_apply_volume_factor_pcm_frames_s32 =>
          _library._ma_apply_volume_factor_pcm_frames_s32Ptr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Float>, ma_uint64, ma_uint32, ffi.Float)>>
      get ma_apply_volume_factor_pcm_frames_f32 =>
          _library._ma_apply_volume_factor_pcm_frames_f32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ffi.Float)>> get ma_apply_volume_factor_pcm_frames =>
      _library._ma_apply_volume_factor_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
                  ma_uint64, ma_uint32, ffi.Pointer<ffi.Float>)>>
      get ma_copy_and_apply_volume_factor_per_channel_f32 =>
          _library._ma_copy_and_apply_volume_factor_per_channel_f32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_uint8>,
              ffi.Pointer<ma_int16>,
              ma_uint64,
              ffi.Float)>> get ma_copy_and_apply_volume_and_clip_samples_u8 =>
      _library._ma_copy_and_apply_volume_and_clip_samples_u8Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int16>,
              ffi.Pointer<ma_int32>,
              ma_uint64,
              ffi.Float)>> get ma_copy_and_apply_volume_and_clip_samples_s16 =>
      _library._ma_copy_and_apply_volume_and_clip_samples_s16Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_uint8>,
              ffi.Pointer<ma_int64>,
              ma_uint64,
              ffi.Float)>> get ma_copy_and_apply_volume_and_clip_samples_s24 =>
      _library._ma_copy_and_apply_volume_and_clip_samples_s24Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_int32>,
              ffi.Pointer<ma_int64>,
              ma_uint64,
              ffi.Float)>> get ma_copy_and_apply_volume_and_clip_samples_s32 =>
      _library._ma_copy_and_apply_volume_and_clip_samples_s32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ma_uint64,
              ffi.Float)>> get ma_copy_and_apply_volume_and_clip_samples_f32 =>
      _library._ma_copy_and_apply_volume_and_clip_samples_f32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ffi.Float)>> get ma_copy_and_apply_volume_and_clip_pcm_frames =>
      _library._ma_copy_and_apply_volume_and_clip_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>
      get ma_volume_linear_to_db => _library._ma_volume_linear_to_dbPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>
      get ma_volume_db_to_linear => _library._ma_volume_db_to_linearPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ma_uint64,
              ma_uint32,
              ffi.Float)>> get ma_mix_pcm_frames_f32 =>
      _library._ma_mix_pcm_frames_f32Ptr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Char>,
              ma_uint32,
              ffi.Pointer<ma_vfs_file>)>> get ma_vfs_open =>
      _library._ma_vfs_openPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.WChar>,
              ma_uint32,
              ffi.Pointer<ma_vfs_file>)>> get ma_vfs_open_w =>
      _library._ma_vfs_open_wPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_vfs>, ma_vfs_file)>>
      get ma_vfs_close => _library._ma_vfs_closePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ma_vfs_file,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>> get ma_vfs_read =>
      _library._ma_vfs_readPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ma_vfs_file,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Size>)>> get ma_vfs_write =>
      _library._ma_vfs_writePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_vfs>, ma_vfs_file, ma_int64, ffi.Int32)>>
      get ma_vfs_seek => _library._ma_vfs_seekPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ma_int64>)>>
      get ma_vfs_tell => _library._ma_vfs_tellPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_vfs>, ma_vfs_file, ffi.Pointer<ma_file_info>)>>
      get ma_vfs_info => _library._ma_vfs_infoPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_vfs>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_vfs_open_and_read_file => _library._ma_vfs_open_and_read_filePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_default_vfs>,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_default_vfs_init =>
      _library._ma_default_vfs_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_decoding_backend_config Function(ffi.Int32, ma_uint32)>>
      get ma_decoding_backend_config_init =>
          _library._ma_decoding_backend_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_decoder_config Function(ffi.Int32, ma_uint32, ma_uint32)>>
      get ma_decoder_config_init => _library._ma_decoder_config_initPtr;
  ffi.Pointer<ffi.NativeFunction<ma_decoder_config Function()>>
      get ma_decoder_config_init_default =>
          _library._ma_decoder_config_init_defaultPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ma_decoder_read_proc,
              ma_decoder_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>> get ma_decoder_init =>
      _library._ma_decoder_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>> get ma_decoder_init_memory =>
      _library._ma_decoder_init_memoryPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>> get ma_decoder_init_vfs =>
      _library._ma_decoder_init_vfsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>> get ma_decoder_init_vfs_w =>
      _library._ma_decoder_init_vfs_wPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>> get ma_decoder_init_file =>
      _library._ma_decoder_init_filePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_decoder>)>> get ma_decoder_init_file_w =>
      _library._ma_decoder_init_file_wPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_decoder>)>>
      get ma_decoder_uninit => _library._ma_decoder_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_decoder>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>> get ma_decoder_read_pcm_frames =>
      _library._ma_decoder_read_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_decoder>, ma_uint64)>>
      get ma_decoder_seek_to_pcm_frame =>
          _library._ma_decoder_seek_to_pcm_framePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_decoder>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>> get ma_decoder_get_data_format =>
      _library._ma_decoder_get_data_formatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_decoder>, ffi.Pointer<ma_uint64>)>>
      get ma_decoder_get_cursor_in_pcm_frames =>
          _library._ma_decoder_get_cursor_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_decoder>, ffi.Pointer<ma_uint64>)>>
      get ma_decoder_get_length_in_pcm_frames =>
          _library._ma_decoder_get_length_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_decoder>, ffi.Pointer<ma_uint64>)>>
      get ma_decoder_get_available_frames =>
          _library._ma_decoder_get_available_framesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>> get ma_decode_from_vfs =>
      _library._ma_decode_from_vfsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>> get ma_decode_file =>
      _library._ma_decode_filePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ma_decoder_config>,
              ffi.Pointer<ma_uint64>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>> get ma_decode_memory =>
      _library._ma_decode_memoryPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_encoder_config Function(
                  ffi.Int32, ffi.Int32, ma_uint32, ma_uint32)>>
      get ma_encoder_config_init => _library._ma_encoder_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ma_encoder_write_proc,
              ma_encoder_seek_proc,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>> get ma_encoder_init =>
      _library._ma_encoder_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>> get ma_encoder_init_vfs =>
      _library._ma_encoder_init_vfsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>> get ma_encoder_init_vfs_w =>
      _library._ma_encoder_init_vfs_wPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>> get ma_encoder_init_file =>
      _library._ma_encoder_init_filePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ma_encoder_config>,
              ffi.Pointer<ma_encoder>)>> get ma_encoder_init_file_w =>
      _library._ma_encoder_init_file_wPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_encoder>)>>
      get ma_encoder_uninit => _library._ma_encoder_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_encoder>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>> get ma_encoder_write_pcm_frames =>
      _library._ma_encoder_write_pcm_framesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ma_waveform_config Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Int32,
              ffi.Double,
              ffi.Double)>> get ma_waveform_config_init =>
      _library._ma_waveform_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_waveform_config>, ffi.Pointer<ma_waveform>)>>
      get ma_waveform_init => _library._ma_waveform_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_waveform>)>>
      get ma_waveform_uninit => _library._ma_waveform_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_waveform>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>> get ma_waveform_read_pcm_frames =>
      _library._ma_waveform_read_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_waveform>, ma_uint64)>>
      get ma_waveform_seek_to_pcm_frame =>
          _library._ma_waveform_seek_to_pcm_framePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_waveform>, ffi.Double)>>
      get ma_waveform_set_amplitude => _library._ma_waveform_set_amplitudePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_waveform>, ffi.Double)>>
      get ma_waveform_set_frequency => _library._ma_waveform_set_frequencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_waveform>, ffi.Int32)>>
      get ma_waveform_set_type => _library._ma_waveform_set_typePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_waveform>, ma_uint32)>>
      get ma_waveform_set_sample_rate =>
          _library._ma_waveform_set_sample_ratePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ma_pulsewave_config Function(
              ffi.Int32,
              ma_uint32,
              ma_uint32,
              ffi.Double,
              ffi.Double,
              ffi.Double)>> get ma_pulsewave_config_init =>
      _library._ma_pulsewave_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_pulsewave_config>, ffi.Pointer<ma_pulsewave>)>>
      get ma_pulsewave_init => _library._ma_pulsewave_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_pulsewave>)>>
      get ma_pulsewave_uninit => _library._ma_pulsewave_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_pulsewave>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>> get ma_pulsewave_read_pcm_frames =>
      _library._ma_pulsewave_read_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_pulsewave>, ma_uint64)>>
      get ma_pulsewave_seek_to_pcm_frame =>
          _library._ma_pulsewave_seek_to_pcm_framePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_pulsewave>, ffi.Double)>>
      get ma_pulsewave_set_amplitude => _library._ma_pulsewave_set_amplitudePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_pulsewave>, ffi.Double)>>
      get ma_pulsewave_set_frequency => _library._ma_pulsewave_set_frequencyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_pulsewave>, ma_uint32)>>
      get ma_pulsewave_set_sample_rate =>
          _library._ma_pulsewave_set_sample_ratePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_pulsewave>, ffi.Double)>>
      get ma_pulsewave_set_duty_cycle =>
          _library._ma_pulsewave_set_duty_cyclePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_noise_config Function(
                  ffi.Int32, ma_uint32, ffi.Int32, ma_int32, ffi.Double)>>
      get ma_noise_config_init => _library._ma_noise_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_noise_config>, ffi.Pointer<ffi.Size>)>>
      get ma_noise_get_heap_size => _library._ma_noise_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_noise_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_noise>)>> get ma_noise_init_preallocated =>
      _library._ma_noise_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_noise_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_noise>)>> get ma_noise_init =>
      _library._ma_noise_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_noise>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_noise_uninit => _library._ma_noise_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_noise>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>> get ma_noise_read_pcm_frames =>
      _library._ma_noise_read_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_noise>, ffi.Double)>>
      get ma_noise_set_amplitude => _library._ma_noise_set_amplitudePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_noise>, ma_int32)>>
      get ma_noise_set_seed => _library._ma_noise_set_seedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_noise>, ffi.Int32)>>
      get ma_noise_set_type => _library._ma_noise_set_typePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_resource_manager_pipeline_notifications Function()>>
      get ma_resource_manager_pipeline_notifications_init =>
          _library._ma_resource_manager_pipeline_notifications_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_resource_manager_data_source_config Function()>>
      get ma_resource_manager_data_source_config_init =>
          _library._ma_resource_manager_data_source_config_initPtr;
  ffi.Pointer<ffi.NativeFunction<ma_resource_manager_config Function()>>
      get ma_resource_manager_config_init =>
          _library._ma_resource_manager_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_config>,
                  ffi.Pointer<ma_resource_manager>)>>
      get ma_resource_manager_init => _library._ma_resource_manager_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_resource_manager>)>>
      get ma_resource_manager_uninit => _library._ma_resource_manager_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_log> Function(ffi.Pointer<ma_resource_manager>)>>
      get ma_resource_manager_get_log =>
          _library._ma_resource_manager_get_logPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              ma_uint32)>> get ma_resource_manager_register_file =>
      _library._ma_resource_manager_register_filePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              ma_uint32)>> get ma_resource_manager_register_file_w =>
      _library._ma_resource_manager_register_file_wPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32)>> get ma_resource_manager_register_decoded_data =>
      _library._ma_resource_manager_register_decoded_dataPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Int32,
              ma_uint32,
              ma_uint32)>> get ma_resource_manager_register_decoded_data_w =>
      _library._ma_resource_manager_register_decoded_data_wPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>> get ma_resource_manager_register_encoded_data =>
      _library._ma_resource_manager_register_encoded_dataPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Void>,
              ffi.Size)>> get ma_resource_manager_register_encoded_data_w =>
      _library._ma_resource_manager_register_encoded_data_wPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.Char>)>>
      get ma_resource_manager_unregister_file =>
          _library._ma_resource_manager_unregister_filePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>)>>
      get ma_resource_manager_unregister_file_w =>
          _library._ma_resource_manager_unregister_file_wPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.Char>)>>
      get ma_resource_manager_unregister_data =>
          _library._ma_resource_manager_unregister_dataPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>, ffi.Pointer<ffi.WChar>)>>
      get ma_resource_manager_unregister_data_w =>
          _library._ma_resource_manager_unregister_data_wPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_source_config>,
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>
      get ma_resource_manager_data_buffer_init_ex =>
          _library._ma_resource_manager_data_buffer_init_exPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.Char>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>
      get ma_resource_manager_data_buffer_init =>
          _library._ma_resource_manager_data_buffer_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.WChar>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>
      get ma_resource_manager_data_buffer_init_w =>
          _library._ma_resource_manager_data_buffer_init_wPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_buffer>,
                  ffi.Pointer<ma_resource_manager_data_buffer>)>>
      get ma_resource_manager_data_buffer_init_copy =>
          _library._ma_resource_manager_data_buffer_init_copyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>)>>
      get ma_resource_manager_data_buffer_uninit =>
          _library._ma_resource_manager_data_buffer_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>,
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Pointer<ma_uint64>)>>
      get ma_resource_manager_data_buffer_read_pcm_frames =>
          _library._ma_resource_manager_data_buffer_read_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_buffer>, ma_uint64)>>
      get ma_resource_manager_data_buffer_seek_to_pcm_frame =>
          _library._ma_resource_manager_data_buffer_seek_to_pcm_framePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager_data_buffer>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>> get ma_resource_manager_data_buffer_get_data_format =>
      _library._ma_resource_manager_data_buffer_get_data_formatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>,
                  ffi.Pointer<ma_uint64>)>>
      get ma_resource_manager_data_buffer_get_cursor_in_pcm_frames =>
          _library._ma_resource_manager_data_buffer_get_cursor_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>,
                  ffi.Pointer<ma_uint64>)>>
      get ma_resource_manager_data_buffer_get_length_in_pcm_frames =>
          _library._ma_resource_manager_data_buffer_get_length_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>)>>
      get ma_resource_manager_data_buffer_result =>
          _library._ma_resource_manager_data_buffer_resultPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_buffer>, ma_bool32)>>
      get ma_resource_manager_data_buffer_set_looping =>
          _library._ma_resource_manager_data_buffer_set_loopingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_resource_manager_data_buffer>)>>
      get ma_resource_manager_data_buffer_is_looping =>
          _library._ma_resource_manager_data_buffer_is_loopingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_buffer>,
                  ffi.Pointer<ma_uint64>)>>
      get ma_resource_manager_data_buffer_get_available_frames =>
          _library._ma_resource_manager_data_buffer_get_available_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_source_config>,
                  ffi.Pointer<ma_resource_manager_data_stream>)>>
      get ma_resource_manager_data_stream_init_ex =>
          _library._ma_resource_manager_data_stream_init_exPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.Char>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_stream>)>>
      get ma_resource_manager_data_stream_init =>
          _library._ma_resource_manager_data_stream_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.WChar>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_stream>)>>
      get ma_resource_manager_data_stream_init_w =>
          _library._ma_resource_manager_data_stream_init_wPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>)>>
      get ma_resource_manager_data_stream_uninit =>
          _library._ma_resource_manager_data_stream_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>,
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Pointer<ma_uint64>)>>
      get ma_resource_manager_data_stream_read_pcm_frames =>
          _library._ma_resource_manager_data_stream_read_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_stream>, ma_uint64)>>
      get ma_resource_manager_data_stream_seek_to_pcm_frame =>
          _library._ma_resource_manager_data_stream_seek_to_pcm_framePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager_data_stream>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>> get ma_resource_manager_data_stream_get_data_format =>
      _library._ma_resource_manager_data_stream_get_data_formatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>,
                  ffi.Pointer<ma_uint64>)>>
      get ma_resource_manager_data_stream_get_cursor_in_pcm_frames =>
          _library._ma_resource_manager_data_stream_get_cursor_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>,
                  ffi.Pointer<ma_uint64>)>>
      get ma_resource_manager_data_stream_get_length_in_pcm_frames =>
          _library._ma_resource_manager_data_stream_get_length_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>)>>
      get ma_resource_manager_data_stream_result =>
          _library._ma_resource_manager_data_stream_resultPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_stream>, ma_bool32)>>
      get ma_resource_manager_data_stream_set_looping =>
          _library._ma_resource_manager_data_stream_set_loopingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_resource_manager_data_stream>)>>
      get ma_resource_manager_data_stream_is_looping =>
          _library._ma_resource_manager_data_stream_is_loopingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_stream>,
                  ffi.Pointer<ma_uint64>)>>
      get ma_resource_manager_data_stream_get_available_frames =>
          _library._ma_resource_manager_data_stream_get_available_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_source_config>,
                  ffi.Pointer<ma_resource_manager_data_source>)>>
      get ma_resource_manager_data_source_init_ex =>
          _library._ma_resource_manager_data_source_init_exPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.Char>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_source>)>>
      get ma_resource_manager_data_source_init =>
          _library._ma_resource_manager_data_source_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ffi.WChar>,
                  ma_uint32,
                  ffi.Pointer<ma_resource_manager_pipeline_notifications>,
                  ffi.Pointer<ma_resource_manager_data_source>)>>
      get ma_resource_manager_data_source_init_w =>
          _library._ma_resource_manager_data_source_init_wPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>,
                  ffi.Pointer<ma_resource_manager_data_source>,
                  ffi.Pointer<ma_resource_manager_data_source>)>>
      get ma_resource_manager_data_source_init_copy =>
          _library._ma_resource_manager_data_source_init_copyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>)>>
      get ma_resource_manager_data_source_uninit =>
          _library._ma_resource_manager_data_source_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>,
                  ffi.Pointer<ffi.Void>, ma_uint64, ffi.Pointer<ma_uint64>)>>
      get ma_resource_manager_data_source_read_pcm_frames =>
          _library._ma_resource_manager_data_source_read_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_source>, ma_uint64)>>
      get ma_resource_manager_data_source_seek_to_pcm_frame =>
          _library._ma_resource_manager_data_source_seek_to_pcm_framePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_resource_manager_data_source>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>> get ma_resource_manager_data_source_get_data_format =>
      _library._ma_resource_manager_data_source_get_data_formatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>,
                  ffi.Pointer<ma_uint64>)>>
      get ma_resource_manager_data_source_get_cursor_in_pcm_frames =>
          _library._ma_resource_manager_data_source_get_cursor_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>,
                  ffi.Pointer<ma_uint64>)>>
      get ma_resource_manager_data_source_get_length_in_pcm_frames =>
          _library._ma_resource_manager_data_source_get_length_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>)>>
      get ma_resource_manager_data_source_result =>
          _library._ma_resource_manager_data_source_resultPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager_data_source>, ma_bool32)>>
      get ma_resource_manager_data_source_set_looping =>
          _library._ma_resource_manager_data_source_set_loopingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_resource_manager_data_source>)>>
      get ma_resource_manager_data_source_is_looping =>
          _library._ma_resource_manager_data_source_is_loopingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager_data_source>,
                  ffi.Pointer<ma_uint64>)>>
      get ma_resource_manager_data_source_get_available_frames =>
          _library._ma_resource_manager_data_source_get_available_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>, ffi.Pointer<ma_job>)>>
      get ma_resource_manager_post_job =>
          _library._ma_resource_manager_post_jobPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager>)>>
      get ma_resource_manager_post_job_quit =>
          _library._ma_resource_manager_post_job_quitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>, ffi.Pointer<ma_job>)>>
      get ma_resource_manager_next_job =>
          _library._ma_resource_manager_next_jobPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_resource_manager>, ffi.Pointer<ma_job>)>>
      get ma_resource_manager_process_job =>
          _library._ma_resource_manager_process_jobPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_resource_manager>)>>
      get ma_resource_manager_process_next_job =>
          _library._ma_resource_manager_process_next_jobPtr;
  ffi.Pointer<ffi.NativeFunction<ma_node_config Function()>>
      get ma_node_config_init => _library._ma_node_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_node_config>,
              ffi.Pointer<ffi.Size>)>> get ma_node_get_heap_size =>
      _library._ma_node_get_heap_sizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_node_config>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ma_node>)>> get ma_node_init_preallocated =>
      _library._ma_node_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_node>)>> get ma_node_init =>
      _library._ma_node_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_node>, ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_node_uninit => _library._ma_node_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_node_graph> Function(ffi.Pointer<ma_node>)>>
      get ma_node_get_node_graph => _library._ma_node_get_node_graphPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_node>)>>
      get ma_node_get_input_bus_count =>
          _library._ma_node_get_input_bus_countPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_node>)>>
      get ma_node_get_output_bus_count =>
          _library._ma_node_get_output_bus_countPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_uint32 Function(ffi.Pointer<ma_node>, ma_uint32)>>
      get ma_node_get_input_channels => _library._ma_node_get_input_channelsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_uint32 Function(ffi.Pointer<ma_node>, ma_uint32)>>
      get ma_node_get_output_channels =>
          _library._ma_node_get_output_channelsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node>,
              ma_uint32,
              ffi.Pointer<ma_node>,
              ma_uint32)>> get ma_node_attach_output_bus =>
      _library._ma_node_attach_output_busPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint32)>>
      get ma_node_detach_output_bus => _library._ma_node_detach_output_busPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_node>)>>
      get ma_node_detach_all_output_buses =>
          _library._ma_node_detach_all_output_busesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint32, ffi.Float)>>
      get ma_node_set_output_bus_volume =>
          _library._ma_node_set_output_bus_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Float Function(ffi.Pointer<ma_node>, ma_uint32)>>
      get ma_node_get_output_bus_volume =>
          _library._ma_node_get_output_bus_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_node>, ffi.Int32)>>
      get ma_node_set_state => _library._ma_node_set_statePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_node>)>>
      get ma_node_get_state => _library._ma_node_get_statePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_node>, ffi.Int32, ma_uint64)>>
      get ma_node_set_state_time => _library._ma_node_set_state_timePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_uint64 Function(ffi.Pointer<ma_node>, ffi.Int32)>>
      get ma_node_get_state_time => _library._ma_node_get_state_timePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint64)>>
      get ma_node_get_state_by_time => _library._ma_node_get_state_by_timePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint64, ma_uint64)>>
      get ma_node_get_state_by_time_range =>
          _library._ma_node_get_state_by_time_rangePtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_node>)>>
      get ma_node_get_time => _library._ma_node_get_timePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_node>, ma_uint64)>>
      get ma_node_set_time => _library._ma_node_set_timePtr;
  ffi.Pointer<ffi.NativeFunction<ma_node_graph_config Function(ma_uint32)>>
      get ma_node_graph_config_init => _library._ma_node_graph_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_node_graph>)>> get ma_node_graph_init =>
      _library._ma_node_graph_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_node_graph>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_node_graph_uninit => _library._ma_node_graph_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_node> Function(ffi.Pointer<ma_node_graph>)>>
      get ma_node_graph_get_endpoint => _library._ma_node_graph_get_endpointPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>> get ma_node_graph_read_pcm_frames =>
      _library._ma_node_graph_read_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_node_graph>)>>
      get ma_node_graph_get_channels => _library._ma_node_graph_get_channelsPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_node_graph>)>>
      get ma_node_graph_get_time => _library._ma_node_graph_get_timePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_node_graph>, ma_uint64)>>
      get ma_node_graph_set_time => _library._ma_node_graph_set_timePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_data_source_node_config Function(ffi.Pointer<ma_data_source>)>>
      get ma_data_source_node_config_init =>
          _library._ma_data_source_node_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_node_graph>,
                  ffi.Pointer<ma_data_source_node_config>,
                  ffi.Pointer<ma_allocation_callbacks>,
                  ffi.Pointer<ma_data_source_node>)>>
      get ma_data_source_node_init => _library._ma_data_source_node_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_data_source_node>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_data_source_node_uninit => _library._ma_data_source_node_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_data_source_node>, ma_bool32)>>
      get ma_data_source_node_set_looping =>
          _library._ma_data_source_node_set_loopingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_data_source_node>)>>
      get ma_data_source_node_is_looping =>
          _library._ma_data_source_node_is_loopingPtr;
  ffi.Pointer<ffi.NativeFunction<ma_splitter_node_config Function(ma_uint32)>>
      get ma_splitter_node_config_init =>
          _library._ma_splitter_node_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_splitter_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_splitter_node>)>> get ma_splitter_node_init =>
      _library._ma_splitter_node_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_splitter_node>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_splitter_node_uninit => _library._ma_splitter_node_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ma_biquad_node_config Function(
              ma_uint32,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>> get ma_biquad_node_config_init =>
      _library._ma_biquad_node_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_biquad_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_biquad_node>)>> get ma_biquad_node_init =>
      _library._ma_biquad_node_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_biquad_config>, ffi.Pointer<ma_biquad_node>)>>
      get ma_biquad_node_reinit => _library._ma_biquad_node_reinitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_biquad_node>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_biquad_node_uninit => _library._ma_biquad_node_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_lpf_node_config Function(
                  ma_uint32, ma_uint32, ffi.Double, ma_uint32)>>
      get ma_lpf_node_config_init => _library._ma_lpf_node_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_lpf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_lpf_node>)>> get ma_lpf_node_init =>
      _library._ma_lpf_node_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_lpf_config>, ffi.Pointer<ma_lpf_node>)>>
      get ma_lpf_node_reinit => _library._ma_lpf_node_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_lpf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_lpf_node_uninit =>
      _library._ma_lpf_node_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_hpf_node_config Function(
                  ma_uint32, ma_uint32, ffi.Double, ma_uint32)>>
      get ma_hpf_node_config_init => _library._ma_hpf_node_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_hpf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hpf_node>)>> get ma_hpf_node_init =>
      _library._ma_hpf_node_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_hpf_config>, ffi.Pointer<ma_hpf_node>)>>
      get ma_hpf_node_reinit => _library._ma_hpf_node_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_hpf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_hpf_node_uninit =>
      _library._ma_hpf_node_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bpf_node_config Function(
                  ma_uint32, ma_uint32, ffi.Double, ma_uint32)>>
      get ma_bpf_node_config_init => _library._ma_bpf_node_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_bpf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_bpf_node>)>> get ma_bpf_node_init =>
      _library._ma_bpf_node_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_bpf_config>, ffi.Pointer<ma_bpf_node>)>>
      get ma_bpf_node_reinit => _library._ma_bpf_node_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_bpf_node>,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_bpf_node_uninit =>
      _library._ma_bpf_node_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_notch_node_config Function(
                  ma_uint32, ma_uint32, ffi.Double, ffi.Double)>>
      get ma_notch_node_config_init => _library._ma_notch_node_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_notch_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_notch_node>)>> get ma_notch_node_init =>
      _library._ma_notch_node_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_notch_config>, ffi.Pointer<ma_notch_node>)>>
      get ma_notch_node_reinit => _library._ma_notch_node_reinitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_notch_node>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_notch_node_uninit => _library._ma_notch_node_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_peak_node_config Function(
                  ma_uint32, ma_uint32, ffi.Double, ffi.Double, ffi.Double)>>
      get ma_peak_node_config_init => _library._ma_peak_node_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_peak_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_peak_node>)>> get ma_peak_node_init =>
      _library._ma_peak_node_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_peak_config>, ffi.Pointer<ma_peak_node>)>>
      get ma_peak_node_reinit => _library._ma_peak_node_reinitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_peak_node>,
              ffi.Pointer<ma_allocation_callbacks>)>> get ma_peak_node_uninit =>
      _library._ma_peak_node_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_loshelf_node_config Function(
                  ma_uint32, ma_uint32, ffi.Double, ffi.Double, ffi.Double)>>
      get ma_loshelf_node_config_init =>
          _library._ma_loshelf_node_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_loshelf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_loshelf_node>)>> get ma_loshelf_node_init =>
      _library._ma_loshelf_node_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_loshelf_config>,
              ffi.Pointer<ma_loshelf_node>)>> get ma_loshelf_node_reinit =>
      _library._ma_loshelf_node_reinitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_loshelf_node>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_loshelf_node_uninit => _library._ma_loshelf_node_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_hishelf_node_config Function(
                  ma_uint32, ma_uint32, ffi.Double, ffi.Double, ffi.Double)>>
      get ma_hishelf_node_config_init =>
          _library._ma_hishelf_node_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_hishelf_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_hishelf_node>)>> get ma_hishelf_node_init =>
      _library._ma_hishelf_node_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_hishelf_config>,
              ffi.Pointer<ma_hishelf_node>)>> get ma_hishelf_node_reinit =>
      _library._ma_hishelf_node_reinitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_hishelf_node>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_hishelf_node_uninit => _library._ma_hishelf_node_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_delay_node_config Function(
                  ma_uint32, ma_uint32, ma_uint32, ffi.Float)>>
      get ma_delay_node_config_init => _library._ma_delay_node_config_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_node_graph>,
              ffi.Pointer<ma_delay_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_delay_node>)>> get ma_delay_node_init =>
      _library._ma_delay_node_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_delay_node>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_delay_node_uninit => _library._ma_delay_node_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_delay_node>, ffi.Float)>>
      get ma_delay_node_set_wet => _library._ma_delay_node_set_wetPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay_node>)>>
      get ma_delay_node_get_wet => _library._ma_delay_node_get_wetPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_delay_node>, ffi.Float)>>
      get ma_delay_node_set_dry => _library._ma_delay_node_set_dryPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay_node>)>>
      get ma_delay_node_get_dry => _library._ma_delay_node_get_dryPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_delay_node>, ffi.Float)>>
      get ma_delay_node_set_decay => _library._ma_delay_node_set_decayPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_delay_node>)>>
      get ma_delay_node_get_decay => _library._ma_delay_node_get_decayPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_engine_node_config Function(
                  ffi.Pointer<ma_engine>, ffi.Int32, ma_uint32)>>
      get ma_engine_node_config_init => _library._ma_engine_node_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_engine_node_config>, ffi.Pointer<ffi.Size>)>>
      get ma_engine_node_get_heap_size =>
          _library._ma_engine_node_get_heap_sizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_engine_node_config>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ma_engine_node>)>>
      get ma_engine_node_init_preallocated =>
          _library._ma_engine_node_init_preallocatedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine_node_config>,
              ffi.Pointer<ma_allocation_callbacks>,
              ffi.Pointer<ma_engine_node>)>> get ma_engine_node_init =>
      _library._ma_engine_node_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_engine_node>,
                  ffi.Pointer<ma_allocation_callbacks>)>>
      get ma_engine_node_uninit => _library._ma_engine_node_uninitPtr;
  ffi.Pointer<ffi.NativeFunction<ma_sound_config Function()>>
      get ma_sound_config_init => _library._ma_sound_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_sound_config Function(ffi.Pointer<ma_engine>)>>
      get ma_sound_config_init_2 => _library._ma_sound_config_init_2Ptr;
  ffi.Pointer<ffi.NativeFunction<ma_sound_group_config Function()>>
      get ma_sound_group_config_init => _library._ma_sound_group_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_sound_group_config Function(ffi.Pointer<ma_engine>)>>
      get ma_sound_group_config_init_2 =>
          _library._ma_sound_group_config_init_2Ptr;
  ffi.Pointer<ffi.NativeFunction<ma_engine_config Function()>>
      get ma_engine_config_init => _library._ma_engine_config_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_engine_config>, ffi.Pointer<ma_engine>)>>
      get ma_engine_init => _library._ma_engine_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_uninit => _library._ma_engine_uninitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ffi.Void>,
              ma_uint64,
              ffi.Pointer<ma_uint64>)>> get ma_engine_read_pcm_frames =>
      _library._ma_engine_read_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_node_graph> Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_get_node_graph => _library._ma_engine_get_node_graphPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ma_resource_manager> Function(
              ffi.Pointer<ma_engine>)>> get ma_engine_get_resource_manager =>
      _library._ma_engine_get_resource_managerPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_device> Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_get_device => _library._ma_engine_get_devicePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_log> Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_get_log => _library._ma_engine_get_logPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_node> Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_get_endpoint => _library._ma_engine_get_endpointPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_get_time_in_pcm_frames =>
          _library._ma_engine_get_time_in_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_get_time_in_milliseconds =>
          _library._ma_engine_get_time_in_millisecondsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_engine>, ma_uint64)>>
      get ma_engine_set_time_in_pcm_frames =>
          _library._ma_engine_set_time_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_engine>, ma_uint64)>>
      get ma_engine_set_time_in_milliseconds =>
          _library._ma_engine_set_time_in_millisecondsPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_get_time => _library._ma_engine_get_timePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_engine>, ma_uint64)>>
      get ma_engine_set_time => _library._ma_engine_set_timePtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_get_channels => _library._ma_engine_get_channelsPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_get_sample_rate => _library._ma_engine_get_sample_ratePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_start => _library._ma_engine_startPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_stop => _library._ma_engine_stopPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_engine>, ffi.Float)>>
      get ma_engine_set_volume => _library._ma_engine_set_volumePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_get_volume => _library._ma_engine_get_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_engine>, ffi.Float)>>
      get ma_engine_set_gain_db => _library._ma_engine_set_gain_dbPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_get_gain_db => _library._ma_engine_get_gain_dbPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_engine>)>>
      get ma_engine_get_listener_count =>
          _library._ma_engine_get_listener_countPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_uint32 Function(
                  ffi.Pointer<ma_engine>, ffi.Float, ffi.Float, ffi.Float)>>
      get ma_engine_find_closest_listener =>
          _library._ma_engine_find_closest_listenerPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_engine>,
              ma_uint32,
              ffi.Float,
              ffi.Float,
              ffi.Float)>> get ma_engine_listener_set_position =>
      _library._ma_engine_listener_set_positionPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_engine>, ma_uint32)>>
      get ma_engine_listener_get_position =>
          _library._ma_engine_listener_get_positionPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_engine>,
              ma_uint32,
              ffi.Float,
              ffi.Float,
              ffi.Float)>> get ma_engine_listener_set_direction =>
      _library._ma_engine_listener_set_directionPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_engine>, ma_uint32)>>
      get ma_engine_listener_get_direction =>
          _library._ma_engine_listener_get_directionPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_engine>,
              ma_uint32,
              ffi.Float,
              ffi.Float,
              ffi.Float)>> get ma_engine_listener_set_velocity =>
      _library._ma_engine_listener_set_velocityPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_engine>, ma_uint32)>>
      get ma_engine_listener_get_velocity =>
          _library._ma_engine_listener_get_velocityPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_engine>,
              ma_uint32,
              ffi.Float,
              ffi.Float,
              ffi.Float)>> get ma_engine_listener_set_cone =>
      _library._ma_engine_listener_set_conePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_engine>,
              ma_uint32,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>> get ma_engine_listener_get_cone =>
      _library._ma_engine_listener_get_conePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_engine>,
              ma_uint32,
              ffi.Float,
              ffi.Float,
              ffi.Float)>> get ma_engine_listener_set_world_up =>
      _library._ma_engine_listener_set_world_upPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_vec3f Function(ffi.Pointer<ma_engine>, ma_uint32)>>
      get ma_engine_listener_get_world_up =>
          _library._ma_engine_listener_get_world_upPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_engine>, ma_uint32, ma_bool32)>>
      get ma_engine_listener_set_enabled =>
          _library._ma_engine_listener_set_enabledPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ma_bool32 Function(ffi.Pointer<ma_engine>, ma_uint32)>>
      get ma_engine_listener_is_enabled =>
          _library._ma_engine_listener_is_enabledPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_node>,
              ma_uint32)>> get ma_engine_play_sound_ex =>
      _library._ma_engine_play_sound_exPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_engine>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ma_sound_group>)>> get ma_engine_play_sound =>
      _library._ma_engine_play_soundPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ffi.Char>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_fence>,
              ffi.Pointer<ma_sound>)>> get ma_sound_init_from_file =>
      _library._ma_sound_init_from_filePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ffi.WChar>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_fence>,
              ffi.Pointer<ma_sound>)>> get ma_sound_init_from_file_w =>
      _library._ma_sound_init_from_file_wPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_sound>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_sound>)>> get ma_sound_init_copy =>
      _library._ma_sound_init_copyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_data_source>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_sound>)>> get ma_sound_init_from_data_source =>
      _library._ma_sound_init_from_data_sourcePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_sound_config>,
              ffi.Pointer<ma_sound>)>> get ma_sound_init_ex =>
      _library._ma_sound_init_exPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_uninit => _library._ma_sound_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_engine> Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_engine => _library._ma_sound_get_enginePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_data_source> Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_data_source => _library._ma_sound_get_data_sourcePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_start => _library._ma_sound_startPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_stop => _library._ma_sound_stopPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_sound>, ma_uint64)>>
      get ma_sound_stop_with_fade_in_pcm_frames =>
          _library._ma_sound_stop_with_fade_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_sound>, ma_uint64)>>
      get ma_sound_stop_with_fade_in_milliseconds =>
          _library._ma_sound_stop_with_fade_in_millisecondsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>
      get ma_sound_set_volume => _library._ma_sound_set_volumePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_volume => _library._ma_sound_get_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>
      get ma_sound_set_pan => _library._ma_sound_set_panPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_pan => _library._ma_sound_get_panPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Int32)>>
      get ma_sound_set_pan_mode => _library._ma_sound_set_pan_modePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_pan_mode => _library._ma_sound_get_pan_modePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>
      get ma_sound_set_pitch => _library._ma_sound_set_pitchPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_pitch => _library._ma_sound_get_pitchPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ma_bool32)>>
      get ma_sound_set_spatialization_enabled =>
          _library._ma_sound_set_spatialization_enabledPtr;
  ffi.Pointer<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_is_spatialization_enabled =>
          _library._ma_sound_is_spatialization_enabledPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint32)>>
      get ma_sound_set_pinned_listener_index =>
          _library._ma_sound_set_pinned_listener_indexPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_pinned_listener_index =>
          _library._ma_sound_get_pinned_listener_indexPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_listener_index =>
          _library._ma_sound_get_listener_indexPtr;
  ffi.Pointer<ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_direction_to_listener =>
          _library._ma_sound_get_direction_to_listenerPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_sound>, ffi.Float, ffi.Float, ffi.Float)>>
      get ma_sound_set_position => _library._ma_sound_set_positionPtr;
  ffi.Pointer<ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_position => _library._ma_sound_get_positionPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_sound>, ffi.Float, ffi.Float, ffi.Float)>>
      get ma_sound_set_direction => _library._ma_sound_set_directionPtr;
  ffi.Pointer<ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_direction => _library._ma_sound_get_directionPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_sound>, ffi.Float, ffi.Float, ffi.Float)>>
      get ma_sound_set_velocity => _library._ma_sound_set_velocityPtr;
  ffi.Pointer<ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_velocity => _library._ma_sound_get_velocityPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Int32)>>
      get ma_sound_set_attenuation_model =>
          _library._ma_sound_set_attenuation_modelPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_attenuation_model =>
          _library._ma_sound_get_attenuation_modelPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Int32)>>
      get ma_sound_set_positioning => _library._ma_sound_set_positioningPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_positioning => _library._ma_sound_get_positioningPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>
      get ma_sound_set_rolloff => _library._ma_sound_set_rolloffPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_rolloff => _library._ma_sound_get_rolloffPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>
      get ma_sound_set_min_gain => _library._ma_sound_set_min_gainPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_min_gain => _library._ma_sound_get_min_gainPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>
      get ma_sound_set_max_gain => _library._ma_sound_set_max_gainPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_max_gain => _library._ma_sound_get_max_gainPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>
      get ma_sound_set_min_distance => _library._ma_sound_set_min_distancePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_min_distance => _library._ma_sound_get_min_distancePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>
      get ma_sound_set_max_distance => _library._ma_sound_set_max_distancePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_max_distance => _library._ma_sound_get_max_distancePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_sound>, ffi.Float, ffi.Float, ffi.Float)>>
      get ma_sound_set_cone => _library._ma_sound_set_conePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>> get ma_sound_get_cone =>
      _library._ma_sound_get_conePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>
      get ma_sound_set_doppler_factor =>
          _library._ma_sound_set_doppler_factorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_doppler_factor =>
          _library._ma_sound_get_doppler_factorPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ffi.Float)>>
      get ma_sound_set_directional_attenuation_factor =>
          _library._ma_sound_set_directional_attenuation_factorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_directional_attenuation_factor =>
          _library._ma_sound_get_directional_attenuation_factorPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_sound>, ffi.Float, ffi.Float, ma_uint64)>>
      get ma_sound_set_fade_in_pcm_frames =>
          _library._ma_sound_set_fade_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ma_sound>, ffi.Float, ffi.Float, ma_uint64)>>
      get ma_sound_set_fade_in_milliseconds =>
          _library._ma_sound_set_fade_in_millisecondsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>,
              ffi.Float,
              ffi.Float,
              ma_uint64,
              ma_uint64)>> get ma_sound_set_fade_start_in_pcm_frames =>
      _library._ma_sound_set_fade_start_in_pcm_framesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound>,
              ffi.Float,
              ffi.Float,
              ma_uint64,
              ma_uint64)>> get ma_sound_set_fade_start_in_milliseconds =>
      _library._ma_sound_set_fade_start_in_millisecondsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_current_fade_volume =>
          _library._ma_sound_get_current_fade_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64)>>
      get ma_sound_set_start_time_in_pcm_frames =>
          _library._ma_sound_set_start_time_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64)>>
      get ma_sound_set_start_time_in_milliseconds =>
          _library._ma_sound_set_start_time_in_millisecondsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64)>>
      get ma_sound_set_stop_time_in_pcm_frames =>
          _library._ma_sound_set_stop_time_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64)>>
      get ma_sound_set_stop_time_in_milliseconds =>
          _library._ma_sound_set_stop_time_in_millisecondsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64, ma_uint64)>>
      get ma_sound_set_stop_time_with_fade_in_pcm_frames =>
          _library._ma_sound_set_stop_time_with_fade_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ma_uint64, ma_uint64)>>
      get ma_sound_set_stop_time_with_fade_in_milliseconds =>
          _library._ma_sound_set_stop_time_with_fade_in_millisecondsPtr;
  ffi.Pointer<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_is_playing => _library._ma_sound_is_playingPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_time_in_pcm_frames =>
          _library._ma_sound_get_time_in_pcm_framesPtr;
  ffi.Pointer<ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_get_time_in_milliseconds =>
          _library._ma_sound_get_time_in_millisecondsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound>, ma_bool32)>>
      get ma_sound_set_looping => _library._ma_sound_set_loopingPtr;
  ffi.Pointer<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_is_looping => _library._ma_sound_is_loopingPtr;
  ffi.Pointer<ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound>)>>
      get ma_sound_at_end => _library._ma_sound_at_endPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_sound>, ma_uint64)>>
      get ma_sound_seek_to_pcm_frame => _library._ma_sound_seek_to_pcm_framePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_sound>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_uint32>,
              ffi.Pointer<ma_channel>,
              ffi.Size)>> get ma_sound_get_data_format =>
      _library._ma_sound_get_data_formatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_sound>, ffi.Pointer<ma_uint64>)>>
      get ma_sound_get_cursor_in_pcm_frames =>
          _library._ma_sound_get_cursor_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_sound>, ffi.Pointer<ma_uint64>)>>
      get ma_sound_get_length_in_pcm_frames =>
          _library._ma_sound_get_length_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_sound>, ffi.Pointer<ffi.Float>)>>
      get ma_sound_get_cursor_in_seconds =>
          _library._ma_sound_get_cursor_in_secondsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_sound>, ffi.Pointer<ffi.Float>)>>
      get ma_sound_get_length_in_seconds =>
          _library._ma_sound_get_length_in_secondsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_sound>, ma_sound_end_proc,
              ffi.Pointer<ffi.Void>)>> get ma_sound_set_end_callback =>
      _library._ma_sound_set_end_callbackPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ma_uint32,
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ma_sound_group>)>> get ma_sound_group_init =>
      _library._ma_sound_group_initPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_engine>,
              ffi.Pointer<ma_sound_group_config>,
              ffi.Pointer<ma_sound_group>)>> get ma_sound_group_init_ex =>
      _library._ma_sound_group_init_exPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_uninit => _library._ma_sound_group_uninitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ma_engine> Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_engine => _library._ma_sound_group_get_enginePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_start => _library._ma_sound_group_startPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_stop => _library._ma_sound_group_stopPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float)>>
      get ma_sound_group_set_volume => _library._ma_sound_group_set_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_volume => _library._ma_sound_group_get_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float)>>
      get ma_sound_group_set_pan => _library._ma_sound_group_set_panPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_pan => _library._ma_sound_group_get_panPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Int32)>>
      get ma_sound_group_set_pan_mode =>
          _library._ma_sound_group_set_pan_modePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_pan_mode =>
          _library._ma_sound_group_get_pan_modePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float)>>
      get ma_sound_group_set_pitch => _library._ma_sound_group_set_pitchPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_pitch => _library._ma_sound_group_get_pitchPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ma_bool32)>>
      get ma_sound_group_set_spatialization_enabled =>
          _library._ma_sound_group_set_spatialization_enabledPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_is_spatialization_enabled =>
          _library._ma_sound_group_is_spatialization_enabledPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ma_uint32)>>
      get ma_sound_group_set_pinned_listener_index =>
          _library._ma_sound_group_set_pinned_listener_indexPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_pinned_listener_index =>
          _library._ma_sound_group_get_pinned_listener_indexPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_uint32 Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_listener_index =>
          _library._ma_sound_group_get_listener_indexPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_direction_to_listener =>
          _library._ma_sound_group_get_direction_to_listenerPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ffi.Float)>> get ma_sound_group_set_position =>
      _library._ma_sound_group_set_positionPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_position =>
          _library._ma_sound_group_get_positionPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ffi.Float)>> get ma_sound_group_set_direction =>
      _library._ma_sound_group_set_directionPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_direction =>
          _library._ma_sound_group_get_directionPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ffi.Float)>> get ma_sound_group_set_velocity =>
      _library._ma_sound_group_set_velocityPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_vec3f Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_velocity =>
          _library._ma_sound_group_get_velocityPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Int32)>>
      get ma_sound_group_set_attenuation_model =>
          _library._ma_sound_group_set_attenuation_modelPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_attenuation_model =>
          _library._ma_sound_group_get_attenuation_modelPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Int32)>>
      get ma_sound_group_set_positioning =>
          _library._ma_sound_group_set_positioningPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_positioning =>
          _library._ma_sound_group_get_positioningPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float)>>
      get ma_sound_group_set_rolloff => _library._ma_sound_group_set_rolloffPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_rolloff => _library._ma_sound_group_get_rolloffPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float)>>
      get ma_sound_group_set_min_gain =>
          _library._ma_sound_group_set_min_gainPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_min_gain =>
          _library._ma_sound_group_get_min_gainPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float)>>
      get ma_sound_group_set_max_gain =>
          _library._ma_sound_group_set_max_gainPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_max_gain =>
          _library._ma_sound_group_get_max_gainPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float)>>
      get ma_sound_group_set_min_distance =>
          _library._ma_sound_group_set_min_distancePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_min_distance =>
          _library._ma_sound_group_get_min_distancePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float)>>
      get ma_sound_group_set_max_distance =>
          _library._ma_sound_group_set_max_distancePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_max_distance =>
          _library._ma_sound_group_get_max_distancePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ffi.Float)>> get ma_sound_group_set_cone =>
      _library._ma_sound_group_set_conePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_sound_group>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>> get ma_sound_group_get_cone =>
      _library._ma_sound_group_get_conePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float)>>
      get ma_sound_group_set_doppler_factor =>
          _library._ma_sound_group_set_doppler_factorPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_doppler_factor =>
          _library._ma_sound_group_get_doppler_factorPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float)>>
      get ma_sound_group_set_directional_attenuation_factor =>
          _library._ma_sound_group_set_directional_attenuation_factorPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_directional_attenuation_factor =>
          _library._ma_sound_group_get_directional_attenuation_factorPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ma_uint64)>> get ma_sound_group_set_fade_in_pcm_frames =>
      _library._ma_sound_group_set_fade_in_pcm_framesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ma_sound_group>, ffi.Float, ffi.Float,
              ma_uint64)>> get ma_sound_group_set_fade_in_milliseconds =>
      _library._ma_sound_group_set_fade_in_millisecondsPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_current_fade_volume =>
          _library._ma_sound_group_get_current_fade_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ma_uint64)>>
      get ma_sound_group_set_start_time_in_pcm_frames =>
          _library._ma_sound_group_set_start_time_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ma_uint64)>>
      get ma_sound_group_set_start_time_in_milliseconds =>
          _library._ma_sound_group_set_start_time_in_millisecondsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ma_uint64)>>
      get ma_sound_group_set_stop_time_in_pcm_frames =>
          _library._ma_sound_group_set_stop_time_in_pcm_framesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ma_sound_group>, ma_uint64)>>
      get ma_sound_group_set_stop_time_in_milliseconds =>
          _library._ma_sound_group_set_stop_time_in_millisecondsPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_bool32 Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_is_playing => _library._ma_sound_group_is_playingPtr;
  ffi.Pointer<
          ffi.NativeFunction<ma_uint64 Function(ffi.Pointer<ma_sound_group>)>>
      get ma_sound_group_get_time_in_pcm_frames =>
          _library._ma_sound_group_get_time_in_pcm_framesPtr;
}

/// Logging Levels
/// ==============
/// Log levels are only used to give logging callbacks some context as to the severity of a log message
/// so they can do filtering. All log levels will be posted to registered logging callbacks. If you
/// don't want to output a certain log level you can discriminate against the log level in the callback.
///
/// MA_LOG_LEVEL_DEBUG
/// Used for debugging. Useful for debug and test builds, but should be disabled in release builds.
///
/// MA_LOG_LEVEL_INFO
/// Informational logging. Useful for debugging. This will never be called from within the data
/// callback.
///
/// MA_LOG_LEVEL_WARNING
/// Warnings. You should enable this in you development builds and action them when encounted. These
/// logs usually indicate a potential problem or misconfiguration, but still allow you to keep
/// running. This will never be called from within the data callback.
///
/// MA_LOG_LEVEL_ERROR
/// Error logging. This will be fired when an operation fails and is subsequently aborted. This can
/// be fired from within the data callback, in which case the device will be stopped. You should
/// always have this log level enabled.
abstract class ma_log_level {
  static const int MA_LOG_LEVEL_DEBUG = 4;
  static const int MA_LOG_LEVEL_INFO = 3;
  static const int MA_LOG_LEVEL_WARNING = 2;
  static const int MA_LOG_LEVEL_ERROR = 1;
}

final class ma_context extends ffi.Struct {
  external ma_backend_callbacks callbacks;

  /// DirectSound, ALSA, etc.
  @ffi.Int32()
  external int backend;

  external ffi.Pointer<ma_log> pLog;

  /// Only used if the log is owned by the context. The pLog member will be set to &log in this case.
  external ma_log log;

  @ffi.Int32()
  external int threadPriority;

  @ffi.Size()
  external int threadStackSize;

  external ffi.Pointer<ffi.Void> pUserData;

  external ma_allocation_callbacks allocationCallbacks;

  /// Used to make ma_context_get_devices() thread safe.
  external ma_mutex deviceEnumLock;

  /// Used to make ma_context_get_device_info() thread safe.
  external ma_mutex deviceInfoLock;

  /// Total capacity of pDeviceInfos.
  @ma_uint32()
  external int deviceInfoCapacity;

  @ma_uint32()
  external int playbackDeviceInfoCount;

  @ma_uint32()
  external int captureDeviceInfoCount;

  /// Playback devices first, then capture.
  external ffi.Pointer<ma_device_info> pDeviceInfos;

  external UnnamedUnion8 unnamed;

  external UnnamedUnion10 unnamed1;
}

/// These are the callbacks required to be implemented for a backend. These callbacks are grouped into two parts: context and device. There is one context
/// to many devices. A device is created from a context.
///
/// The general flow goes like this:
///
/// 1) A context is created with `onContextInit()`
/// 1a) Available devices can be enumerated with `onContextEnumerateDevices()` if required.
/// 1b) Detailed information about a device can be queried with `onContextGetDeviceInfo()` if required.
/// 2) A device is created from the context that was created in the first step using `onDeviceInit()`, and optionally a device ID that was
/// selected from device enumeration via `onContextEnumerateDevices()`.
/// 3) A device is started or stopped with `onDeviceStart()` / `onDeviceStop()`
/// 4) Data is delivered to and from the device by the backend. This is always done based on the native format returned by the prior call
/// to `onDeviceInit()`. Conversion between the device's native format and the format requested by the application will be handled by
/// miniaudio internally.
///
/// Initialization of the context is quite simple. You need to do any necessary initialization of internal objects and then output the
/// callbacks defined in this structure.
///
/// Once the context has been initialized you can initialize a device. Before doing so, however, the application may want to know which
/// physical devices are available. This is where `onContextEnumerateDevices()` comes in. This is fairly simple. For each device, fire the
/// given callback with, at a minimum, the basic information filled out in `ma_device_info`. When the callback returns `MA_FALSE`, enumeration
/// needs to stop and the `onContextEnumerateDevices()` function returns with a success code.
///
/// Detailed device information can be retrieved from a device ID using `onContextGetDeviceInfo()`. This takes as input the device type and ID,
/// and on output returns detailed information about the device in `ma_device_info`. The `onContextGetDeviceInfo()` callback must handle the
/// case when the device ID is NULL, in which case information about the default device needs to be retrieved.
///
/// Once the context has been created and the device ID retrieved (if using anything other than the default device), the device can be created.
/// This is a little bit more complicated than initialization of the context due to it's more complicated configuration. When initializing a
/// device, a duplex device may be requested. This means a separate data format needs to be specified for both playback and capture. On input,
/// the data format is set to what the application wants. On output it's set to the native format which should match as closely as possible to
/// the requested format. The conversion between the format requested by the application and the device's native format will be handled
/// internally by miniaudio.
///
/// On input, if the sample format is set to `ma_format_unknown`, the backend is free to use whatever sample format it desires, so long as it's
/// supported by miniaudio. When the channel count is set to 0, the backend should use the device's native channel count. The same applies for
/// sample rate. For the channel map, the default should be used when `ma_channel_map_is_blank()` returns true (all channels set to
/// `MA_CHANNEL_NONE`). On input, the `periodSizeInFrames` or `periodSizeInMilliseconds` option should always be set. The backend should
/// inspect both of these variables. If `periodSizeInFrames` is set, it should take priority, otherwise it needs to be derived from the period
/// size in milliseconds (`periodSizeInMilliseconds`) and the sample rate, keeping in mind that the sample rate may be 0, in which case the
/// sample rate will need to be determined before calculating the period size in frames. On output, all members of the `ma_device_descriptor`
/// object should be set to a valid value, except for `periodSizeInMilliseconds` which is optional (`periodSizeInFrames` *must* be set).
///
/// Starting and stopping of the device is done with `onDeviceStart()` and `onDeviceStop()` and should be self-explanatory. If the backend uses
/// asynchronous reading and writing, `onDeviceStart()` and `onDeviceStop()` should always be implemented.
///
/// The handling of data delivery between the application and the device is the most complicated part of the process. To make this a bit
/// easier, some helper callbacks are available. If the backend uses a blocking read/write style of API, the `onDeviceRead()` and
/// `onDeviceWrite()` callbacks can optionally be implemented. These are blocking and work just like reading and writing from a file. If the
/// backend uses a callback for data delivery, that callback must call `ma_device_handle_backend_data_callback()` from within it's callback.
/// This allows miniaudio to then process any necessary data conversion and then pass it to the miniaudio data callback.
///
/// If the backend requires absolute flexibility with it's data delivery, it can optionally implement the `onDeviceDataLoop()` callback
/// which will allow it to implement the logic that will run on the audio thread. This is much more advanced and is completely optional.
///
/// The audio thread should run data delivery logic in a loop while `ma_device_get_state() == ma_device_state_started` and no errors have been
/// encountered. Do not start or stop the device here. That will be handled from outside the `onDeviceDataLoop()` callback.
///
/// The invocation of the `onDeviceDataLoop()` callback will be handled by miniaudio. When you start the device, miniaudio will fire this
/// callback. When the device is stopped, the `ma_device_get_state() == ma_device_state_started` condition will fail and the loop will be terminated
/// which will then fall through to the part that stops the device. For an example on how to implement the `onDeviceDataLoop()` callback,
/// look at `ma_device_audio_thread__default_read_write()`. Implement the `onDeviceDataLoopWakeup()` callback if you need a mechanism to
/// wake up the audio thread.
///
/// If the backend supports an optimized retrieval of device information from an initialized `ma_device` object, it should implement the
/// `onDeviceGetInfo()` callback. This is optional, in which case it will fall back to `onContextGetDeviceInfo()` which is less efficient.
final class ma_backend_callbacks extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context> pContext,
              ffi.Pointer<ma_context_config> pConfig,
              ffi.Pointer<ma_backend_callbacks> pCallbacks)>> onContextInit;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_context> pContext)>>
      onContextUninit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context> pContext,
              ma_enum_devices_callback_proc callback,
              ffi.Pointer<ffi.Void> pUserData)>> onContextEnumerateDevices;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_context> pContext,
              ffi.Int32 deviceType,
              ffi.Pointer<ma_device_id> pDeviceID,
              ffi.Pointer<ma_device_info> pDeviceInfo)>> onContextGetDeviceInfo;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_device> pDevice,
                  ffi.Pointer<ma_device_config> pConfig,
                  ffi.Pointer<ma_device_descriptor> pDescriptorPlayback,
                  ffi.Pointer<ma_device_descriptor> pDescriptorCapture)>>
      onDeviceInit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device> pDevice)>> onDeviceUninit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device> pDevice)>> onDeviceStart;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device> pDevice)>> onDeviceStop;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device> pDevice,
              ffi.Pointer<ffi.Void> pFrames,
              ma_uint32 frameCount,
              ffi.Pointer<ma_uint32> pFramesRead)>> onDeviceRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_device> pDevice,
              ffi.Pointer<ffi.Void> pFrames,
              ma_uint32 frameCount,
              ffi.Pointer<ma_uint32> pFramesWritten)>> onDeviceWrite;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device> pDevice)>> onDeviceDataLoop;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_device> pDevice)>>
      onDeviceDataLoopWakeup;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_device> pDevice, ffi.Int32 type,
              ffi.Pointer<ma_device_info> pDeviceInfo)>> onDeviceGetInfo;
}

abstract class ma_result {
  static const int MA_SUCCESS = 0;

  /// A generic error.
  static const int MA_ERROR = -1;
  static const int MA_INVALID_ARGS = -2;
  static const int MA_INVALID_OPERATION = -3;
  static const int MA_OUT_OF_MEMORY = -4;
  static const int MA_OUT_OF_RANGE = -5;
  static const int MA_ACCESS_DENIED = -6;
  static const int MA_DOES_NOT_EXIST = -7;
  static const int MA_ALREADY_EXISTS = -8;
  static const int MA_TOO_MANY_OPEN_FILES = -9;
  static const int MA_INVALID_FILE = -10;
  static const int MA_TOO_BIG = -11;
  static const int MA_PATH_TOO_LONG = -12;
  static const int MA_NAME_TOO_LONG = -13;
  static const int MA_NOT_DIRECTORY = -14;
  static const int MA_IS_DIRECTORY = -15;
  static const int MA_DIRECTORY_NOT_EMPTY = -16;
  static const int MA_AT_END = -17;
  static const int MA_NO_SPACE = -18;
  static const int MA_BUSY = -19;
  static const int MA_IO_ERROR = -20;
  static const int MA_INTERRUPT = -21;
  static const int MA_UNAVAILABLE = -22;
  static const int MA_ALREADY_IN_USE = -23;
  static const int MA_BAD_ADDRESS = -24;
  static const int MA_BAD_SEEK = -25;
  static const int MA_BAD_PIPE = -26;
  static const int MA_DEADLOCK = -27;
  static const int MA_TOO_MANY_LINKS = -28;
  static const int MA_NOT_IMPLEMENTED = -29;
  static const int MA_NO_MESSAGE = -30;
  static const int MA_BAD_MESSAGE = -31;
  static const int MA_NO_DATA_AVAILABLE = -32;
  static const int MA_INVALID_DATA = -33;
  static const int MA_TIMEOUT = -34;
  static const int MA_NO_NETWORK = -35;
  static const int MA_NOT_UNIQUE = -36;
  static const int MA_NOT_SOCKET = -37;
  static const int MA_NO_ADDRESS = -38;
  static const int MA_BAD_PROTOCOL = -39;
  static const int MA_PROTOCOL_UNAVAILABLE = -40;
  static const int MA_PROTOCOL_NOT_SUPPORTED = -41;
  static const int MA_PROTOCOL_FAMILY_NOT_SUPPORTED = -42;
  static const int MA_ADDRESS_FAMILY_NOT_SUPPORTED = -43;
  static const int MA_SOCKET_NOT_SUPPORTED = -44;
  static const int MA_CONNECTION_RESET = -45;
  static const int MA_ALREADY_CONNECTED = -46;
  static const int MA_NOT_CONNECTED = -47;
  static const int MA_CONNECTION_REFUSED = -48;
  static const int MA_NO_HOST = -49;
  static const int MA_IN_PROGRESS = -50;
  static const int MA_CANCELLED = -51;
  static const int MA_MEMORY_ALREADY_MAPPED = -52;

  /// General non-standard errors.
  static const int MA_CRC_MISMATCH = -100;

  /// General miniaudio-specific errors.
  static const int MA_FORMAT_NOT_SUPPORTED = -200;
  static const int MA_DEVICE_TYPE_NOT_SUPPORTED = -201;
  static const int MA_SHARE_MODE_NOT_SUPPORTED = -202;
  static const int MA_NO_BACKEND = -203;
  static const int MA_NO_DEVICE = -204;
  static const int MA_API_NOT_FOUND = -205;
  static const int MA_INVALID_DEVICE_CONFIG = -206;
  static const int MA_LOOP = -207;
  static const int MA_BACKEND_NOT_ENABLED = -208;

  /// State errors.
  static const int MA_DEVICE_NOT_INITIALIZED = -300;
  static const int MA_DEVICE_ALREADY_INITIALIZED = -301;
  static const int MA_DEVICE_NOT_STARTED = -302;
  static const int MA_DEVICE_NOT_STOPPED = -303;

  /// Operation errors.
  static const int MA_FAILED_TO_INIT_BACKEND = -400;
  static const int MA_FAILED_TO_OPEN_BACKEND_DEVICE = -401;
  static const int MA_FAILED_TO_START_BACKEND_DEVICE = -402;
  static const int MA_FAILED_TO_STOP_BACKEND_DEVICE = -403;
}

final class ma_context_config extends ffi.Struct {
  external ffi.Pointer<ma_log> pLog;

  @ffi.Int32()
  external int threadPriority;

  @ffi.Size()
  external int threadStackSize;

  external ffi.Pointer<ffi.Void> pUserData;

  external ma_allocation_callbacks allocationCallbacks;

  external UnnamedStruct1 alsa;

  external UnnamedStruct2 pulse;

  external UnnamedStruct3 coreaudio;

  external UnnamedStruct4 jack;

  external ma_backend_callbacks custom;
}

final class ma_log extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ma_log_callback> callbacks;

  @ma_uint32()
  external int callbackCount;

  /// Need to store these persistently because ma_log_postv() might need to allocate a buffer on the heap.
  external ma_allocation_callbacks allocationCallbacks;

  /// For thread safety just to make it easier and safer for the logging implementation.
  external ma_mutex lock;
}

final class ma_log_callback extends ffi.Struct {
  external ma_log_callback_proc onLog;

  external ffi.Pointer<ffi.Void> pUserData;
}

/// The callback for handling log messages.
///
///
/// Parameters
/// ----------
/// pUserData (in)
/// The user data pointer that was passed into ma_log_register_callback().
///
/// logLevel (in)
/// The log level. This can be one of the following:
///
/// +----------------------+
/// | Log Level            |
/// +----------------------+
/// | MA_LOG_LEVEL_DEBUG   |
/// | MA_LOG_LEVEL_INFO    |
/// | MA_LOG_LEVEL_WARNING |
/// | MA_LOG_LEVEL_ERROR   |
/// +----------------------+
///
/// pMessage (in)
/// The log message.
typedef ma_log_callback_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void> pUserData, ma_uint32 level,
            ffi.Pointer<ffi.Char> pMessage)>>;
typedef ma_uint32 = ffi.UnsignedInt;

final class ma_allocation_callbacks extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pUserData;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size sz, ffi.Pointer<ffi.Void> pUserData)>> onMalloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void> p, ffi.Size sz,
              ffi.Pointer<ffi.Void> pUserData)>> onRealloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> p, ffi.Pointer<ffi.Void> pUserData)>>
      onFree;
}

typedef ma_mutex = ma_handle;
typedef ma_handle = ffi.Pointer<ffi.Void>;

/// Thread priorities should be ordered such that the default priority of the worker thread is 0.
abstract class ma_thread_priority {
  static const int ma_thread_priority_idle = -5;
  static const int ma_thread_priority_lowest = -4;
  static const int ma_thread_priority_low = -3;
  static const int ma_thread_priority_normal = -2;
  static const int ma_thread_priority_high = -1;
  static const int ma_thread_priority_highest = 0;
  static const int ma_thread_priority_realtime = 1;
  static const int ma_thread_priority_default = 0;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ma_bool32()
  external int useVerboseDeviceEnumeration;
}

typedef ma_bool32 = ma_uint32;

final class UnnamedStruct2 extends ffi.Struct {
  external ffi.Pointer<ffi.Char> pApplicationName;

  external ffi.Pointer<ffi.Char> pServerName;

  /// Enables autospawning of the PulseAudio daemon if necessary.
  @ma_bool32()
  external int tryAutoSpawn;
}

final class UnnamedStruct3 extends ffi.Struct {
  @ffi.Int32()
  external int sessionCategory;

  @ma_uint32()
  external int sessionCategoryOptions;

  /// iOS only. When set to true, does not perform an explicit [[AVAudioSession sharedInstace] setActive:true] on initialization.
  @ma_bool32()
  external int noAudioSessionActivate;

  /// iOS only. When set to true, does not perform an explicit [[AVAudioSession sharedInstace] setActive:false] on uninitialization.
  @ma_bool32()
  external int noAudioSessionDeactivate;
}

/// iOS/tvOS/watchOS session categories.
abstract class ma_ios_session_category {
  /// AVAudioSessionCategoryPlayAndRecord.
  static const int ma_ios_session_category_default = 0;

  /// Leave the session category unchanged.
  static const int ma_ios_session_category_none = 1;

  /// AVAudioSessionCategoryAmbient
  static const int ma_ios_session_category_ambient = 2;

  /// AVAudioSessionCategorySoloAmbient
  static const int ma_ios_session_category_solo_ambient = 3;

  /// AVAudioSessionCategoryPlayback
  static const int ma_ios_session_category_playback = 4;

  /// AVAudioSessionCategoryRecord
  static const int ma_ios_session_category_record = 5;

  /// AVAudioSessionCategoryPlayAndRecord
  static const int ma_ios_session_category_play_and_record = 6;

  /// AVAudioSessionCategoryMultiRoute
  static const int ma_ios_session_category_multi_route = 7;
}

final class UnnamedStruct4 extends ffi.Struct {
  external ffi.Pointer<ffi.Char> pClientName;

  @ma_bool32()
  external int tryStartServer;
}

/// The callback for handling device enumeration. This is fired from `ma_context_enumerate_devices()`.
///
///
/// Parameters
/// ----------
/// pContext (in)
/// A pointer to the context performing the enumeration.
///
/// deviceType (in)
/// The type of the device being enumerated. This will always be either `ma_device_type_playback` or `ma_device_type_capture`.
///
/// pInfo (in)
/// A pointer to a `ma_device_info` containing the ID and name of the enumerated device. Note that this will not include detailed information about the device,
/// only basic information (ID and name). The reason for this is that it would otherwise require opening the backend device to probe for the information which
/// is too inefficient.
///
/// pUserData (in)
/// The user data pointer passed into `ma_context_enumerate_devices()`.
typedef ma_enum_devices_callback_proc = ffi.Pointer<
    ffi.NativeFunction<
        ma_bool32 Function(
            ffi.Pointer<ma_context> pContext,
            ffi.Int32 deviceType,
            ffi.Pointer<ma_device_info> pInfo,
            ffi.Pointer<ffi.Void> pUserData)>>;

abstract class ma_device_type {
  static const int ma_device_type_playback = 1;
  static const int ma_device_type_capture = 2;

  /// 3
  static const int ma_device_type_duplex = 3;
  static const int ma_device_type_loopback = 4;
}

final class ma_device_info extends ffi.Struct {
  /// Basic info. This is the only information guaranteed to be filled in during device enumeration.
  external ma_device_id id;

  /// +1 for null terminator.
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> name;

  @ma_bool32()
  external int isDefault;

  @ma_uint32()
  external int nativeDataFormatCount;

  /// ma_format_count * ma_standard_sample_rate_count * MA_MAX_CHANNELS
  @ffi.Array.multi([64])
  external ffi.Array<UnnamedStruct5> nativeDataFormats;
}

final class ma_device_id extends ffi.Union {
  /// WASAPI uses a wchar_t string for identification.
  @ffi.Array.multi([64])
  external ffi.Array<ma_wchar_win32> wasapi;

  /// DirectSound uses a GUID for identification.
  @ffi.Array.multi([16])
  external ffi.Array<ma_uint8> dsound;

  /// When creating a device, WinMM expects a Win32 UINT_PTR for device identification. In practice it's actually just a UINT.
  @ma_uint32()
  external int winmm;

  /// ALSA uses a name string for identification.
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> alsa;

  /// PulseAudio uses a name string for identification.
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> pulse;

  /// JACK always uses default devices.
  @ffi.Int()
  external int jack;

  /// Core Audio uses a string for identification.
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> coreaudio;

  /// "snd/0", etc.
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> sndio;

  /// "/dev/audio", etc.
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> audio4;

  /// "dev/dsp0", etc. "dev/dsp" for the default device.
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> oss;

  /// AAudio uses a 32-bit integer for identification.
  @ma_int32()
  external int aaudio;

  /// OpenSL|ES uses a 32-bit unsigned integer for identification.
  @ma_uint32()
  external int opensl;

  /// Web Audio always uses default devices for now, but if this changes it'll be a GUID.
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> webaudio;

  /// The custom backend could be anything. Give them a few options.
  external UnnamedUnion1 custom;

  /// The null backend uses an integer for device IDs.
  @ffi.Int()
  external int nullbackend;
}

typedef ma_wchar_win32 = ffi.WChar;
typedef ma_uint8 = ffi.UnsignedChar;
typedef ma_int32 = ffi.Int;

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Int()
  external int i;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> s;

  external ffi.Pointer<ffi.Void> p;
}

final class UnnamedStruct5 extends ffi.Struct {
  /// Sample format. If set to ma_format_unknown, all sample formats are supported.
  @ffi.Int32()
  external int format;

  /// If set to 0, all channels are supported.
  @ma_uint32()
  external int channels;

  /// If set to 0, all sample rates are supported.
  @ma_uint32()
  external int sampleRate;

  /// A combination of MA_DATA_FORMAT_FLAG_* flags.
  @ma_uint32()
  external int flags;
}

abstract class ma_format {
  /// Mainly used for indicating an error, but also used as the default for the output format for decoders.
  static const int ma_format_unknown = 0;
  static const int ma_format_u8 = 1;

  /// Seems to be the most widely supported format.
  static const int ma_format_s16 = 2;

  /// Tightly packed. 3 bytes per sample.
  static const int ma_format_s24 = 3;
  static const int ma_format_s32 = 4;
  static const int ma_format_f32 = 5;
  static const int ma_format_count = 6;
}

final class ma_device extends ffi.Struct {
  external ffi.Pointer<ma_context> pContext;

  @ffi.Int32()
  external int type;

  @ma_uint32()
  external int sampleRate;

  /// The state of the device is variable and can change at any time on any thread. Must be used atomically.
  external ma_atomic_device_state state;

  /// Set once at initialization time and should not be changed after.
  external ma_device_data_proc onData;

  /// Set once at initialization time and should not be changed after.
  external ma_device_notification_proc onNotification;

  /// DEPRECATED. Use the notification callback instead. Set once at initialization time and should not be changed after.
  external ma_stop_proc onStop;

  /// Application defined data.
  external ffi.Pointer<ffi.Void> pUserData;

  external ma_mutex startStopLock;

  external ma_event wakeupEvent;

  external ma_event startEvent;

  external ma_event stopEvent;

  external ma_thread thread;

  /// This is set by the worker thread after it's finished doing a job.
  @ffi.Int32()
  external int workResult;

  /// When set to true, uninitializing the device will also uninitialize the context. Set to true when NULL is passed into ma_device_init().
  @ma_bool8()
  external int isOwnerOfContext;

  @ma_bool8()
  external int noPreSilencedOutputBuffer;

  @ma_bool8()
  external int noClip;

  @ma_bool8()
  external int noDisableDenormals;

  @ma_bool8()
  external int noFixedSizedCallback;

  /// Linear 0..1. Can be read and written simultaneously by different threads. Must be used atomically.
  external ma_atomic_float masterVolumeFactor;

  /// Intermediary buffer for duplex device on asynchronous backends.
  external ma_duplex_rb duplexRB;

  external UnnamedStruct10 resampling;

  external UnnamedStruct13 playback;

  external UnnamedStruct14 capture;

  external UnnamedUnion7 unnamed;
}

final class ma_atomic_device_state extends ffi.Struct {
  @ffi.Int32()
  external int value;
}

abstract class ma_device_state {
  static const int ma_device_state_uninitialized = 0;

  /// The device's default state after initialization.
  static const int ma_device_state_stopped = 1;

  /// The device is started and is requesting and/or delivering audio data.
  static const int ma_device_state_started = 2;

  /// Transitioning from a stopped state to started.
  static const int ma_device_state_starting = 3;

  /// Transitioning from a started state to stopped.
  static const int ma_device_state_stopping = 4;
}

/// The callback for processing audio data from the device.
///
/// The data callback is fired by miniaudio whenever the device needs to have more data delivered to a playback device, or when a capture device has some data
/// available. This is called as soon as the backend asks for more data which means it may be called with inconsistent frame counts. You cannot assume the
/// callback will be fired with a consistent frame count.
///
///
/// Parameters
/// ----------
/// pDevice (in)
/// A pointer to the relevant device.
///
/// pOutput (out)
/// A pointer to the output buffer that will receive audio data that will later be played back through the speakers. This will be non-null for a playback or
/// full-duplex device and null for a capture and loopback device.
///
/// pInput (in)
/// A pointer to the buffer containing input data from a recording device. This will be non-null for a capture, full-duplex or loopback device and null for a
/// playback device.
///
/// frameCount (in)
/// The number of PCM frames to process. Note that this will not necessarily be equal to what you requested when you initialized the device. The
/// `periodSizeInFrames` and `periodSizeInMilliseconds` members of the device config are just hints, and are not necessarily exactly what you'll get. You must
/// not assume this will always be the same value each time the callback is fired.
///
///
/// Remarks
/// -------
/// You cannot stop and start the device from inside the callback or else you'll get a deadlock. You must also not uninitialize the device from inside the
/// callback. The following APIs cannot be called from inside the callback:
///
/// ma_device_init()
/// ma_device_init_ex()
/// ma_device_uninit()
/// ma_device_start()
/// ma_device_stop()
///
/// The proper way to stop the device is to call `ma_device_stop()` from a different thread, normally the main application thread.
typedef ma_device_data_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ma_device> pDevice,
            ffi.Pointer<ffi.Void> pOutput,
            ffi.Pointer<ffi.Void> pInput,
            ma_uint32 frameCount)>>;

/// The notification callback for when the application should be notified of a change to the device.
///
/// This callback is used for notifying the application of changes such as when the device has started,
/// stopped, rerouted or an interruption has occurred. Note that not all backends will post all
/// notification types. For example, some backends will perform automatic stream routing without any
/// kind of notification to the host program which means miniaudio will never know about it and will
/// never be able to fire the rerouted notification. You should keep this in mind when designing your
/// program.
///
/// The stopped notification will *not* get fired when a device is rerouted.
///
///
/// Parameters
/// ----------
/// pNotification (in)
/// A pointer to a structure containing information about the event. Use the `pDevice` member of
/// this object to retrieve the relevant device. The `type` member can be used to discriminate
/// against each of the notification types.
///
///
/// Remarks
/// -------
/// Do not restart or uninitialize the device from the callback.
///
/// Not all notifications will be triggered by all backends, however the started and stopped events
/// should be reliable for all backends. Some backends do not have a good way to detect device
/// stoppages due to unplugging the device which may result in the stopped callback not getting
/// fired. This has been observed with at least one BSD variant.
///
/// The rerouted notification is fired *after* the reroute has occurred. The stopped notification will
/// not* get fired when a device is rerouted. The following backends are known to do automatic stream
/// rerouting, but do not have a way to be notified of the change:
///
/// DirectSound
///
/// The interruption notifications are used on mobile platforms for detecting when audio is interrupted
/// due to things like an incoming phone call. Currently this is only implemented on iOS. None of the
/// Android backends will report this notification.
typedef ma_device_notification_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ma_device_notification> pNotification)>>;

final class ma_device_notification extends ffi.Struct {
  external ffi.Pointer<ma_device> pDevice;

  @ffi.Int32()
  external int type;

  external UnnamedUnion2 data;
}

/// Device notification types.
abstract class ma_device_notification_type {
  static const int ma_device_notification_type_started = 0;
  static const int ma_device_notification_type_stopped = 1;
  static const int ma_device_notification_type_rerouted = 2;
  static const int ma_device_notification_type_interruption_began = 3;
  static const int ma_device_notification_type_interruption_ended = 4;
}

final class UnnamedUnion2 extends ffi.Union {
  external UnnamedStruct6 started;

  external UnnamedStruct7 stopped;

  external UnnamedStruct8 rerouted;

  external UnnamedStruct9 interruption;
}

final class UnnamedStruct6 extends ffi.Struct {
  @ffi.Int()
  external int _unused;
}

final class UnnamedStruct7 extends ffi.Struct {
  @ffi.Int()
  external int _unused;
}

final class UnnamedStruct8 extends ffi.Struct {
  @ffi.Int()
  external int _unused;
}

final class UnnamedStruct9 extends ffi.Struct {
  @ffi.Int()
  external int _unused;
}

/// DEPRECATED. Use ma_device_notification_proc instead.
///
/// The callback for when the device has been stopped.
///
/// This will be called when the device is stopped explicitly with `ma_device_stop()` and also called implicitly when the device is stopped through external forces
/// such as being unplugged or an internal error occurring.
///
///
/// Parameters
/// ----------
/// pDevice (in)
/// A pointer to the device that has just stopped.
///
///
/// Remarks
/// -------
/// Do not restart or uninitialize the device from the callback.
typedef ma_stop_proc = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_device> pDevice)>>;
typedef ma_event = ma_handle;
typedef ma_thread = ma_handle;
typedef ma_bool8 = ma_uint8;

final class ma_atomic_float extends ffi.Struct {
  @ma_float()
  external double value;
}

/// These float types are not used universally by miniaudio. It's to simplify some macro expansion for atomic types.
typedef ma_float = ffi.Float;

/// The idea of the duplex ring buffer is to act as the intermediary buffer when running two asynchronous devices in a duplex set up. The
/// capture device writes to it, and then a playback device reads from it.
///
/// At the moment this is just a simple naive implementation, but in the future I want to implement some dynamic resampling to seamlessly
/// handle desyncs. Note that the API is work in progress and may change at any time in any version.
///
/// The size of the buffer is based on the capture side since that's what'll be written to the buffer. It is based on the capture period size
/// in frames. The internal sample rate of the capture device is also needed in order to calculate the size.
final class ma_duplex_rb extends ffi.Struct {
  external ma_pcm_rb rb;
}

final class ma_pcm_rb extends ffi.Struct {
  external ma_data_source_base ds;

  external ma_rb rb;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  /// Not required for the ring buffer itself, but useful for associating the data with some sample rate, particularly for data sources.
  @ma_uint32()
  external int sampleRate;
}

final class ma_data_source_base extends ffi.Struct {
  external ffi.Pointer<ma_data_source_vtable> vtable;

  @ma_uint64()
  external int rangeBegInFrames;

  /// Set to -1 for unranged (default).
  @ma_uint64()
  external int rangeEndInFrames;

  /// Relative to rangeBegInFrames.
  @ma_uint64()
  external int loopBegInFrames;

  /// Relative to rangeBegInFrames. Set to -1 for the end of the range.
  @ma_uint64()
  external int loopEndInFrames;

  /// When non-NULL, the data source being initialized will act as a proxy and will route all operations to pCurrent. Used in conjunction with pNext/onGetNext for seamless chaining.
  external ffi.Pointer<ma_data_source> pCurrent;

  /// When set to NULL, onGetNext will be used.
  external ffi.Pointer<ma_data_source> pNext;

  /// Will be used when pNext is NULL. If both are NULL, no next will be used.
  external ma_data_source_get_next_proc onGetNext;

  @ma_bool32()
  external int isLooping;
}

final class ma_data_source_vtable extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_source> pDataSource,
              ffi.Pointer<ffi.Void> pFramesOut,
              ma_uint64 frameCount,
              ffi.Pointer<ma_uint64> pFramesRead)>> onRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source> pDataSource,
              ma_uint64 frameIndex)>> onSeek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_data_source> pDataSource,
              ffi.Pointer<ffi.Int32> pFormat,
              ffi.Pointer<ma_uint32> pChannels,
              ffi.Pointer<ma_uint32> pSampleRate,
              ffi.Pointer<ma_channel> pChannelMap,
              ffi.Size channelMapCap)>> onGetDataFormat;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source> pDataSource,
              ffi.Pointer<ma_uint64> pCursor)>> onGetCursor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source> pDataSource,
              ffi.Pointer<ma_uint64> pLength)>> onGetLength;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_data_source> pDataSource,
              ma_bool32 isLooping)>> onSetLooping;

  @ma_uint32()
  external int flags;
}

/// Data Source
typedef ma_data_source = ffi.Void;
typedef ma_uint64 = ffi.UnsignedLongLong;
typedef ma_channel = ma_uint8;
typedef ma_data_source_get_next_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ma_data_source> Function(
            ffi.Pointer<ma_data_source> pDataSource)>>;

/// Ring Buffer
final class ma_rb extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pBuffer;

  @ma_uint32()
  external int subbufferSizeInBytes;

  @ma_uint32()
  external int subbufferCount;

  @ma_uint32()
  external int subbufferStrideInBytes;

  /// Most significant bit is the loop flag. Lower 31 bits contains the actual offset in bytes. Must be used atomically.
  @ma_uint32()
  external int encodedReadOffset;

  /// Most significant bit is the loop flag. Lower 31 bits contains the actual offset in bytes. Must be used atomically.
  @ma_uint32()
  external int encodedWriteOffset;

  /// Used to know whether or not miniaudio is responsible for free()-ing the buffer.
  @ma_bool8()
  external int ownsBuffer;

  /// When set, clears the acquired write buffer before returning from ma_rb_acquire_write().
  @ma_bool8()
  external int clearOnWriteAcquire;

  external ma_allocation_callbacks allocationCallbacks;
}

final class UnnamedStruct10 extends ffi.Struct {
  @ffi.Int32()
  external int algorithm;

  external ffi.Pointer<ma_resampling_backend_vtable> pBackendVTable;

  external ffi.Pointer<ffi.Void> pBackendUserData;

  external UnnamedStruct12 linear;
}

abstract class ma_resample_algorithm {
  /// Fastest, lowest quality. Optional low-pass filtering. Default.
  static const int ma_resample_algorithm_linear = 0;
  static const int ma_resample_algorithm_custom = 1;
}

final class ma_resampling_backend_vtable extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampler_config> pConfig,
              ffi.Pointer<ffi.Size> pHeapSizeInBytes)>> onGetHeapSize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_resampler_config> pConfig,
                  ffi.Pointer<ffi.Void> pHeap,
                  ffi.Pointer<ffi.Pointer<ma_resampling_backend>> ppBackend)>>
      onInit;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_resampling_backend> pBackend,
                  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks)>>
      onUninit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend,
              ffi.Pointer<ffi.Void> pFramesIn,
              ffi.Pointer<ma_uint64> pFrameCountIn,
              ffi.Pointer<ffi.Void> pFramesOut,
              ffi.Pointer<ma_uint64> pFrameCountOut)>> onProcess;

  /// Optional. Rate changes will be disabled.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend,
              ma_uint32 sampleRateIn,
              ma_uint32 sampleRateOut)>> onSetRate;

  /// Optional. Latency will be reported as 0.
  external ffi.Pointer<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend)>> onGetInputLatency;

  /// Optional. Latency will be reported as 0.
  external ffi.Pointer<
      ffi.NativeFunction<
          ma_uint64 Function(ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend)>> onGetOutputLatency;

  /// Optional. Latency mitigation will be disabled.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_resampling_backend> pBackend,
                  ma_uint64 outputFrameCount,
                  ffi.Pointer<ma_uint64> pInputFrameCount)>>
      onGetRequiredInputFrameCount;

  /// Optional. Latency mitigation will be disabled.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_resampling_backend> pBackend,
                  ma_uint64 inputFrameCount,
                  ffi.Pointer<ma_uint64> pOutputFrameCount)>>
      onGetExpectedOutputFrameCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ma_resampling_backend> pBackend)>> onReset;
}

final class ma_resampler_config extends ffi.Struct {
  /// Must be either ma_format_f32 or ma_format_s16.
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRateIn;

  @ma_uint32()
  external int sampleRateOut;

  /// When set to ma_resample_algorithm_custom, pBackendVTable will be used.
  @ffi.Int32()
  external int algorithm;

  external ffi.Pointer<ma_resampling_backend_vtable> pBackendVTable;

  external ffi.Pointer<ffi.Void> pBackendUserData;

  external UnnamedStruct11 linear;
}

final class UnnamedStruct11 extends ffi.Struct {
  @ma_uint32()
  external int lpfOrder;
}

typedef ma_resampling_backend = ffi.Void;

final class UnnamedStruct12 extends ffi.Struct {
  @ma_uint32()
  external int lpfOrder;
}

final class UnnamedStruct13 extends ffi.Struct {
  /// Set to NULL if using default ID, otherwise set to the address of "id".
  external ffi.Pointer<ma_device_id> pID;

  /// If using an explicit device, will be set to a copy of the ID used for initialization. Otherwise cleared to 0.
  external ma_device_id id;

  /// Maybe temporary. Likely to be replaced with a query API.
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> name;

  /// Set to whatever was passed in when the device was initialized.
  @ffi.Int32()
  external int shareMode;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ffi.Array.multi([254])
  external ffi.Array<ma_channel> channelMap;

  @ffi.Int32()
  external int internalFormat;

  @ma_uint32()
  external int internalChannels;

  @ma_uint32()
  external int internalSampleRate;

  @ffi.Array.multi([254])
  external ffi.Array<ma_channel> internalChannelMap;

  @ma_uint32()
  external int internalPeriodSizeInFrames;

  @ma_uint32()
  external int internalPeriods;

  @ffi.Int32()
  external int channelMixMode;

  @ma_bool32()
  external int calculateLFEFromSpatialChannels;

  external ma_data_converter converter;

  /// For implementing fixed sized buffer callbacks. Will be null if using variable sized callbacks.
  external ffi.Pointer<ffi.Void> pIntermediaryBuffer;

  @ma_uint32()
  external int intermediaryBufferCap;

  /// How many valid frames are sitting in the intermediary buffer.
  @ma_uint32()
  external int intermediaryBufferLen;

  /// In external format. Can be null.
  external ffi.Pointer<ffi.Void> pInputCache;

  @ma_uint64()
  external int inputCacheCap;

  @ma_uint64()
  external int inputCacheConsumed;

  @ma_uint64()
  external int inputCacheRemaining;
}

abstract class ma_share_mode {
  static const int ma_share_mode_shared = 0;
  static const int ma_share_mode_exclusive = 1;
}

abstract class ma_channel_mix_mode {
  /// Simple averaging based on the plane(s) the channel is sitting on.
  static const int ma_channel_mix_mode_rectangular = 0;

  /// Drop excess channels; zeroed out extra channels.
  static const int ma_channel_mix_mode_simple = 1;

  /// Use custom weights specified in ma_channel_converter_config.
  static const int ma_channel_mix_mode_custom_weights = 2;
  static const int ma_channel_mix_mode_default = 0;
}

final class ma_data_converter extends ffi.Struct {
  @ffi.Int32()
  external int formatIn;

  @ffi.Int32()
  external int formatOut;

  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  @ma_uint32()
  external int sampleRateIn;

  @ma_uint32()
  external int sampleRateOut;

  @ffi.Int32()
  external int ditherMode;

  /// The execution path the data converter will follow when processing.
  @ffi.Int32()
  external int executionPath;

  external ma_channel_converter channelConverter;

  external ma_resampler resampler;

  @ma_bool8()
  external int hasPreFormatConversion;

  @ma_bool8()
  external int hasPostFormatConversion;

  @ma_bool8()
  external int hasChannelConverter;

  @ma_bool8()
  external int hasResampler;

  @ma_bool8()
  external int isPassthrough;

  /// Memory management.
  @ma_bool8()
  external int _ownsHeap;

  external ffi.Pointer<ffi.Void> _pHeap;
}

abstract class ma_dither_mode {
  static const int ma_dither_mode_none = 0;
  static const int ma_dither_mode_rectangle = 1;
  static const int ma_dither_mode_triangle = 2;
}

abstract class ma_data_converter_execution_path {
  /// No conversion.
  static const int ma_data_converter_execution_path_passthrough = 0;

  /// Only format conversion.
  static const int ma_data_converter_execution_path_format_only = 1;

  /// Only channel conversion.
  static const int ma_data_converter_execution_path_channels_only = 2;

  /// Only resampling.
  static const int ma_data_converter_execution_path_resample_only = 3;

  /// All conversions, but resample as the first step.
  static const int ma_data_converter_execution_path_resample_first = 4;

  /// All conversions, but channels as the first step.
  static const int ma_data_converter_execution_path_channels_first = 5;
}

final class ma_channel_converter extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  @ffi.Int32()
  external int mixingMode;

  @ffi.Int32()
  external int conversionPath;

  external ffi.Pointer<ma_channel> pChannelMapIn;

  external ffi.Pointer<ma_channel> pChannelMapOut;

  /// Indexed by output channel index.
  external ffi.Pointer<ma_uint8> pShuffleTable;

  /// [in][out]
  external UnnamedUnion3 weights;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

/// Channel Conversion
abstract class ma_channel_conversion_path {
  static const int ma_channel_conversion_path_unknown = 0;
  static const int ma_channel_conversion_path_passthrough = 1;

  /// Converting to mono.
  static const int ma_channel_conversion_path_mono_out = 2;

  /// Converting from mono.
  static const int ma_channel_conversion_path_mono_in = 3;

  /// Simple shuffle. Will use this when all channels are present in both input and output channel maps, but just in a different order.
  static const int ma_channel_conversion_path_shuffle = 4;

  /// Blended based on weights.
  static const int ma_channel_conversion_path_weights = 5;
}

final class UnnamedUnion3 extends ffi.Union {
  external ffi.Pointer<ffi.Pointer<ffi.Float>> f32;

  external ffi.Pointer<ffi.Pointer<ma_int32>> s16;
}

final class ma_resampler extends ffi.Struct {
  external ffi.Pointer<ma_resampling_backend> pBackend;

  external ffi.Pointer<ma_resampling_backend_vtable> pBackendVTable;

  external ffi.Pointer<ffi.Void> pBackendUserData;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRateIn;

  @ma_uint32()
  external int sampleRateOut;

  /// State for stock resamplers so we can avoid a malloc. For stock resamplers, pBackend will point here.
  external UnnamedUnion4 state;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

final class UnnamedUnion4 extends ffi.Union {
  external ma_linear_resampler linear;
}

final class ma_linear_resampler extends ffi.Struct {
  external ma_linear_resampler_config config;

  @ma_uint32()
  external int inAdvanceInt;

  @ma_uint32()
  external int inAdvanceFrac;

  @ma_uint32()
  external int inTimeInt;

  @ma_uint32()
  external int inTimeFrac;

  /// The previous input frame.
  external UnnamedUnion5 x0;

  /// The next input frame.
  external UnnamedUnion6 x1;

  external ma_lpf lpf;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

/// Resampling
final class ma_linear_resampler_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRateIn;

  @ma_uint32()
  external int sampleRateOut;

  /// The low-pass filter order. Setting this to 0 will disable low-pass filtering.
  @ma_uint32()
  external int lpfOrder;

  /// 0..1. Defaults to 1. 1 = Half the sampling frequency (Nyquist Frequency), 0.5 = Quarter the sampling frequency (half Nyquest Frequency), etc.
  @ffi.Double()
  external double lpfNyquistFactor;
}

final class UnnamedUnion5 extends ffi.Union {
  external ffi.Pointer<ffi.Float> f32;

  external ffi.Pointer<ma_int16> s16;
}

typedef ma_int16 = ffi.Short;

final class UnnamedUnion6 extends ffi.Union {
  external ffi.Pointer<ffi.Float> f32;

  external ffi.Pointer<ma_int16> s16;
}

final class ma_lpf extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int lpf1Count;

  @ma_uint32()
  external int lpf2Count;

  external ffi.Pointer<ma_lpf1> pLPF1;

  external ffi.Pointer<ma_lpf2> pLPF2;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

final class ma_lpf1 extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  external ma_biquad_coefficient a;

  external ffi.Pointer<ma_biquad_coefficient> pR1;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

/// Biquad Filtering
final class ma_biquad_coefficient extends ffi.Union {
  @ffi.Float()
  external double f32;

  @ma_int32()
  external int s32;
}

final class ma_lpf2 extends ffi.Struct {
  /// The second order low-pass filter is implemented as a biquad filter.
  external ma_biquad bq;
}

final class ma_biquad extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  external ma_biquad_coefficient b0;

  external ma_biquad_coefficient b1;

  external ma_biquad_coefficient b2;

  external ma_biquad_coefficient a1;

  external ma_biquad_coefficient a2;

  external ffi.Pointer<ma_biquad_coefficient> pR1;

  external ffi.Pointer<ma_biquad_coefficient> pR2;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

final class UnnamedStruct14 extends ffi.Struct {
  /// Set to NULL if using default ID, otherwise set to the address of "id".
  external ffi.Pointer<ma_device_id> pID;

  /// If using an explicit device, will be set to a copy of the ID used for initialization. Otherwise cleared to 0.
  external ma_device_id id;

  /// Maybe temporary. Likely to be replaced with a query API.
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> name;

  /// Set to whatever was passed in when the device was initialized.
  @ffi.Int32()
  external int shareMode;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ffi.Array.multi([254])
  external ffi.Array<ma_channel> channelMap;

  @ffi.Int32()
  external int internalFormat;

  @ma_uint32()
  external int internalChannels;

  @ma_uint32()
  external int internalSampleRate;

  @ffi.Array.multi([254])
  external ffi.Array<ma_channel> internalChannelMap;

  @ma_uint32()
  external int internalPeriodSizeInFrames;

  @ma_uint32()
  external int internalPeriods;

  @ffi.Int32()
  external int channelMixMode;

  @ma_bool32()
  external int calculateLFEFromSpatialChannels;

  external ma_data_converter converter;

  /// For implementing fixed sized buffer callbacks. Will be null if using variable sized callbacks.
  external ffi.Pointer<ffi.Void> pIntermediaryBuffer;

  @ma_uint32()
  external int intermediaryBufferCap;

  /// How many valid frames are sitting in the intermediary buffer.
  @ma_uint32()
  external int intermediaryBufferLen;
}

final class UnnamedUnion7 extends ffi.Union {
  external UnnamedStruct15 wasapi;

  external UnnamedStruct16 dsound;

  external UnnamedStruct17 winmm;

  external UnnamedStruct18 jack;

  external UnnamedStruct19 null_device;
}

final class UnnamedStruct15 extends ffi.Struct {
  /// IAudioClient
  external ma_ptr pAudioClientPlayback;

  /// IAudioClient
  external ma_ptr pAudioClientCapture;

  /// IAudioRenderClient
  external ma_ptr pRenderClient;

  /// IAudioCaptureClient
  external ma_ptr pCaptureClient;

  /// Used for IMMNotificationClient notifications. Required for detecting default device changes.
  external ma_ptr pDeviceEnumerator;

  external ma_IMMNotificationClient notificationClient;

  /// Auto reset. Initialized to signaled.
  external ma_handle hEventPlayback;

  /// Auto reset. Initialized to unsignaled.
  external ma_handle hEventCapture;

  /// Value from GetBufferSize(). internalPeriodSizeInFrames is not set to the _actual_ buffer size when low-latency shared mode is being used due to the way the IAudioClient3 API works.
  @ma_uint32()
  external int actualBufferSizeInFramesPlayback;

  @ma_uint32()
  external int actualBufferSizeInFramesCapture;

  @ma_uint32()
  external int originalPeriodSizeInFrames;

  @ma_uint32()
  external int originalPeriodSizeInMilliseconds;

  @ma_uint32()
  external int originalPeriods;

  @ffi.Int32()
  external int originalPerformanceProfile;

  @ma_uint32()
  external int periodSizeInFramesPlayback;

  @ma_uint32()
  external int periodSizeInFramesCapture;

  external ffi.Pointer<ffi.Void> pMappedBufferCapture;

  @ma_uint32()
  external int mappedBufferCaptureCap;

  @ma_uint32()
  external int mappedBufferCaptureLen;

  external ffi.Pointer<ffi.Void> pMappedBufferPlayback;

  @ma_uint32()
  external int mappedBufferPlaybackCap;

  @ma_uint32()
  external int mappedBufferPlaybackLen;

  /// Can be read and written simultaneously across different threads. Must be used atomically, and must be 32-bit.
  external ma_atomic_bool32 isStartedCapture;

  /// Can be read and written simultaneously across different threads. Must be used atomically, and must be 32-bit.
  external ma_atomic_bool32 isStartedPlayback;

  @ma_uint32()
  external int loopbackProcessID;

  @ma_bool8()
  external int loopbackProcessExclude;

  /// When set to true, disables the use of AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM.
  @ma_bool8()
  external int noAutoConvertSRC;

  /// When set to true, disables the use of AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY.
  @ma_bool8()
  external int noDefaultQualitySRC;

  @ma_bool8()
  external int noHardwareOffloading;

  @ma_bool8()
  external int allowCaptureAutoStreamRouting;

  @ma_bool8()
  external int allowPlaybackAutoStreamRouting;

  @ma_bool8()
  external int isDetachedPlayback;

  @ma_bool8()
  external int isDetachedCapture;

  @ffi.Int32()
  external int usage;

  external ffi.Pointer<ffi.Void> hAvrtHandle;

  external ma_mutex rerouteLock;
}

typedef ma_ptr = ffi.Pointer<ffi.Void>;

/// We need a IMMNotificationClient object for WASAPI.
final class ma_IMMNotificationClient extends ffi.Struct {
  external ffi.Pointer<ffi.Void> lpVtbl;

  @ma_uint32()
  external int counter;

  external ffi.Pointer<ma_device> pDevice;
}

abstract class ma_performance_profile {
  static const int ma_performance_profile_low_latency = 0;
  static const int ma_performance_profile_conservative = 1;
}

final class ma_atomic_bool32 extends ffi.Struct {
  @ma_bool32()
  external int value;
}

/// WASAPI audio thread priority characteristics.
abstract class ma_wasapi_usage {
  static const int ma_wasapi_usage_default = 0;
  static const int ma_wasapi_usage_games = 1;
  static const int ma_wasapi_usage_pro_audio = 2;
}

final class UnnamedStruct16 extends ffi.Struct {
  /// LPDIRECTSOUND
  external ma_ptr pPlayback;

  /// LPDIRECTSOUNDBUFFER
  external ma_ptr pPlaybackPrimaryBuffer;

  /// LPDIRECTSOUNDBUFFER
  external ma_ptr pPlaybackBuffer;

  /// LPDIRECTSOUNDCAPTURE
  external ma_ptr pCapture;

  /// LPDIRECTSOUNDCAPTUREBUFFER
  external ma_ptr pCaptureBuffer;
}

final class UnnamedStruct17 extends ffi.Struct {
  /// HWAVEOUT
  external ma_handle hDevicePlayback;

  /// HWAVEIN
  external ma_handle hDeviceCapture;

  /// HANDLE
  external ma_handle hEventPlayback;

  /// HANDLE
  external ma_handle hEventCapture;

  @ma_uint32()
  external int fragmentSizeInFrames;

  /// [0,periods). Used as an index into pWAVEHDRPlayback.
  @ma_uint32()
  external int iNextHeaderPlayback;

  /// [0,periods). Used as an index into pWAVEHDRCapture.
  @ma_uint32()
  external int iNextHeaderCapture;

  /// The number of PCM frames consumed in the buffer in pWAVEHEADER[iNextHeader].
  @ma_uint32()
  external int headerFramesConsumedPlayback;

  /// ^^^
  @ma_uint32()
  external int headerFramesConsumedCapture;

  /// One instantiation for each period.
  external ffi.Pointer<ma_uint8> pWAVEHDRPlayback;

  /// One instantiation for each period.
  external ffi.Pointer<ma_uint8> pWAVEHDRCapture;

  external ffi.Pointer<ma_uint8> pIntermediaryBufferPlayback;

  external ffi.Pointer<ma_uint8> pIntermediaryBufferCapture;

  /// Used internally and is used for the heap allocated data for the intermediary buffer and the WAVEHDR structures.
  external ffi.Pointer<ma_uint8> _pHeapData;
}

final class UnnamedStruct18 extends ffi.Struct {
  /// jack_client_t
  external ma_ptr pClient;

  /// jack_port_t
  external ffi.Pointer<ma_ptr> ppPortsPlayback;

  /// jack_port_t
  external ffi.Pointer<ma_ptr> ppPortsCapture;

  /// Typed as a float because JACK is always floating point.
  external ffi.Pointer<ffi.Float> pIntermediaryBufferPlayback;

  external ffi.Pointer<ffi.Float> pIntermediaryBufferCapture;
}

final class UnnamedStruct19 extends ffi.Struct {
  external ma_thread deviceThread;

  external ma_event operationEvent;

  external ma_event operationCompletionEvent;

  external ma_semaphore operationSemaphore;

  @ma_uint32()
  external int operation;

  @ffi.Int32()
  external int operationResult;

  external ma_timer timer;

  @ffi.Double()
  external double priorRunTime;

  @ma_uint32()
  external int currentPeriodFramesRemainingPlayback;

  @ma_uint32()
  external int currentPeriodFramesRemainingCapture;

  @ma_uint64()
  external int lastProcessedFramePlayback;

  @ma_uint64()
  external int lastProcessedFrameCapture;

  /// Read and written by multiple threads. Must be used atomically, and must be 32-bit for compiler compatibility.
  external ma_atomic_bool32 isStarted;
}

typedef ma_semaphore = ma_handle;

final class ma_timer extends ffi.Union {
  @ma_int64()
  external int counter;

  @ffi.Double()
  external double counterD;
}

typedef ma_int64 = ffi.LongLong;

final class ma_device_config extends ffi.Struct {
  @ffi.Int32()
  external int deviceType;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int periodSizeInFrames;

  @ma_uint32()
  external int periodSizeInMilliseconds;

  @ma_uint32()
  external int periods;

  @ffi.Int32()
  external int performanceProfile;

  /// When set to true, the contents of the output buffer passed into the data callback will be left undefined rather than initialized to silence.
  @ma_bool8()
  external int noPreSilencedOutputBuffer;

  /// When set to true, the contents of the output buffer passed into the data callback will be clipped after returning. Only applies when the playback sample format is f32.
  @ma_bool8()
  external int noClip;

  /// Do not disable denormals when firing the data callback.
  @ma_bool8()
  external int noDisableDenormals;

  /// Disables strict fixed-sized data callbacks. Setting this to true will result in the period size being treated only as a hint to the backend. This is an optimization for those who don't need fixed sized callbacks.
  @ma_bool8()
  external int noFixedSizedCallback;

  external ma_device_data_proc dataCallback;

  external ma_device_notification_proc notificationCallback;

  external ma_stop_proc stopCallback;

  external ffi.Pointer<ffi.Void> pUserData;

  external ma_resampler_config resampling;

  external UnnamedStruct20 playback;

  external UnnamedStruct21 capture;

  external UnnamedStruct22 wasapi;

  external UnnamedStruct23 alsa;

  external UnnamedStruct24 pulse;

  external UnnamedStruct25 coreaudio;

  external UnnamedStruct26 opensl;

  external UnnamedStruct27 aaudio;
}

final class UnnamedStruct20 extends ffi.Struct {
  external ffi.Pointer<ma_device_id> pDeviceID;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  external ffi.Pointer<ma_channel> pChannelMap;

  @ffi.Int32()
  external int channelMixMode;

  /// When an output LFE channel is present, but no input LFE, set to true to set the output LFE to the average of all spatial channels (LR, FR, etc.). Ignored when an input LFE is present.
  @ma_bool32()
  external int calculateLFEFromSpatialChannels;

  @ffi.Int32()
  external int shareMode;
}

final class UnnamedStruct21 extends ffi.Struct {
  external ffi.Pointer<ma_device_id> pDeviceID;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  external ffi.Pointer<ma_channel> pChannelMap;

  @ffi.Int32()
  external int channelMixMode;

  /// When an output LFE channel is present, but no input LFE, set to true to set the output LFE to the average of all spatial channels (LR, FR, etc.). Ignored when an input LFE is present.
  @ma_bool32()
  external int calculateLFEFromSpatialChannels;

  @ffi.Int32()
  external int shareMode;
}

final class UnnamedStruct22 extends ffi.Struct {
  /// When configured, uses Avrt APIs to set the thread characteristics.
  @ffi.Int32()
  external int usage;

  /// When set to true, disables the use of AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM.
  @ma_bool8()
  external int noAutoConvertSRC;

  /// When set to true, disables the use of AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY.
  @ma_bool8()
  external int noDefaultQualitySRC;

  /// Disables automatic stream routing.
  @ma_bool8()
  external int noAutoStreamRouting;

  /// Disables WASAPI's hardware offloading feature.
  @ma_bool8()
  external int noHardwareOffloading;

  /// The process ID to include or exclude for loopback mode. Set to 0 to capture audio from all processes. Ignored when an explicit device ID is specified.
  @ma_uint32()
  external int loopbackProcessID;

  /// When set to true, excludes the process specified by loopbackProcessID. By default, the process will be included.
  @ma_bool8()
  external int loopbackProcessExclude;
}

final class UnnamedStruct23 extends ffi.Struct {
  /// Disables MMap mode.
  @ma_bool32()
  external int noMMap;

  /// Opens the ALSA device with SND_PCM_NO_AUTO_FORMAT.
  @ma_bool32()
  external int noAutoFormat;

  /// Opens the ALSA device with SND_PCM_NO_AUTO_CHANNELS.
  @ma_bool32()
  external int noAutoChannels;

  /// Opens the ALSA device with SND_PCM_NO_AUTO_RESAMPLE.
  @ma_bool32()
  external int noAutoResample;
}

final class UnnamedStruct24 extends ffi.Struct {
  external ffi.Pointer<ffi.Char> pStreamNamePlayback;

  external ffi.Pointer<ffi.Char> pStreamNameCapture;
}

final class UnnamedStruct25 extends ffi.Struct {
  /// Desktop only. When enabled, allows changing of the sample rate at the operating system level.
  @ma_bool32()
  external int allowNominalSampleRateChange;
}

final class UnnamedStruct26 extends ffi.Struct {
  @ffi.Int32()
  external int streamType;

  @ffi.Int32()
  external int recordingPreset;

  @ma_bool32()
  external int enableCompatibilityWorkarounds;
}

/// OpenSL stream types.
abstract class ma_opensl_stream_type {
  /// Leaves the stream type unset.
  static const int ma_opensl_stream_type_default = 0;

  /// SL_ANDROID_STREAM_VOICE
  static const int ma_opensl_stream_type_voice = 1;

  /// SL_ANDROID_STREAM_SYSTEM
  static const int ma_opensl_stream_type_system = 2;

  /// SL_ANDROID_STREAM_RING
  static const int ma_opensl_stream_type_ring = 3;

  /// SL_ANDROID_STREAM_MEDIA
  static const int ma_opensl_stream_type_media = 4;

  /// SL_ANDROID_STREAM_ALARM
  static const int ma_opensl_stream_type_alarm = 5;

  /// SL_ANDROID_STREAM_NOTIFICATION
  static const int ma_opensl_stream_type_notification = 6;
}

/// OpenSL recording presets.
abstract class ma_opensl_recording_preset {
  /// Leaves the input preset unset.
  static const int ma_opensl_recording_preset_default = 0;

  /// SL_ANDROID_RECORDING_PRESET_GENERIC
  static const int ma_opensl_recording_preset_generic = 1;

  /// SL_ANDROID_RECORDING_PRESET_CAMCORDER
  static const int ma_opensl_recording_preset_camcorder = 2;

  /// SL_ANDROID_RECORDING_PRESET_VOICE_RECOGNITION
  static const int ma_opensl_recording_preset_voice_recognition = 3;

  /// SL_ANDROID_RECORDING_PRESET_VOICE_COMMUNICATION
  static const int ma_opensl_recording_preset_voice_communication = 4;

  /// SL_ANDROID_RECORDING_PRESET_UNPROCESSED
  static const int ma_opensl_recording_preset_voice_unprocessed = 5;
}

final class UnnamedStruct27 extends ffi.Struct {
  @ffi.Int32()
  external int usage;

  @ffi.Int32()
  external int contentType;

  @ffi.Int32()
  external int inputPreset;

  @ffi.Int32()
  external int allowedCapturePolicy;

  @ma_bool32()
  external int noAutoStartAfterReroute;

  @ma_bool32()
  external int enableCompatibilityWorkarounds;
}

/// AAudio usage types.
abstract class ma_aaudio_usage {
  /// Leaves the usage type unset.
  static const int ma_aaudio_usage_default = 0;

  /// AAUDIO_USAGE_MEDIA
  static const int ma_aaudio_usage_media = 1;

  /// AAUDIO_USAGE_VOICE_COMMUNICATION
  static const int ma_aaudio_usage_voice_communication = 2;

  /// AAUDIO_USAGE_VOICE_COMMUNICATION_SIGNALLING
  static const int ma_aaudio_usage_voice_communication_signalling = 3;

  /// AAUDIO_USAGE_ALARM
  static const int ma_aaudio_usage_alarm = 4;

  /// AAUDIO_USAGE_NOTIFICATION
  static const int ma_aaudio_usage_notification = 5;

  /// AAUDIO_USAGE_NOTIFICATION_RINGTONE
  static const int ma_aaudio_usage_notification_ringtone = 6;

  /// AAUDIO_USAGE_NOTIFICATION_EVENT
  static const int ma_aaudio_usage_notification_event = 7;

  /// AAUDIO_USAGE_ASSISTANCE_ACCESSIBILITY
  static const int ma_aaudio_usage_assistance_accessibility = 8;

  /// AAUDIO_USAGE_ASSISTANCE_NAVIGATION_GUIDANCE
  static const int ma_aaudio_usage_assistance_navigation_guidance = 9;

  /// AAUDIO_USAGE_ASSISTANCE_SONIFICATION
  static const int ma_aaudio_usage_assistance_sonification = 10;

  /// AAUDIO_USAGE_GAME
  static const int ma_aaudio_usage_game = 11;

  /// AAUDIO_USAGE_ASSISTANT
  static const int ma_aaudio_usage_assitant = 12;

  /// AAUDIO_SYSTEM_USAGE_EMERGENCY
  static const int ma_aaudio_usage_emergency = 13;

  /// AAUDIO_SYSTEM_USAGE_SAFETY
  static const int ma_aaudio_usage_safety = 14;

  /// AAUDIO_SYSTEM_USAGE_VEHICLE_STATUS
  static const int ma_aaudio_usage_vehicle_status = 15;

  /// AAUDIO_SYSTEM_USAGE_ANNOUNCEMENT
  static const int ma_aaudio_usage_announcement = 16;
}

/// AAudio content types.
abstract class ma_aaudio_content_type {
  /// Leaves the content type unset.
  static const int ma_aaudio_content_type_default = 0;

  /// AAUDIO_CONTENT_TYPE_SPEECH
  static const int ma_aaudio_content_type_speech = 1;

  /// AAUDIO_CONTENT_TYPE_MUSIC
  static const int ma_aaudio_content_type_music = 2;

  /// AAUDIO_CONTENT_TYPE_MOVIE
  static const int ma_aaudio_content_type_movie = 3;

  /// AAUDIO_CONTENT_TYPE_SONIFICATION
  static const int ma_aaudio_content_type_sonification = 4;
}

/// AAudio input presets.
abstract class ma_aaudio_input_preset {
  /// Leaves the input preset unset.
  static const int ma_aaudio_input_preset_default = 0;

  /// AAUDIO_INPUT_PRESET_GENERIC
  static const int ma_aaudio_input_preset_generic = 1;

  /// AAUDIO_INPUT_PRESET_CAMCORDER
  static const int ma_aaudio_input_preset_camcorder = 2;

  /// AAUDIO_INPUT_PRESET_VOICE_RECOGNITION
  static const int ma_aaudio_input_preset_voice_recognition = 3;

  /// AAUDIO_INPUT_PRESET_VOICE_COMMUNICATION
  static const int ma_aaudio_input_preset_voice_communication = 4;

  /// AAUDIO_INPUT_PRESET_UNPROCESSED
  static const int ma_aaudio_input_preset_unprocessed = 5;

  /// AAUDIO_INPUT_PRESET_VOICE_PERFORMANCE
  static const int ma_aaudio_input_preset_voice_performance = 6;
}

abstract class ma_aaudio_allowed_capture_policy {
  /// Leaves the allowed capture policy unset.
  static const int ma_aaudio_allow_capture_default = 0;

  /// AAUDIO_ALLOW_CAPTURE_BY_ALL
  static const int ma_aaudio_allow_capture_by_all = 1;

  /// AAUDIO_ALLOW_CAPTURE_BY_SYSTEM
  static const int ma_aaudio_allow_capture_by_system = 2;

  /// AAUDIO_ALLOW_CAPTURE_BY_NONE
  static const int ma_aaudio_allow_capture_by_none = 3;
}

/// Describes some basic details about a playback or capture device.
final class ma_device_descriptor extends ffi.Struct {
  external ffi.Pointer<ma_device_id> pDeviceID;

  @ffi.Int32()
  external int shareMode;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Array.multi([254])
  external ffi.Array<ma_channel> channelMap;

  @ma_uint32()
  external int periodSizeInFrames;

  @ma_uint32()
  external int periodSizeInMilliseconds;

  @ma_uint32()
  external int periodCount;
}

/// Backend enums must be in priority order.
abstract class ma_backend {
  static const int ma_backend_wasapi = 0;
  static const int ma_backend_dsound = 1;
  static const int ma_backend_winmm = 2;
  static const int ma_backend_coreaudio = 3;
  static const int ma_backend_sndio = 4;
  static const int ma_backend_audio4 = 5;
  static const int ma_backend_oss = 6;
  static const int ma_backend_pulseaudio = 7;
  static const int ma_backend_alsa = 8;
  static const int ma_backend_jack = 9;
  static const int ma_backend_aaudio = 10;
  static const int ma_backend_opensl = 11;
  static const int ma_backend_webaudio = 12;

  /// <-- Custom backend, with callbacks defined by the context config.
  static const int ma_backend_custom = 13;

  /// <-- Must always be the last item. Lowest priority, and used as the terminator for backend enumeration.
  static const int ma_backend_null = 14;
}

final class UnnamedUnion8 extends ffi.Union {
  external UnnamedStruct28 wasapi;

  external UnnamedStruct32 dsound;

  external UnnamedStruct33 winmm;

  external UnnamedStruct34 jack;

  external UnnamedStruct35 null_backend;
}

final class UnnamedStruct28 extends ffi.Struct {
  external ma_thread commandThread;

  external ma_mutex commandLock;

  external ma_semaphore commandSem;

  @ma_uint32()
  external int commandIndex;

  @ma_uint32()
  external int commandCount;

  @ffi.Array.multi([4])
  external ffi.Array<ma_context_command__wasapi> commands;

  external ma_handle hAvrt;

  external ma_proc AvSetMmThreadCharacteristicsA;

  external ma_proc AvRevertMmThreadcharacteristics;

  external ma_handle hMMDevapi;

  external ma_proc ActivateAudioInterfaceAsync;
}

/// WASAPI specific structure for some commands which must run on a common thread due to bugs in WASAPI.
final class ma_context_command__wasapi extends ffi.Struct {
  @ffi.Int()
  external int code;

  /// This will be signalled when the event is complete.
  external ffi.Pointer<ma_event> pEvent;

  external UnnamedUnion9 data;
}

final class UnnamedUnion9 extends ffi.Union {
  external UnnamedStruct29 quit;

  external UnnamedStruct30 createAudioClient;

  external UnnamedStruct31 releaseAudioClient;
}

final class UnnamedStruct29 extends ffi.Struct {
  @ffi.Int()
  external int _unused;
}

final class UnnamedStruct30 extends ffi.Struct {
  @ffi.Int32()
  external int deviceType;

  external ffi.Pointer<ffi.Void> pAudioClient;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> ppAudioClientService;

  /// The result from creating the audio client service.
  external ffi.Pointer<ffi.Int32> pResult;
}

final class UnnamedStruct31 extends ffi.Struct {
  external ffi.Pointer<ma_device> pDevice;

  @ffi.Int32()
  external int deviceType;
}

typedef ma_proc = ffi.Pointer<ffi.Void>;

final class UnnamedStruct32 extends ffi.Struct {
  external ma_handle hDSoundDLL;

  external ma_proc DirectSoundCreate;

  external ma_proc DirectSoundEnumerateA;

  external ma_proc DirectSoundCaptureCreate;

  external ma_proc DirectSoundCaptureEnumerateA;
}

final class UnnamedStruct33 extends ffi.Struct {
  external ma_handle hWinMM;

  external ma_proc waveOutGetNumDevs;

  external ma_proc waveOutGetDevCapsA;

  external ma_proc waveOutOpen;

  external ma_proc waveOutClose;

  external ma_proc waveOutPrepareHeader;

  external ma_proc waveOutUnprepareHeader;

  external ma_proc waveOutWrite;

  external ma_proc waveOutReset;

  external ma_proc waveInGetNumDevs;

  external ma_proc waveInGetDevCapsA;

  external ma_proc waveInOpen;

  external ma_proc waveInClose;

  external ma_proc waveInPrepareHeader;

  external ma_proc waveInUnprepareHeader;

  external ma_proc waveInAddBuffer;

  external ma_proc waveInStart;

  external ma_proc waveInReset;
}

final class UnnamedStruct34 extends ffi.Struct {
  external ma_handle jackSO;

  external ma_proc jack_client_open;

  external ma_proc jack_client_close;

  external ma_proc jack_client_name_size;

  external ma_proc jack_set_process_callback;

  external ma_proc jack_set_buffer_size_callback;

  external ma_proc jack_on_shutdown;

  external ma_proc jack_get_sample_rate;

  external ma_proc jack_get_buffer_size;

  external ma_proc jack_get_ports;

  external ma_proc jack_activate;

  external ma_proc jack_deactivate;

  external ma_proc jack_connect;

  external ma_proc jack_port_register;

  external ma_proc jack_port_name;

  external ma_proc jack_port_get_buffer;

  external ma_proc jack_free;

  external ffi.Pointer<ffi.Char> pClientName;

  @ma_bool32()
  external int tryStartServer;
}

final class UnnamedStruct35 extends ffi.Struct {
  @ffi.Int()
  external int _unused;
}

final class UnnamedUnion10 extends ffi.Union {
  external UnnamedStruct36 win32;

  @ffi.Int()
  external int _unused;
}

final class UnnamedStruct36 extends ffi.Struct {
  /// HMODULE
  external ma_handle hOle32DLL;

  external ma_proc CoInitialize;

  external ma_proc CoInitializeEx;

  external ma_proc CoUninitialize;

  external ma_proc CoCreateInstance;

  external ma_proc CoTaskMemFree;

  external ma_proc PropVariantClear;

  external ma_proc StringFromGUID2;

  /// HMODULE
  external ma_handle hUser32DLL;

  external ma_proc GetForegroundWindow;

  external ma_proc GetDesktopWindow;

  /// HMODULE
  external ma_handle hAdvapi32DLL;

  external ma_proc RegOpenKeyExA;

  external ma_proc RegCloseKey;

  external ma_proc RegQueryValueExA;

  /// HRESULT
  @ffi.Long()
  external int CoInitializeResult;
}

abstract class _ma_channel_position {
  static const int MA_CHANNEL_NONE = 0;
  static const int MA_CHANNEL_MONO = 1;
  static const int MA_CHANNEL_FRONT_LEFT = 2;
  static const int MA_CHANNEL_FRONT_RIGHT = 3;
  static const int MA_CHANNEL_FRONT_CENTER = 4;
  static const int MA_CHANNEL_LFE = 5;
  static const int MA_CHANNEL_BACK_LEFT = 6;
  static const int MA_CHANNEL_BACK_RIGHT = 7;
  static const int MA_CHANNEL_FRONT_LEFT_CENTER = 8;
  static const int MA_CHANNEL_FRONT_RIGHT_CENTER = 9;
  static const int MA_CHANNEL_BACK_CENTER = 10;
  static const int MA_CHANNEL_SIDE_LEFT = 11;
  static const int MA_CHANNEL_SIDE_RIGHT = 12;
  static const int MA_CHANNEL_TOP_CENTER = 13;
  static const int MA_CHANNEL_TOP_FRONT_LEFT = 14;
  static const int MA_CHANNEL_TOP_FRONT_CENTER = 15;
  static const int MA_CHANNEL_TOP_FRONT_RIGHT = 16;
  static const int MA_CHANNEL_TOP_BACK_LEFT = 17;
  static const int MA_CHANNEL_TOP_BACK_CENTER = 18;
  static const int MA_CHANNEL_TOP_BACK_RIGHT = 19;
  static const int MA_CHANNEL_AUX_0 = 20;
  static const int MA_CHANNEL_AUX_1 = 21;
  static const int MA_CHANNEL_AUX_2 = 22;
  static const int MA_CHANNEL_AUX_3 = 23;
  static const int MA_CHANNEL_AUX_4 = 24;
  static const int MA_CHANNEL_AUX_5 = 25;
  static const int MA_CHANNEL_AUX_6 = 26;
  static const int MA_CHANNEL_AUX_7 = 27;
  static const int MA_CHANNEL_AUX_8 = 28;
  static const int MA_CHANNEL_AUX_9 = 29;
  static const int MA_CHANNEL_AUX_10 = 30;
  static const int MA_CHANNEL_AUX_11 = 31;
  static const int MA_CHANNEL_AUX_12 = 32;
  static const int MA_CHANNEL_AUX_13 = 33;
  static const int MA_CHANNEL_AUX_14 = 34;
  static const int MA_CHANNEL_AUX_15 = 35;
  static const int MA_CHANNEL_AUX_16 = 36;
  static const int MA_CHANNEL_AUX_17 = 37;
  static const int MA_CHANNEL_AUX_18 = 38;
  static const int MA_CHANNEL_AUX_19 = 39;
  static const int MA_CHANNEL_AUX_20 = 40;
  static const int MA_CHANNEL_AUX_21 = 41;
  static const int MA_CHANNEL_AUX_22 = 42;
  static const int MA_CHANNEL_AUX_23 = 43;
  static const int MA_CHANNEL_AUX_24 = 44;
  static const int MA_CHANNEL_AUX_25 = 45;
  static const int MA_CHANNEL_AUX_26 = 46;
  static const int MA_CHANNEL_AUX_27 = 47;
  static const int MA_CHANNEL_AUX_28 = 48;
  static const int MA_CHANNEL_AUX_29 = 49;
  static const int MA_CHANNEL_AUX_30 = 50;
  static const int MA_CHANNEL_AUX_31 = 51;
  static const int MA_CHANNEL_LEFT = 2;
  static const int MA_CHANNEL_RIGHT = 3;
  static const int MA_CHANNEL_POSITION_COUNT = 52;
}

abstract class ma_stream_format {
  static const int ma_stream_format_pcm = 0;
}

abstract class ma_stream_layout {
  static const int ma_stream_layout_interleaved = 0;
  static const int ma_stream_layout_deinterleaved = 1;
}

abstract class ma_standard_sample_rate {
  /// Most common
  static const int ma_standard_sample_rate_48000 = 48000;
  static const int ma_standard_sample_rate_44100 = 44100;

  /// Lows
  static const int ma_standard_sample_rate_32000 = 32000;
  static const int ma_standard_sample_rate_24000 = 24000;
  static const int ma_standard_sample_rate_22050 = 22050;

  /// Highs
  static const int ma_standard_sample_rate_88200 = 88200;
  static const int ma_standard_sample_rate_96000 = 96000;
  static const int ma_standard_sample_rate_176400 = 176400;
  static const int ma_standard_sample_rate_192000 = 192000;

  /// Extreme lows
  static const int ma_standard_sample_rate_16000 = 16000;
  static const int ma_standard_sample_rate_11025 = 11250;
  static const int ma_standard_sample_rate_8000 = 8000;

  /// Extreme highs
  static const int ma_standard_sample_rate_352800 = 352800;
  static const int ma_standard_sample_rate_384000 = 384000;
  static const int ma_standard_sample_rate_min = 8000;
  static const int ma_standard_sample_rate_max = 384000;

  /// Need to maintain the count manually. Make sure this is updated if items are added to enum.
  static const int ma_standard_sample_rate_count = 14;
}

abstract class ma_standard_channel_map {
  static const int ma_standard_channel_map_microsoft = 0;
  static const int ma_standard_channel_map_alsa = 1;

  /// Based off AIFF.
  static const int ma_standard_channel_map_rfc3551 = 2;
  static const int ma_standard_channel_map_flac = 3;
  static const int ma_standard_channel_map_vorbis = 4;

  /// FreeBSD's sound(4).
  static const int ma_standard_channel_map_sound4 = 5;

  /// www.sndio.org/tips.html
  static const int ma_standard_channel_map_sndio = 6;

  /// https://webaudio.github.io/web-audio-api/#ChannelOrdering. Only 1, 2, 4 and 6 channels are defined, but can fill in the gaps with logical assumptions.
  static const int ma_standard_channel_map_webaudio = 3;
  static const int ma_standard_channel_map_default = 0;
}

final class ma_lcg extends ffi.Struct {
  @ma_int32()
  external int state;
}

final class ma_atomic_uint32 extends ffi.Struct {
  @ma_uint32()
  external int value;
}

final class ma_atomic_int32 extends ffi.Struct {
  @ma_int32()
  external int value;
}

final class ma_atomic_uint64 extends ffi.Struct {
  @ma_uint64()
  external int value;
}

typedef va_list = ffi.Pointer<ffi.Char>;

final class ma_biquad_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ffi.Double()
  external double b0;

  @ffi.Double()
  external double b1;

  @ffi.Double()
  external double b2;

  @ffi.Double()
  external double a0;

  @ffi.Double()
  external double a1;

  @ffi.Double()
  external double a2;
}

/// Low-Pass Filtering
final class ma_lpf1_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ffi.Double()
  external double q;
}

/// Low-Pass Filtering
typedef ma_lpf2_config = ma_lpf1_config;

final class ma_lpf_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  /// If set to 0, will be treated as a passthrough (no filtering will be applied).
  @ma_uint32()
  external int order;
}

/// High-Pass Filtering
final class ma_hpf1_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ffi.Double()
  external double q;
}

/// High-Pass Filtering
typedef ma_hpf2_config = ma_hpf1_config;

final class ma_hpf1 extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  external ma_biquad_coefficient a;

  external ffi.Pointer<ma_biquad_coefficient> pR1;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

final class ma_hpf2 extends ffi.Struct {
  /// The second order high-pass filter is implemented as a biquad filter.
  external ma_biquad bq;
}

final class ma_hpf_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  /// If set to 0, will be treated as a passthrough (no filtering will be applied).
  @ma_uint32()
  external int order;
}

final class ma_hpf extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int hpf1Count;

  @ma_uint32()
  external int hpf2Count;

  external ffi.Pointer<ma_hpf1> pHPF1;

  external ffi.Pointer<ma_hpf2> pHPF2;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

/// Band-Pass Filtering
final class ma_bpf2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  @ffi.Double()
  external double q;
}

final class ma_bpf2 extends ffi.Struct {
  /// The second order band-pass filter is implemented as a biquad filter.
  external ma_biquad bq;
}

final class ma_bpf_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double cutoffFrequency;

  /// If set to 0, will be treated as a passthrough (no filtering will be applied).
  @ma_uint32()
  external int order;
}

final class ma_bpf extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int bpf2Count;

  external ffi.Pointer<ma_bpf2> pBPF2;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

/// Notching Filter
final class ma_notch2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double q;

  @ffi.Double()
  external double frequency;
}

final class ma_notch2 extends ffi.Struct {
  external ma_biquad bq;
}

/// Peaking EQ Filter
final class ma_peak2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double gainDB;

  @ffi.Double()
  external double q;

  @ffi.Double()
  external double frequency;
}

final class ma_peak2 extends ffi.Struct {
  external ma_biquad bq;
}

/// Low Shelf Filter
final class ma_loshelf2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double gainDB;

  @ffi.Double()
  external double shelfSlope;

  @ffi.Double()
  external double frequency;
}

final class ma_loshelf2 extends ffi.Struct {
  external ma_biquad bq;
}

/// High Shelf Filter
final class ma_hishelf2_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double gainDB;

  @ffi.Double()
  external double shelfSlope;

  @ffi.Double()
  external double frequency;
}

final class ma_hishelf2 extends ffi.Struct {
  external ma_biquad bq;
}

/// Delay
final class ma_delay_config extends ffi.Struct {
  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int delayInFrames;

  /// Set to true to delay the start of the output; false otherwise.
  @ma_bool32()
  external int delayStart;

  /// 0..1. Default = 1.
  @ffi.Float()
  external double wet;

  /// 0..1. Default = 1.
  @ffi.Float()
  external double dry;

  /// 0..1. Default = 0 (no feedback). Feedback decay. Use this for echo.
  @ffi.Float()
  external double decay;
}

final class ma_delay extends ffi.Struct {
  external ma_delay_config config;

  /// Feedback is written to this cursor. Always equal or in front of the read cursor.
  @ma_uint32()
  external int cursor;

  @ma_uint32()
  external int bufferSizeInFrames;

  external ffi.Pointer<ffi.Float> pBuffer;
}

/// Gainer for smooth volume changes.
final class ma_gainer_config extends ffi.Struct {
  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int smoothTimeInFrames;
}

final class ma_gainer extends ffi.Struct {
  external ma_gainer_config config;

  @ma_uint32()
  external int t;

  @ffi.Float()
  external double masterVolume;

  external ffi.Pointer<ffi.Float> pOldGains;

  external ffi.Pointer<ffi.Float> pNewGains;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

/// Stereo panner.
abstract class ma_pan_mode {
  /// Does not blend one side with the other. Technically just a balance. Compatible with other popular audio engines and therefore the default.
  static const int ma_pan_mode_balance = 0;

  /// A true pan. The sound from one side will "move" to the other side and blend with it.
  static const int ma_pan_mode_pan = 1;
}

final class ma_panner_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ffi.Int32()
  external int mode;

  @ffi.Float()
  external double pan;
}

final class ma_panner extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ffi.Int32()
  external int mode;

  /// -1..1 where 0 is no pan, -1 is left side, +1 is right side. Defaults to 0.
  @ffi.Float()
  external double pan;
}

/// Fader.
final class ma_fader_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;
}

final class ma_fader extends ffi.Struct {
  external ma_fader_config config;

  /// If volumeBeg and volumeEnd is equal to 1, no fading happens (ma_fader_process_pcm_frames() will run as a passthrough).
  @ffi.Float()
  external double volumeBeg;

  @ffi.Float()
  external double volumeEnd;

  /// The total length of the fade.
  @ma_uint64()
  external int lengthInFrames;

  /// The current time in frames. Incremented by ma_fader_process_pcm_frames(). Signed because it'll be offset by startOffsetInFrames in set_fade_ex().
  @ma_int64()
  external int cursorInFrames;
}

/// Spatializer.
final class ma_vec3f extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double z;
}

final class ma_atomic_vec3f extends ffi.Struct {
  external ma_vec3f v;

  @ma_spinlock()
  external int lock;
}

/// Spinlocks are 32-bit for compatibility reasons.
typedef ma_spinlock = ma_uint32;

abstract class ma_attenuation_model {
  /// No distance attenuation and no spatialization.
  static const int ma_attenuation_model_none = 0;

  /// Equivalent to OpenAL's AL_INVERSE_DISTANCE_CLAMPED.
  static const int ma_attenuation_model_inverse = 1;

  /// Linear attenuation. Equivalent to OpenAL's AL_LINEAR_DISTANCE_CLAMPED.
  static const int ma_attenuation_model_linear = 2;

  /// Exponential attenuation. Equivalent to OpenAL's AL_EXPONENT_DISTANCE_CLAMPED.
  static const int ma_attenuation_model_exponential = 3;
}

abstract class ma_positioning {
  static const int ma_positioning_absolute = 0;
  static const int ma_positioning_relative = 1;
}

abstract class ma_handedness {
  static const int ma_handedness_right = 0;
  static const int ma_handedness_left = 1;
}

final class ma_spatializer_listener_config extends ffi.Struct {
  @ma_uint32()
  external int channelsOut;

  external ffi.Pointer<ma_channel> pChannelMapOut;

  /// Defaults to right. Forward is -1 on the Z axis. In a left handed system, forward is +1 on the Z axis.
  @ffi.Int32()
  external int handedness;

  @ffi.Float()
  external double coneInnerAngleInRadians;

  @ffi.Float()
  external double coneOuterAngleInRadians;

  @ffi.Float()
  external double coneOuterGain;

  @ffi.Float()
  external double speedOfSound;

  external ma_vec3f worldUp;
}

final class ma_spatializer_listener extends ffi.Struct {
  external ma_spatializer_listener_config config;

  /// The absolute position of the listener.
  external ma_atomic_vec3f position;

  /// The direction the listener is facing. The world up vector is config.worldUp.
  external ma_atomic_vec3f direction;

  external ma_atomic_vec3f velocity;

  @ma_bool32()
  external int isEnabled;

  /// Memory management.
  @ma_bool32()
  external int _ownsHeap;

  external ffi.Pointer<ffi.Void> _pHeap;
}

final class ma_spatializer_config extends ffi.Struct {
  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  external ffi.Pointer<ma_channel> pChannelMapIn;

  @ffi.Int32()
  external int attenuationModel;

  @ffi.Int32()
  external int positioning;

  /// Defaults to right. Forward is -1 on the Z axis. In a left handed system, forward is +1 on the Z axis.
  @ffi.Int32()
  external int handedness;

  @ffi.Float()
  external double minGain;

  @ffi.Float()
  external double maxGain;

  @ffi.Float()
  external double minDistance;

  @ffi.Float()
  external double maxDistance;

  @ffi.Float()
  external double rolloff;

  @ffi.Float()
  external double coneInnerAngleInRadians;

  @ffi.Float()
  external double coneOuterAngleInRadians;

  @ffi.Float()
  external double coneOuterGain;

  /// Set to 0 to disable doppler effect.
  @ffi.Float()
  external double dopplerFactor;

  /// Set to 0 to disable directional attenuation.
  @ffi.Float()
  external double directionalAttenuationFactor;

  /// The minimal scaling factor to apply to channel gains when accounting for the direction of the sound relative to the listener. Must be in the range of 0..1. Smaller values means more aggressive directional panning, larger values means more subtle directional panning.
  @ffi.Float()
  external double minSpatializationChannelGain;

  /// When the gain of a channel changes during spatialization, the transition will be linearly interpolated over this number of frames.
  @ma_uint32()
  external int gainSmoothTimeInFrames;
}

final class ma_spatializer extends ffi.Struct {
  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  external ffi.Pointer<ma_channel> pChannelMapIn;

  @ffi.Int32()
  external int attenuationModel;

  @ffi.Int32()
  external int positioning;

  /// Defaults to right. Forward is -1 on the Z axis. In a left handed system, forward is +1 on the Z axis.
  @ffi.Int32()
  external int handedness;

  @ffi.Float()
  external double minGain;

  @ffi.Float()
  external double maxGain;

  @ffi.Float()
  external double minDistance;

  @ffi.Float()
  external double maxDistance;

  @ffi.Float()
  external double rolloff;

  @ffi.Float()
  external double coneInnerAngleInRadians;

  @ffi.Float()
  external double coneOuterAngleInRadians;

  @ffi.Float()
  external double coneOuterGain;

  /// Set to 0 to disable doppler effect.
  @ffi.Float()
  external double dopplerFactor;

  /// Set to 0 to disable directional attenuation.
  @ffi.Float()
  external double directionalAttenuationFactor;

  /// When the gain of a channel changes during spatialization, the transition will be linearly interpolated over this number of frames.
  @ma_uint32()
  external int gainSmoothTimeInFrames;

  external ma_atomic_vec3f position;

  external ma_atomic_vec3f direction;

  /// For doppler effect.
  external ma_atomic_vec3f velocity;

  /// Will be updated by ma_spatializer_process_pcm_frames() and can be used by higher level functions to apply a pitch shift for doppler effect.
  @ffi.Float()
  external double dopplerPitch;

  @ffi.Float()
  external double minSpatializationChannelGain;

  /// For smooth gain transitions.
  external ma_gainer gainer;

  /// An offset of _pHeap. Used by ma_spatializer_process_pcm_frames() to store new channel gains. The number of elements in this array is equal to config.channelsOut.
  external ffi.Pointer<ffi.Float> pNewChannelGainsOut;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

abstract class ma_mono_expansion_mode {
  /// The default.
  static const int ma_mono_expansion_mode_duplicate = 0;

  /// Average the mono channel across all channels.
  static const int ma_mono_expansion_mode_average = 1;

  /// Duplicate to the left and right channels only and ignore the others.
  static const int ma_mono_expansion_mode_stereo_only = 2;
  static const int ma_mono_expansion_mode_default = 0;
}

final class ma_channel_converter_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  external ffi.Pointer<ma_channel> pChannelMapIn;

  external ffi.Pointer<ma_channel> pChannelMapOut;

  @ffi.Int32()
  external int mixingMode;

  /// When an output LFE channel is present, but no input LFE, set to true to set the output LFE to the average of all spatial channels (LR, FR, etc.). Ignored when an input LFE is present.
  @ma_bool32()
  external int calculateLFEFromSpatialChannels;

  /// [in][out]. Only used when mixingMode is set to ma_channel_mix_mode_custom_weights.
  external ffi.Pointer<ffi.Pointer<ffi.Float>> ppWeights;
}

/// Data Conversion
final class ma_data_converter_config extends ffi.Struct {
  @ffi.Int32()
  external int formatIn;

  @ffi.Int32()
  external int formatOut;

  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  @ma_uint32()
  external int sampleRateIn;

  @ma_uint32()
  external int sampleRateOut;

  external ffi.Pointer<ma_channel> pChannelMapIn;

  external ffi.Pointer<ma_channel> pChannelMapOut;

  @ffi.Int32()
  external int ditherMode;

  @ffi.Int32()
  external int channelMixMode;

  /// When an output LFE channel is present, but no input LFE, set to true to set the output LFE to the average of all spatial channels (LR, FR, etc.). Ignored when an input LFE is present.
  @ma_bool32()
  external int calculateLFEFromSpatialChannels;

  /// [in][out]. Only used when mixingMode is set to ma_channel_mix_mode_custom_weights.
  external ffi.Pointer<ffi.Pointer<ffi.Float>> ppChannelWeights;

  @ma_bool32()
  external int allowDynamicSampleRate;

  external ma_resampler_config resampling;
}

final class ma_data_source_config extends ffi.Struct {
  external ffi.Pointer<ma_data_source_vtable> vtable;
}

final class ma_audio_buffer_ref extends ffi.Struct {
  external ma_data_source_base ds;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ma_uint64()
  external int cursor;

  @ma_uint64()
  external int sizeInFrames;

  external ffi.Pointer<ffi.Void> pData;
}

final class ma_audio_buffer_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ma_uint64()
  external int sizeInFrames;

  /// If set to NULL, will allocate a block of memory for you.
  external ffi.Pointer<ffi.Void> pData;

  external ma_allocation_callbacks allocationCallbacks;
}

final class ma_audio_buffer extends ffi.Struct {
  external ma_audio_buffer_ref ref;

  external ma_allocation_callbacks allocationCallbacks;

  /// Used to control whether or not miniaudio owns the data buffer. If set to true, pData will be freed in ma_audio_buffer_uninit().
  @ma_bool32()
  external int ownsData;

  /// For allocating a buffer with the memory located directly after the other memory of the structure.
  @ffi.Array.multi([1])
  external ffi.Array<ma_uint8> _pExtraData;
}

final class ma_paged_audio_buffer_page extends ffi.Struct {
  external ffi.Pointer<ma_paged_audio_buffer_page> pNext;

  @ma_uint64()
  external int sizeInFrames;

  @ffi.Array.multi([1])
  external ffi.Array<ma_uint8> pAudioData;
}

final class ma_paged_audio_buffer_data extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  /// Dummy head for the lock-free algorithm. Always has a size of 0.
  external ma_paged_audio_buffer_page head;

  /// Never null. Initially set to &head.
  external ffi.Pointer<ma_paged_audio_buffer_page> pTail;
}

final class ma_paged_audio_buffer_config extends ffi.Struct {
  /// Must not be null.
  external ffi.Pointer<ma_paged_audio_buffer_data> pData;
}

final class ma_paged_audio_buffer extends ffi.Struct {
  external ma_data_source_base ds;

  /// Audio data is read from here. Cannot be null.
  external ffi.Pointer<ma_paged_audio_buffer_data> pData;

  external ffi.Pointer<ma_paged_audio_buffer_page> pCurrent;

  /// Relative to the current page.
  @ma_uint64()
  external int relativeCursor;

  @ma_uint64()
  external int absoluteCursor;
}

/// Fence
/// =====
/// This locks while the counter is larger than 0. Counter can be incremented and decremented by any
/// thread, but care needs to be taken when waiting. It is possible for one thread to acquire the
/// fence just as another thread returns from ma_fence_wait().
///
/// The idea behind a fence is to allow you to wait for a group of operations to complete. When an
/// operation starts, the counter is incremented which locks the fence. When the operation completes,
/// the fence will be released which decrements the counter. ma_fence_wait() will block until the
/// counter hits zero.
///
/// If threading is disabled, ma_fence_wait() will spin on the counter.
final class ma_fence extends ffi.Struct {
  external ma_event e;

  @ma_uint32()
  external int counter;
}

final class ma_async_notification_callbacks extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_async_notification> pNotification)>> onSignal;
}

/// Notification callback for asynchronous operations.
typedef ma_async_notification = ffi.Void;

/// Simple polling notification.
///
/// This just sets a variable when the notification has been signalled which is then polled with ma_async_notification_poll_is_signalled()
final class ma_async_notification_poll extends ffi.Struct {
  external ma_async_notification_callbacks cb;

  @ma_bool32()
  external int signalled;
}

/// Event Notification
///
/// This uses an ma_event. If threading is disabled (MA_NO_THREADING), initialization will fail.
final class ma_async_notification_event extends ffi.Struct {
  external ma_async_notification_callbacks cb;

  external ma_event e;
}

/// Slot Allocator
/// --------------
/// The idea of the slot allocator is for it to be used in conjunction with a fixed sized buffer. You use the slot allocator to allocator an index that can be used
/// as the insertion point for an object.
///
/// Slots are reference counted to help mitigate the ABA problem in the lock-free queue we use for tracking jobs.
///
/// The slot index is stored in the low 32 bits. The reference counter is stored in the high 32 bits:
///
/// +-----------------+-----------------+
/// | 32 Bits         | 32 Bits         |
/// +-----------------+-----------------+
/// | Reference Count | Slot Index      |
/// +-----------------+-----------------+
final class ma_slot_allocator_config extends ffi.Struct {
  /// The number of slots to make available.
  @ma_uint32()
  external int capacity;
}

final class ma_slot_allocator_group extends ffi.Struct {
  /// Must be used atomically because the allocation and freeing routines need to make copies of this which must never be optimized away by the compiler.
  @ma_uint32()
  external int bitfield;
}

final class ma_slot_allocator extends ffi.Struct {
  /// Slots are grouped in chunks of 32.
  external ffi.Pointer<ma_slot_allocator_group> pGroups;

  /// 32 bits for reference counting for ABA mitigation.
  external ffi.Pointer<ma_uint32> pSlots;

  /// Allocation count.
  @ma_uint32()
  external int count;

  @ma_uint32()
  external int capacity;

  /// Memory management.
  @ma_bool32()
  external int _ownsHeap;

  external ffi.Pointer<ffi.Void> _pHeap;
}

final class ma_job extends ffi.Struct {
  /// 8 bytes. We encode the job code into the slot allocation data to save space.
  external UnnamedUnion11 toc;

  /// refcount + slot for the next item. Does not include the job code.
  @ma_uint64()
  external int next;

  /// Execution order. Used to create a data dependency and ensure a job is executed in order. Usage is contextual depending on the job type.
  @ma_uint32()
  external int order;

  external UnnamedUnion12 data;
}

final class UnnamedUnion11 extends ffi.Union {
  external UnnamedStruct37 breakup;

  @ma_uint64()
  external int allocation;
}

final class UnnamedStruct37 extends ffi.Struct {
  /// Job type.
  @ma_uint16()
  external int code;

  /// Index into a ma_slot_allocator.
  @ma_uint16()
  external int slot;

  @ma_uint32()
  external int refcount;
}

typedef ma_uint16 = ffi.UnsignedShort;

final class UnnamedUnion12 extends ffi.Union {
  external UnnamedStruct38 custom;

  external UnnamedUnion13 resourceManager;

  external UnnamedUnion14 device;
}

/// Miscellaneous.
final class UnnamedStruct38 extends ffi.Struct {
  external ma_job_proc proc;

  @ma_uintptr()
  external int data0;

  @ma_uintptr()
  external int data1;
}

/// Callback for processing a job. Each job type will have their own processing callback which will be
/// called by ma_job_process().
typedef ma_job_proc = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_job> pJob)>>;
typedef ma_uintptr = ma_uint64;

/// Resource Manager
final class UnnamedUnion13 extends ffi.Union {
  external UnnamedStruct39 loadDataBufferNode;

  external UnnamedStruct40 freeDataBufferNode;

  external UnnamedStruct41 pageDataBufferNode;

  external UnnamedStruct42 loadDataBuffer;

  external UnnamedStruct43 freeDataBuffer;

  external UnnamedStruct44 loadDataStream;

  external UnnamedStruct45 freeDataStream;

  external UnnamedStruct46 pageDataStream;

  external UnnamedStruct47 seekDataStream;
}

final class UnnamedStruct39 extends ffi.Struct {
  /// ma_resource_manager
  external ffi.Pointer<ffi.Void> pResourceManager;

  /// ma_resource_manager_data_buffer_node
  external ffi.Pointer<ffi.Void> pDataBufferNode;

  external ffi.Pointer<ffi.Char> pFilePath;

  external ffi.Pointer<ffi.WChar> pFilePathW;

  /// Resource manager data source flags that were used when initializing the data buffer.
  @ma_uint32()
  external int flags;

  /// Signalled when the data buffer has been initialized and the format/channels/rate can be retrieved.
  external ffi.Pointer<ma_async_notification> pInitNotification;

  /// Signalled when the data buffer has been fully decoded. Will be passed through to MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_BUFFER_NODE when decoding.
  external ffi.Pointer<ma_async_notification> pDoneNotification;

  /// Released when initialization of the decoder is complete.
  external ffi.Pointer<ma_fence> pInitFence;

  /// Released if initialization of the decoder fails. Passed through to PAGE_DATA_BUFFER_NODE untouched if init is successful.
  external ffi.Pointer<ma_fence> pDoneFence;
}

final class UnnamedStruct40 extends ffi.Struct {
  /// ma_resource_manager
  external ffi.Pointer<ffi.Void> pResourceManager;

  /// ma_resource_manager_data_buffer_node
  external ffi.Pointer<ffi.Void> pDataBufferNode;

  external ffi.Pointer<ma_async_notification> pDoneNotification;

  external ffi.Pointer<ma_fence> pDoneFence;
}

final class UnnamedStruct41 extends ffi.Struct {
  /// ma_resource_manager
  external ffi.Pointer<ffi.Void> pResourceManager;

  /// ma_resource_manager_data_buffer_node
  external ffi.Pointer<ffi.Void> pDataBufferNode;

  /// ma_decoder
  external ffi.Pointer<ffi.Void> pDecoder;

  /// Signalled when the data buffer has been fully decoded.
  external ffi.Pointer<ma_async_notification> pDoneNotification;

  /// Passed through from LOAD_DATA_BUFFER_NODE and released when the data buffer completes decoding or an error occurs.
  external ffi.Pointer<ma_fence> pDoneFence;
}

final class UnnamedStruct42 extends ffi.Struct {
  /// ma_resource_manager_data_buffer
  external ffi.Pointer<ffi.Void> pDataBuffer;

  /// Signalled when the data buffer has been initialized and the format/channels/rate can be retrieved.
  external ffi.Pointer<ma_async_notification> pInitNotification;

  /// Signalled when the data buffer has been fully decoded.
  external ffi.Pointer<ma_async_notification> pDoneNotification;

  /// Released when the data buffer has been initialized and the format/channels/rate can be retrieved.
  external ffi.Pointer<ma_fence> pInitFence;

  /// Released when the data buffer has been fully decoded.
  external ffi.Pointer<ma_fence> pDoneFence;

  @ma_uint64()
  external int rangeBegInPCMFrames;

  @ma_uint64()
  external int rangeEndInPCMFrames;

  @ma_uint64()
  external int loopPointBegInPCMFrames;

  @ma_uint64()
  external int loopPointEndInPCMFrames;

  @ma_uint32()
  external int isLooping;
}

final class UnnamedStruct43 extends ffi.Struct {
  /// ma_resource_manager_data_buffer
  external ffi.Pointer<ffi.Void> pDataBuffer;

  external ffi.Pointer<ma_async_notification> pDoneNotification;

  external ffi.Pointer<ma_fence> pDoneFence;
}

final class UnnamedStruct44 extends ffi.Struct {
  /// ma_resource_manager_data_stream
  external ffi.Pointer<ffi.Void> pDataStream;

  /// Allocated when the job is posted, freed by the job thread after loading.
  external ffi.Pointer<ffi.Char> pFilePath;

  /// ^ As above ^. Only used if pFilePath is NULL.
  external ffi.Pointer<ffi.WChar> pFilePathW;

  @ma_uint64()
  external int initialSeekPoint;

  /// Signalled after the first two pages have been decoded and frames can be read from the stream.
  external ffi.Pointer<ma_async_notification> pInitNotification;

  external ffi.Pointer<ma_fence> pInitFence;
}

final class UnnamedStruct45 extends ffi.Struct {
  /// ma_resource_manager_data_stream
  external ffi.Pointer<ffi.Void> pDataStream;

  external ffi.Pointer<ma_async_notification> pDoneNotification;

  external ffi.Pointer<ma_fence> pDoneFence;
}

final class UnnamedStruct46 extends ffi.Struct {
  /// ma_resource_manager_data_stream
  external ffi.Pointer<ffi.Void> pDataStream;

  /// The index of the page to decode into.
  @ma_uint32()
  external int pageIndex;
}

final class UnnamedStruct47 extends ffi.Struct {
  /// ma_resource_manager_data_stream
  external ffi.Pointer<ffi.Void> pDataStream;

  @ma_uint64()
  external int frameIndex;
}

/// Device.
final class UnnamedUnion14 extends ffi.Union {
  external UnnamedUnion15 aaudio;
}

final class UnnamedUnion15 extends ffi.Union {
  external UnnamedStruct48 reroute;
}

final class UnnamedStruct48 extends ffi.Struct {
  /// ma_device
  external ffi.Pointer<ffi.Void> pDevice;

  /// ma_device_type
  @ma_uint32()
  external int deviceType;
}

/// When a job type is added here an callback needs to be added go "g_jobVTable" in the implementation section.
abstract class ma_job_type {
  /// Miscellaneous.
  static const int MA_JOB_TYPE_QUIT = 0;
  static const int MA_JOB_TYPE_CUSTOM = 1;

  /// Resource Manager.
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER_NODE = 2;
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER_NODE = 3;
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_BUFFER_NODE = 4;
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_BUFFER = 5;
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_BUFFER = 6;
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_STREAM = 7;
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_STREAM = 8;
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_STREAM = 9;
  static const int MA_JOB_TYPE_RESOURCE_MANAGER_SEEK_DATA_STREAM = 10;

  /// Device.
  static const int MA_JOB_TYPE_DEVICE_AAUDIO_REROUTE = 11;

  /// Count. Must always be last.
  static const int MA_JOB_TYPE_COUNT = 12;
}

/// When set, ma_job_queue_next() will not wait and no semaphore will be signaled in
/// ma_job_queue_post(). ma_job_queue_next() will return MA_NO_DATA_AVAILABLE if nothing is available.
///
/// This flag should always be used for platforms that do not support multithreading.
abstract class ma_job_queue_flags {
  static const int MA_JOB_QUEUE_FLAG_NON_BLOCKING = 1;
}

final class ma_job_queue_config extends ffi.Struct {
  @ma_uint32()
  external int flags;

  /// The maximum number of jobs that can fit in the queue at a time.
  @ma_uint32()
  external int capacity;
}

final class ma_job_queue extends ffi.Struct {
  /// Flags passed in at initialization time.
  @ma_uint32()
  external int flags;

  /// The maximum number of jobs that can fit in the queue at a time. Set by the config.
  @ma_uint32()
  external int capacity;

  /// The first item in the list. Required for removing from the top of the list.
  @ma_uint64()
  external int head;

  /// The last item in the list. Required for appending to the end of the list.
  @ma_uint64()
  external int tail;

  /// Only used when MA_JOB_QUEUE_FLAG_NON_BLOCKING is unset.
  external ma_semaphore sem;

  external ma_slot_allocator allocator;

  external ffi.Pointer<ma_job> pJobs;

  @ma_spinlock()
  external int lock;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

/// Device job thread. This is used by backends that require asynchronous processing of certain
/// operations. It is not used by all backends.
///
/// The device job thread is made up of a thread and a job queue. You can post a job to the thread with
/// ma_device_job_thread_post(). The thread will do the processing of the job.
final class ma_device_job_thread_config extends ffi.Struct {
  /// Set this to true if you want to process jobs yourself.
  @ma_bool32()
  external int noThread;

  @ma_uint32()
  external int jobQueueCapacity;

  @ma_uint32()
  external int jobQueueFlags;
}

final class ma_device_job_thread extends ffi.Struct {
  external ma_thread thread;

  external ma_job_queue jobQueue;

  @ma_bool32()
  external int _hasThread;
}

/// iOS/tvOS/watchOS session category options
abstract class ma_ios_session_category_option {
  /// AVAudioSessionCategoryOptionMixWithOthers
  static const int ma_ios_session_category_option_mix_with_others = 1;

  /// AVAudioSessionCategoryOptionDuckOthers
  static const int ma_ios_session_category_option_duck_others = 2;

  /// AVAudioSessionCategoryOptionAllowBluetooth
  static const int ma_ios_session_category_option_allow_bluetooth = 4;

  /// AVAudioSessionCategoryOptionDefaultToSpeaker
  static const int ma_ios_session_category_option_default_to_speaker = 8;

  /// AVAudioSessionCategoryOptionInterruptSpokenAudioAndMixWithOthers
  static const int
      ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others =
      17;

  /// AVAudioSessionCategoryOptionAllowBluetoothA2DP
  static const int ma_ios_session_category_option_allow_bluetooth_a2dp = 32;

  /// AVAudioSessionCategoryOptionAllowAirPlay
  static const int ma_ios_session_category_option_allow_air_play = 64;
}

abstract class ma_open_mode_flags {
  static const int MA_OPEN_MODE_READ = 1;
  static const int MA_OPEN_MODE_WRITE = 2;
}

abstract class ma_seek_origin {
  static const int ma_seek_origin_start = 0;
  static const int ma_seek_origin_current = 1;

  /// Not used by decoders.
  static const int ma_seek_origin_end = 2;
}

final class ma_file_info extends ffi.Struct {
  @ma_uint64()
  external int sizeInBytes;
}

final class ma_vfs_callbacks extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs> pVFS,
              ffi.Pointer<ffi.Char> pFilePath,
              ma_uint32 openMode,
              ffi.Pointer<ma_vfs_file> pFile)>> onOpen;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs> pVFS,
              ffi.Pointer<ffi.WChar> pFilePath,
              ma_uint32 openMode,
              ffi.Pointer<ma_vfs_file> pFile)>> onOpenW;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ma_vfs> pVFS, ma_vfs_file file)>>
      onClose;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs> pVFS,
              ma_vfs_file file,
              ffi.Pointer<ffi.Void> pDst,
              ffi.Size sizeInBytes,
              ffi.Pointer<ffi.Size> pBytesRead)>> onRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ma_vfs> pVFS,
              ma_vfs_file file,
              ffi.Pointer<ffi.Void> pSrc,
              ffi.Size sizeInBytes,
              ffi.Pointer<ffi.Size> pBytesWritten)>> onWrite;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs> pVFS, ma_vfs_file file,
              ma_int64 offset, ffi.Int32 origin)>> onSeek;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs> pVFS, ma_vfs_file file,
              ffi.Pointer<ma_int64> pCursor)>> onTell;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ma_vfs> pVFS, ma_vfs_file file,
              ffi.Pointer<ma_file_info> pInfo)>> onInfo;
}

/// VFS
/// ===
///
/// The VFS object (virtual file system) is what's used to customize file access. This is useful in cases where stdio FILE* based APIs may not be entirely
/// appropriate for a given situation.
typedef ma_vfs = ffi.Void;
typedef ma_vfs_file = ma_handle;

final class ma_default_vfs extends ffi.Struct {
  external ma_vfs_callbacks cb;

  /// Only used for the wchar_t version of open() on non-Windows platforms.
  external ma_allocation_callbacks allocationCallbacks;
}

abstract class ma_encoding_format {
  static const int ma_encoding_format_unknown = 0;
  static const int ma_encoding_format_wav = 1;
  static const int ma_encoding_format_flac = 2;
  static const int ma_encoding_format_mp3 = 3;
  static const int ma_encoding_format_vorbis = 4;
}

final class ma_decoder extends ffi.Struct {
  external ma_data_source_base ds;

  /// The decoding backend we'll be pulling data from.
  external ffi.Pointer<ma_data_source> pBackend;

  /// The vtable for the decoding backend. This needs to be stored so we can access the onUninit() callback.
  external ffi.Pointer<ma_decoding_backend_vtable> pBackendVTable;

  external ffi.Pointer<ffi.Void> pBackendUserData;

  external ma_decoder_read_proc onRead;

  external ma_decoder_seek_proc onSeek;

  external ma_decoder_tell_proc onTell;

  external ffi.Pointer<ffi.Void> pUserData;

  /// In output sample rate. Used for keeping track of how many frames are available for decoding.
  @ma_uint64()
  external int readPointerInPCMFrames;

  @ffi.Int32()
  external int outputFormat;

  @ma_uint32()
  external int outputChannels;

  @ma_uint32()
  external int outputSampleRate;

  /// Data conversion is achieved by running frames through this.
  external ma_data_converter converter;

  /// In input format. Can be null if it's not needed.
  external ffi.Pointer<ffi.Void> pInputCache;

  /// The capacity of the input cache.
  @ma_uint64()
  external int inputCacheCap;

  /// The number of frames that have been consumed in the cache. Used for determining the next valid frame.
  @ma_uint64()
  external int inputCacheConsumed;

  /// The number of valid frames remaining in the cahce.
  @ma_uint64()
  external int inputCacheRemaining;

  external ma_allocation_callbacks allocationCallbacks;

  external UnnamedUnion16 data;
}

final class ma_decoding_backend_vtable extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> pUserData,
              ma_read_proc onRead,
              ma_seek_proc onSeek,
              ma_tell_proc onTell,
              ffi.Pointer<ffi.Void> pReadSeekTellUserData,
              ffi.Pointer<ma_decoding_backend_config> pConfig,
              ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
              ffi.Pointer<ffi.Pointer<ma_data_source>> ppBackend)>> onInit;

  /// Optional.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ffi.Char> pFilePath,
              ffi.Pointer<ma_decoding_backend_config> pConfig,
              ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
              ffi.Pointer<ffi.Pointer<ma_data_source>> ppBackend)>> onInitFile;

  /// Optional.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> pUserData,
              ffi.Pointer<ffi.WChar> pFilePath,
              ffi.Pointer<ma_decoding_backend_config> pConfig,
              ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
              ffi.Pointer<ffi.Pointer<ma_data_source>> ppBackend)>> onInitFileW;

  /// Optional.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ffi.Void> pData,
                  ffi.Size dataSize,
                  ffi.Pointer<ma_decoding_backend_config> pConfig,
                  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks,
                  ffi.Pointer<ffi.Pointer<ma_data_source>> ppBackend)>>
      onInitMemory;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> pUserData,
                  ffi.Pointer<ma_data_source> pBackend,
                  ffi.Pointer<ma_allocation_callbacks> pAllocationCallbacks)>>
      onUninit;
}

typedef ma_read_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ffi.Void> pUserData,
            ffi.Pointer<ffi.Void> pBufferOut,
            ffi.Size bytesToRead,
            ffi.Pointer<ffi.Size> pBytesRead)>>;
typedef ma_seek_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Void> pUserData, ma_int64 offset,
            ffi.Int32 origin)>>;
typedef ma_tell_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ffi.Void> pUserData, ffi.Pointer<ma_int64> pCursor)>>;

final class ma_decoding_backend_config extends ffi.Struct {
  @ffi.Int32()
  external int preferredFormat;

  /// Set to > 0 to generate a seektable if the decoding backend supports it.
  @ma_uint32()
  external int seekPointCount;
}

typedef ma_decoder_read_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ma_decoder> pDecoder,
            ffi.Pointer<ffi.Void> pBufferOut,
            ffi.Size bytesToRead,
            ffi.Pointer<ffi.Size> pBytesRead)>>;
typedef ma_decoder_seek_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ma_decoder> pDecoder,
            ma_int64 byteOffset, ffi.Int32 origin)>>;
typedef ma_decoder_tell_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ma_decoder> pDecoder, ffi.Pointer<ma_int64> pCursor)>>;

final class UnnamedUnion16 extends ffi.Union {
  external UnnamedStruct49 vfs;

  /// Only used for decoders that were opened against a block of memory.
  external UnnamedStruct50 memory;
}

final class UnnamedStruct49 extends ffi.Struct {
  external ffi.Pointer<ma_vfs> pVFS;

  external ma_vfs_file file;
}

final class UnnamedStruct50 extends ffi.Struct {
  external ffi.Pointer<ma_uint8> pData;

  @ffi.Size()
  external int dataSize;

  @ffi.Size()
  external int currentReadPos;
}

final class ma_decoder_config extends ffi.Struct {
  /// Set to 0 or ma_format_unknown to use the stream's internal format.
  @ffi.Int32()
  external int format;

  /// Set to 0 to use the stream's internal channels.
  @ma_uint32()
  external int channels;

  /// Set to 0 to use the stream's internal sample rate.
  @ma_uint32()
  external int sampleRate;

  external ffi.Pointer<ma_channel> pChannelMap;

  @ffi.Int32()
  external int channelMixMode;

  @ffi.Int32()
  external int ditherMode;

  external ma_resampler_config resampling;

  external ma_allocation_callbacks allocationCallbacks;

  @ffi.Int32()
  external int encodingFormat;

  /// When set to > 0, specifies the number of seek points to use for the generation of a seek table. Not all decoding backends support this.
  @ma_uint32()
  external int seekPointCount;

  external ffi.Pointer<ffi.Pointer<ma_decoding_backend_vtable>>
      ppCustomBackendVTables;

  @ma_uint32()
  external int customBackendCount;

  external ffi.Pointer<ffi.Void> pCustomBackendUserData;
}

final class ma_encoder extends ffi.Struct {
  external ma_encoder_config config;

  external ma_encoder_write_proc onWrite;

  external ma_encoder_seek_proc onSeek;

  external ma_encoder_init_proc onInit;

  external ma_encoder_uninit_proc onUninit;

  external ma_encoder_write_pcm_frames_proc onWritePCMFrames;

  external ffi.Pointer<ffi.Void> pUserData;

  external ffi.Pointer<ffi.Void> pInternalEncoder;

  external UnnamedUnion17 data;
}

final class ma_encoder_config extends ffi.Struct {
  @ffi.Int32()
  external int encodingFormat;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  external ma_allocation_callbacks allocationCallbacks;
}

typedef ma_encoder_write_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ma_encoder> pEncoder,
            ffi.Pointer<ffi.Void> pBufferIn,
            ffi.Size bytesToWrite,
            ffi.Pointer<ffi.Size> pBytesWritten)>>;
typedef ma_encoder_seek_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ma_encoder> pEncoder, ma_int64 offset,
            ffi.Int32 origin)>>;
typedef ma_encoder_init_proc = ffi.Pointer<
    ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ma_encoder> pEncoder)>>;
typedef ma_encoder_uninit_proc = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ma_encoder> pEncoder)>>;
typedef ma_encoder_write_pcm_frames_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ma_encoder> pEncoder,
            ffi.Pointer<ffi.Void> pFramesIn,
            ma_uint64 frameCount,
            ffi.Pointer<ma_uint64> pFramesWritten)>>;

final class UnnamedUnion17 extends ffi.Union {
  external UnnamedStruct51 vfs;
}

final class UnnamedStruct51 extends ffi.Struct {
  external ffi.Pointer<ma_vfs> pVFS;

  external ma_vfs_file file;
}

abstract class ma_waveform_type {
  static const int ma_waveform_type_sine = 0;
  static const int ma_waveform_type_square = 1;
  static const int ma_waveform_type_triangle = 2;
  static const int ma_waveform_type_sawtooth = 3;
}

final class ma_waveform_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Int32()
  external int type;

  @ffi.Double()
  external double amplitude;

  @ffi.Double()
  external double frequency;
}

final class ma_waveform extends ffi.Struct {
  external ma_data_source_base ds;

  external ma_waveform_config config;

  @ffi.Double()
  external double advance;

  @ffi.Double()
  external double time;
}

final class ma_pulsewave_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;

  @ffi.Double()
  external double dutyCycle;

  @ffi.Double()
  external double amplitude;

  @ffi.Double()
  external double frequency;
}

final class ma_pulsewave extends ffi.Struct {
  external ma_waveform waveform;

  external ma_pulsewave_config config;
}

abstract class ma_noise_type {
  static const int ma_noise_type_white = 0;
  static const int ma_noise_type_pink = 1;
  static const int ma_noise_type_brownian = 2;
}

final class ma_noise_config extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ffi.Int32()
  external int type;

  @ma_int32()
  external int seed;

  @ffi.Double()
  external double amplitude;

  @ma_bool32()
  external int duplicateChannels;
}

final class ma_noise extends ffi.Struct {
  external ma_data_source_vtable ds;

  external ma_noise_config config;

  external ma_lcg lcg;

  external UnnamedUnion18 state;

  /// Memory management.
  external ffi.Pointer<ffi.Void> _pHeap;

  @ma_bool32()
  external int _ownsHeap;
}

final class UnnamedUnion18 extends ffi.Union {
  external UnnamedStruct52 pink;

  external UnnamedStruct53 brownian;
}

final class UnnamedStruct52 extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Double>> bin;

  external ffi.Pointer<ffi.Double> accumulation;

  external ffi.Pointer<ma_uint32> counter;
}

final class UnnamedStruct53 extends ffi.Struct {
  external ffi.Pointer<ffi.Double> accumulation;
}

final class ma_resource_manager extends ffi.Struct {
  external ma_resource_manager_config config;

  /// The root buffer in the binary tree.
  external ffi.Pointer<ma_resource_manager_data_buffer_node>
      pRootDataBufferNode;

  /// For synchronizing access to the data buffer binary tree.
  external ma_mutex dataBufferBSTLock;

  /// The threads for executing jobs.
  @ffi.Array.multi([64])
  external ffi.Array<ma_thread> jobThreads;

  /// Multi-consumer, multi-producer job queue for managing jobs for asynchronous decoding and streaming.
  external ma_job_queue jobQueue;

  /// Only used if a custom VFS is not specified.
  external ma_default_vfs defaultVFS;

  /// Only used if no log was specified in the config.
  external ma_log log;
}

final class ma_resource_manager_config extends ffi.Struct {
  external ma_allocation_callbacks allocationCallbacks;

  external ffi.Pointer<ma_log> pLog;

  /// The decoded format to use. Set to ma_format_unknown (default) to use the file's native format.
  @ffi.Int32()
  external int decodedFormat;

  /// The decoded channel count to use. Set to 0 (default) to use the file's native channel count.
  @ma_uint32()
  external int decodedChannels;

  /// the decoded sample rate to use. Set to 0 (default) to use the file's native sample rate.
  @ma_uint32()
  external int decodedSampleRate;

  /// Set to 0 if you want to self-manage your job threads. Defaults to 1.
  @ma_uint32()
  external int jobThreadCount;

  @ffi.Size()
  external int jobThreadStackSize;

  /// The maximum number of jobs that can fit in the queue at a time. Defaults to MA_JOB_TYPE_RESOURCE_MANAGER_QUEUE_CAPACITY. Cannot be zero.
  @ma_uint32()
  external int jobQueueCapacity;

  @ma_uint32()
  external int flags;

  /// Can be NULL in which case defaults will be used.
  external ffi.Pointer<ma_vfs> pVFS;

  external ffi.Pointer<ffi.Pointer<ma_decoding_backend_vtable>>
      ppCustomDecodingBackendVTables;

  @ma_uint32()
  external int customDecodingBackendCount;

  external ffi.Pointer<ffi.Void> pCustomDecodingBackendUserData;
}

final class ma_resource_manager_data_buffer_node extends ffi.Struct {
  /// The hashed name. This is the key.
  @ma_uint32()
  external int hashedName32;

  @ma_uint32()
  external int refCount;

  /// Result from asynchronous loading. When loading set to MA_BUSY. When fully loaded set to MA_SUCCESS. When deleting set to MA_UNAVAILABLE.
  @ffi.Int32()
  external int result;

  /// For allocating execution orders for jobs.
  @ma_uint32()
  external int executionCounter;

  /// For managing the order of execution for asynchronous jobs relating to this object. Incremented as jobs complete processing.
  @ma_uint32()
  external int executionPointer;

  /// Set to true when the underlying data buffer was allocated the resource manager. Set to false if it is owned by the application (via ma_resource_manager_register_*()).
  @ma_bool32()
  external int isDataOwnedByResourceManager;

  external ma_resource_manager_data_supply data;

  external ffi.Pointer<ma_resource_manager_data_buffer_node> pParent;

  external ffi.Pointer<ma_resource_manager_data_buffer_node> pChildLo;

  external ffi.Pointer<ma_resource_manager_data_buffer_node> pChildHi;
}

final class ma_resource_manager_data_supply extends ffi.Struct {
  /// Read and written from different threads so needs to be accessed atomically.
  @ffi.Int32()
  external int type;

  external UnnamedUnion19 backend;
}

abstract class ma_resource_manager_data_supply_type {
  /// Used for determining whether or the data supply has been initialized.
  static const int ma_resource_manager_data_supply_type_unknown = 0;

  /// Data supply is an encoded buffer. Connector is ma_decoder.
  static const int ma_resource_manager_data_supply_type_encoded = 1;

  /// Data supply is a decoded buffer. Connector is ma_audio_buffer.
  static const int ma_resource_manager_data_supply_type_decoded = 2;

  /// Data supply is a linked list of decoded buffers. Connector is ma_paged_audio_buffer.
  static const int ma_resource_manager_data_supply_type_decoded_paged = 3;
}

final class UnnamedUnion19 extends ffi.Union {
  external UnnamedStruct54 encoded;

  external UnnamedStruct55 decoded;

  external UnnamedStruct56 decodedPaged;
}

final class UnnamedStruct54 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;

  @ffi.Size()
  external int sizeInBytes;
}

final class UnnamedStruct55 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> pData;

  @ma_uint64()
  external int totalFrameCount;

  @ma_uint64()
  external int decodedFrameCount;

  @ffi.Int32()
  external int format;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int sampleRate;
}

final class UnnamedStruct56 extends ffi.Struct {
  external ma_paged_audio_buffer_data data;

  @ma_uint64()
  external int decodedFrameCount;

  @ma_uint32()
  external int sampleRate;
}

final class ma_resource_manager_data_buffer extends ffi.Struct {
  /// Base data source. A data buffer is a data source.
  external ma_data_source_base ds;

  /// A pointer to the resource manager that owns this buffer.
  external ffi.Pointer<ma_resource_manager> pResourceManager;

  /// The data node. This is reference counted and is what supplies the data.
  external ffi.Pointer<ma_resource_manager_data_buffer_node> pNode;

  /// The flags that were passed used to initialize the buffer.
  @ma_uint32()
  external int flags;

  /// For allocating execution orders for jobs.
  @ma_uint32()
  external int executionCounter;

  /// For managing the order of execution for asynchronous jobs relating to this object. Incremented as jobs complete processing.
  @ma_uint32()
  external int executionPointer;

  /// Only updated by the public API. Never written nor read from the job thread.
  @ma_uint64()
  external int seekTargetInPCMFrames;

  /// On the next read we need to seek to the frame cursor.
  @ma_bool32()
  external int seekToCursorOnNextRead;

  /// Keeps track of a result of decoding. Set to MA_BUSY while the buffer is still loading. Set to MA_SUCCESS when loading is finished successfully. Otherwise set to some other code.
  @ffi.Int32()
  external int result;

  /// Can be read and written by different threads at the same time. Must be used atomically.
  @ma_bool32()
  external int isLooping;

  /// Used for asynchronous loading to ensure we don't try to initialize the connector multiple times while waiting for the node to fully load.
  external ma_atomic_bool32 isConnectorInitialized;

  /// Connects this object to the node's data supply.
  external UnnamedUnion20 connector;
}

final class UnnamedUnion20 extends ffi.Union {
  /// Supply type is ma_resource_manager_data_supply_type_encoded
  external ma_decoder decoder;

  /// Supply type is ma_resource_manager_data_supply_type_decoded
  external ma_audio_buffer buffer;

  /// Supply type is ma_resource_manager_data_supply_type_decoded_paged
  external ma_paged_audio_buffer pagedBuffer;
}

final class ma_resource_manager_data_stream extends ffi.Struct {
  /// Base data source. A data stream is a data source.
  external ma_data_source_base ds;

  /// A pointer to the resource manager that owns this data stream.
  external ffi.Pointer<ma_resource_manager> pResourceManager;

  /// The flags that were passed used to initialize the stream.
  @ma_uint32()
  external int flags;

  /// Used for filling pages with data. This is only ever accessed by the job thread. The public API should never touch this.
  external ma_decoder decoder;

  /// Required for determining whether or not the decoder should be uninitialized in MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_STREAM.
  @ma_bool32()
  external int isDecoderInitialized;

  /// This is calculated when first loaded by the MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_STREAM.
  @ma_uint64()
  external int totalLengthInPCMFrames;

  /// The playback cursor, relative to the current page. Only ever accessed by the public API. Never accessed by the job thread.
  @ma_uint32()
  external int relativeCursor;

  /// The playback cursor, in absolute position starting from the start of the file.
  @ma_uint64()
  external int absoluteCursor;

  /// Toggles between 0 and 1. Index 0 is the first half of pPageData. Index 1 is the second half. Only ever accessed by the public API. Never accessed by the job thread.
  @ma_uint32()
  external int currentPageIndex;

  /// For allocating execution orders for jobs.
  @ma_uint32()
  external int executionCounter;

  /// For managing the order of execution for asynchronous jobs relating to this object. Incremented as jobs complete processing.
  @ma_uint32()
  external int executionPointer;

  /// Whether or not the stream is looping. It's important to set the looping flag at the data stream level for smooth loop transitions.
  @ma_bool32()
  external int isLooping;

  /// Buffer containing the decoded data of each page. Allocated once at initialization time.
  external ffi.Pointer<ffi.Void> pPageData;

  /// The number of valid PCM frames in each page. Used to determine the last valid frame.
  @ffi.Array.multi([2])
  external ffi.Array<ma_uint32> pageFrameCount;

  /// Result from asynchronous loading. When loading set to MA_BUSY. When initialized set to MA_SUCCESS. When deleting set to MA_UNAVAILABLE. If an error occurs when loading, set to an error code.
  @ffi.Int32()
  external int result;

  /// Whether or not the decoder has reached the end.
  @ma_bool32()
  external int isDecoderAtEnd;

  /// Booleans to indicate whether or not a page is valid. Set to false by the public API, set to true by the job thread. Set to false as the pages are consumed, true when they are filled.
  @ffi.Array.multi([2])
  external ffi.Array<ma_bool32> isPageValid;

  /// When 0, no seeking is being performed. When > 0, a seek is being performed and reading should be delayed with MA_BUSY.
  @ma_bool32()
  external int seekCounter;
}

final class ma_resource_manager_data_source extends ffi.Struct {
  /// Must be the first item because we need the first item to be the data source callbacks for the buffer or stream.
  external UnnamedUnion21 backend;

  /// The flags that were passed in to ma_resource_manager_data_source_init().
  @ma_uint32()
  external int flags;

  /// For allocating execution orders for jobs.
  @ma_uint32()
  external int executionCounter;

  /// For managing the order of execution for asynchronous jobs relating to this object. Incremented as jobs complete processing.
  @ma_uint32()
  external int executionPointer;
}

final class UnnamedUnion21 extends ffi.Union {
  external ma_resource_manager_data_buffer buffer;

  external ma_resource_manager_data_stream stream;
}

abstract class ma_resource_manager_data_source_flags {
  /// When set, does not load the entire data source in memory. Disk I/O will happen on job threads.
  static const int MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM = 1;

  /// Decode data before storing in memory. When set, decoding is done at the resource manager level rather than the mixing thread. Results in faster mixing, but higher memory usage.
  static const int MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE = 2;

  /// When set, the resource manager will load the data source asynchronously.
  static const int MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC = 4;

  /// When set, waits for initialization of the underlying data source before returning from ma_resource_manager_data_source_init().
  static const int MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_WAIT_INIT = 8;

  /// Gives the resource manager a hint that the length of the data source is unknown and calling `ma_data_source_get_length_in_pcm_frames()` should be avoided.
  static const int MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_UNKNOWN_LENGTH = 16;
}

/// Pipeline notifications used by the resource manager. Made up of both an async notification and a fence, both of which are optional.
final class ma_resource_manager_pipeline_stage_notification extends ffi.Struct {
  external ffi.Pointer<ma_async_notification> pNotification;

  external ffi.Pointer<ma_fence> pFence;
}

final class ma_resource_manager_pipeline_notifications extends ffi.Struct {
  /// Initialization of the decoder.
  external ma_resource_manager_pipeline_stage_notification init;

  /// Decoding fully completed.
  external ma_resource_manager_pipeline_stage_notification done;
}

abstract class ma_resource_manager_flags {
  /// Indicates ma_resource_manager_next_job() should not block. Only valid when the job thread count is 0.
  static const int MA_RESOURCE_MANAGER_FLAG_NON_BLOCKING = 1;

  /// Disables any kind of multithreading. Implicitly enables MA_RESOURCE_MANAGER_FLAG_NON_BLOCKING.
  static const int MA_RESOURCE_MANAGER_FLAG_NO_THREADING = 2;
}

final class ma_resource_manager_data_source_config extends ffi.Struct {
  external ffi.Pointer<ffi.Char> pFilePath;

  external ffi.Pointer<ffi.WChar> pFilePathW;

  external ffi.Pointer<ma_resource_manager_pipeline_notifications>
      pNotifications;

  @ma_uint64()
  external int initialSeekPointInPCMFrames;

  @ma_uint64()
  external int rangeBegInPCMFrames;

  @ma_uint64()
  external int rangeEndInPCMFrames;

  @ma_uint64()
  external int loopPointBegInPCMFrames;

  @ma_uint64()
  external int loopPointEndInPCMFrames;

  @ma_bool32()
  external int isLooping;

  @ma_uint32()
  external int flags;
}

final class ma_node_graph extends ffi.Struct {
  /// The node graph itself is a node so it can be connected as an input to different node graph. This has zero inputs and calls ma_node_graph_read_pcm_frames() to generate it's output.
  external ma_node_base base;

  /// Special node that all nodes eventually connect to. Data is read from this node in ma_node_graph_read_pcm_frames().
  external ma_node_base endpoint;

  @ma_uint16()
  external int nodeCacheCapInFrames;

  /// Read and written by multiple threads.
  @ma_bool32()
  external int isReading;
}

final class ma_node_base extends ffi.Struct {
  /// The graph this node belongs to.
  external ffi.Pointer<ma_node_graph> pNodeGraph;

  external ffi.Pointer<ma_node_vtable> vtable;

  /// Allocated on the heap. Fixed size. Needs to be stored on the heap because reading from output buses is done in separate function calls.
  external ffi.Pointer<ffi.Float> pCachedData;

  /// The capacity of the input data cache in frames, per bus.
  @ma_uint16()
  external int cachedDataCapInFramesPerBus;

  /// These variables are read and written only from the audio thread.
  @ma_uint16()
  external int cachedFrameCountOut;

  @ma_uint16()
  external int cachedFrameCountIn;

  @ma_uint16()
  external int consumedFrameCountIn;

  /// When set to stopped, nothing will be read, regardless of the times in stateTimes.
  @ffi.Int32()
  external int state;

  /// Indexed by ma_node_state. Specifies the time based on the global clock that a node should be considered to be in the relevant state.
  @ffi.Array.multi([2])
  external ffi.Array<ma_uint64> stateTimes;

  /// The node's local clock. This is just a running sum of the number of output frames that have been processed. Can be modified by any thread with `ma_node_set_time()`.
  @ma_uint64()
  external int localTime;

  @ma_uint32()
  external int inputBusCount;

  @ma_uint32()
  external int outputBusCount;

  external ffi.Pointer<ma_node_input_bus> pInputBuses;

  external ffi.Pointer<ma_node_output_bus> pOutputBuses;

  /// Memory management.
  @ffi.Array.multi([2])
  external ffi.Array<ma_node_input_bus> _inputBuses;

  @ffi.Array.multi([2])
  external ffi.Array<ma_node_output_bus> _outputBuses;

  /// A heap allocation for internal use only. pInputBuses and/or pOutputBuses will point to this if the bus count exceeds MA_MAX_NODE_LOCAL_BUS_COUNT.
  external ffi.Pointer<ffi.Void> _pHeap;

  /// If set to true, the node owns the heap allocation and _pHeap will be freed in ma_node_uninit().
  @ma_bool32()
  external int _ownsHeap;
}

final class ma_node_vtable extends ffi.Struct {
  /// Extended processing callback. This callback is used for effects that process input and output
  /// at different rates (i.e. they perform resampling). This is similar to the simple version, only
  /// they take two seperate frame counts: one for input, and one for output.
  ///
  /// On input, `pFrameCountOut` is equal to the capacity of the output buffer for each bus, whereas
  /// `pFrameCountIn` will be equal to the number of PCM frames in each of the buffers in `ppFramesIn`.
  ///
  /// On output, set `pFrameCountOut` to the number of PCM frames that were actually output and set
  /// `pFrameCountIn` to the number of input frames that were consumed.
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ma_node> pNode,
              ffi.Pointer<ffi.Pointer<ffi.Float>> ppFramesIn,
              ffi.Pointer<ma_uint32> pFrameCountIn,
              ffi.Pointer<ffi.Pointer<ffi.Float>> ppFramesOut,
              ffi.Pointer<ma_uint32> pFrameCountOut)>> onProcess;

  /// A callback for retrieving the number of a input frames that are required to output the
  /// specified number of output frames. You would only want to implement this when the node performs
  /// resampling. This is optional, even for nodes that perform resampling, but it does offer a
  /// small reduction in latency as it allows miniaudio to calculate the exact number of input frames
  /// to read at a time instead of having to estimate.
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ma_node> pNode,
                  ma_uint32 outputFrameCount,
                  ffi.Pointer<ma_uint32> pInputFrameCount)>>
      onGetRequiredInputFrameCount;

  /// The number of input buses. This is how many sub-buffers will be contained in the `ppFramesIn`
  /// parameters of the callbacks above.
  @ma_uint8()
  external int inputBusCount;

  /// The number of output buses. This is how many sub-buffers will be contained in the `ppFramesOut`
  /// parameters of the callbacks above.
  @ma_uint8()
  external int outputBusCount;

  /// Flags describing characteristics of the node. This is currently just a placeholder for some
  /// ideas for later on.
  @ma_uint32()
  external int flags;
}

typedef ma_node = ffi.Void;

/// The playback state of a node. Either started or stopped.
abstract class ma_node_state {
  static const int ma_node_state_started = 0;
  static const int ma_node_state_stopped = 1;
}

final class ma_node_input_bus extends ffi.Struct {
  /// Dummy head node for simplifying some lock-free thread-safety stuff.
  external ma_node_output_bus head;

  /// This is used to determine whether or not the input bus is finding the next node in the list. Used for thread safety when detaching output buses.
  @ma_uint32()
  external int nextCounter;

  /// Unfortunate lock, but significantly simplifies the implementation. Required for thread-safe attaching and detaching.
  @ma_spinlock()
  external int lock;

  /// The number of channels in the audio stream for this bus.
  @ma_uint8()
  external int channels;
}

final class ma_node_output_bus extends ffi.Struct {
  /// The node that owns this output bus. The input node. Will be null for dummy head and tail nodes.
  external ffi.Pointer<ma_node> pNode;

  /// The index of the output bus on pNode that this output bus represents.
  @ma_uint8()
  external int outputBusIndex;

  /// The number of channels in the audio stream for this bus.
  @ma_uint8()
  external int channels;

  /// The index of the input bus on the input. Required for detaching. Will only be used within the spinlock so does not need to be atomic.
  @ma_uint8()
  external int inputNodeInputBusIndex;

  /// Some state flags for tracking the read state of the output buffer. A combination of MA_NODE_OUTPUT_BUS_FLAG_*.
  @ma_uint32()
  external int flags;

  /// Reference count for some thread-safety when detaching.
  @ma_uint32()
  external int refCount;

  /// This is used to prevent iteration of nodes that are in the middle of being detached. Used for thread safety.
  @ma_bool32()
  external int isAttached;

  /// Unfortunate lock, but significantly simplifies the implementation. Required for thread-safe attaching and detaching.
  @ma_spinlock()
  external int lock;

  /// Linear.
  @ffi.Float()
  external double volume;

  /// If null, it's the tail node or detached.
  external ffi.Pointer<ma_node_output_bus> pNext;

  /// If null, it's the head node or detached.
  external ffi.Pointer<ma_node_output_bus> pPrev;

  /// The node that this output bus is attached to. Required for detaching.
  external ffi.Pointer<ma_node> pInputNode;
}

/// Node flags.
abstract class ma_node_flags {
  static const int MA_NODE_FLAG_PASSTHROUGH = 1;
  static const int MA_NODE_FLAG_CONTINUOUS_PROCESSING = 2;
  static const int MA_NODE_FLAG_ALLOW_NULL_INPUT = 4;
  static const int MA_NODE_FLAG_DIFFERENT_PROCESSING_RATES = 8;
  static const int MA_NODE_FLAG_SILENT_OUTPUT = 16;
}

final class ma_node_config extends ffi.Struct {
  /// Should never be null. Initialization of the node will fail if so.
  external ffi.Pointer<ma_node_vtable> vtable;

  /// Defaults to ma_node_state_started.
  @ffi.Int32()
  external int initialState;

  /// Only used if the vtable specifies an input bus count of `MA_NODE_BUS_COUNT_UNKNOWN`, otherwise must be set to `MA_NODE_BUS_COUNT_UNKNOWN` (default).
  @ma_uint32()
  external int inputBusCount;

  /// Only used if the vtable specifies an output bus count of `MA_NODE_BUS_COUNT_UNKNOWN`, otherwise  be set to `MA_NODE_BUS_COUNT_UNKNOWN` (default).
  @ma_uint32()
  external int outputBusCount;

  /// The number of elements are determined by the input bus count as determined by the vtable, or `inputBusCount` if the vtable specifies `MA_NODE_BUS_COUNT_UNKNOWN`.
  external ffi.Pointer<ma_uint32> pInputChannels;

  /// The number of elements are determined by the output bus count as determined by the vtable, or `outputBusCount` if the vtable specifies `MA_NODE_BUS_COUNT_UNKNOWN`.
  external ffi.Pointer<ma_uint32> pOutputChannels;
}

final class ma_node_graph_config extends ffi.Struct {
  @ma_uint32()
  external int channels;

  @ma_uint16()
  external int nodeCacheCapInFrames;
}

/// Data source node. 0 input buses, 1 output bus. Used for reading from a data source.
final class ma_data_source_node_config extends ffi.Struct {
  external ma_node_config nodeConfig;

  external ffi.Pointer<ma_data_source> pDataSource;
}

final class ma_data_source_node extends ffi.Struct {
  external ma_node_base base;

  external ffi.Pointer<ma_data_source> pDataSource;
}

/// Splitter Node. 1 input, many outputs. Used for splitting/copying a stream so it can be as input into two separate output nodes.
final class ma_splitter_node_config extends ffi.Struct {
  external ma_node_config nodeConfig;

  @ma_uint32()
  external int channels;

  @ma_uint32()
  external int outputBusCount;
}

final class ma_splitter_node extends ffi.Struct {
  external ma_node_base base;
}

/// Biquad Node
final class ma_biquad_node_config extends ffi.Struct {
  external ma_node_config nodeConfig;

  external ma_biquad_config biquad;
}

final class ma_biquad_node extends ffi.Struct {
  external ma_node_base baseNode;

  external ma_biquad biquad;
}

/// Low Pass Filter Node
final class ma_lpf_node_config extends ffi.Struct {
  external ma_node_config nodeConfig;

  external ma_lpf_config lpf;
}

final class ma_lpf_node extends ffi.Struct {
  external ma_node_base baseNode;

  external ma_lpf lpf;
}

/// High Pass Filter Node
final class ma_hpf_node_config extends ffi.Struct {
  external ma_node_config nodeConfig;

  external ma_hpf_config hpf;
}

final class ma_hpf_node extends ffi.Struct {
  external ma_node_base baseNode;

  external ma_hpf hpf;
}

/// Band Pass Filter Node
final class ma_bpf_node_config extends ffi.Struct {
  external ma_node_config nodeConfig;

  external ma_bpf_config bpf;
}

final class ma_bpf_node extends ffi.Struct {
  external ma_node_base baseNode;

  external ma_bpf bpf;
}

/// Notching Filter Node
final class ma_notch_node_config extends ffi.Struct {
  external ma_node_config nodeConfig;

  external ma_notch_config notch;
}

/// Notching Filter
typedef ma_notch_config = ma_notch2_config;

final class ma_notch_node extends ffi.Struct {
  external ma_node_base baseNode;

  external ma_notch2 notch;
}

/// Peaking Filter Node
final class ma_peak_node_config extends ffi.Struct {
  external ma_node_config nodeConfig;

  external ma_peak_config peak;
}

/// Peaking EQ Filter
typedef ma_peak_config = ma_peak2_config;

final class ma_peak_node extends ffi.Struct {
  external ma_node_base baseNode;

  external ma_peak2 peak;
}

/// Low Shelf Filter Node
final class ma_loshelf_node_config extends ffi.Struct {
  external ma_node_config nodeConfig;

  external ma_loshelf_config loshelf;
}

/// Low Shelf Filter
typedef ma_loshelf_config = ma_loshelf2_config;

final class ma_loshelf_node extends ffi.Struct {
  external ma_node_base baseNode;

  external ma_loshelf2 loshelf;
}

/// High Shelf Filter Node
final class ma_hishelf_node_config extends ffi.Struct {
  external ma_node_config nodeConfig;

  external ma_hishelf_config hishelf;
}

/// High Shelf Filter
typedef ma_hishelf_config = ma_hishelf2_config;

final class ma_hishelf_node extends ffi.Struct {
  external ma_node_base baseNode;

  external ma_hishelf2 hishelf;
}

final class ma_delay_node_config extends ffi.Struct {
  external ma_node_config nodeConfig;

  external ma_delay_config delay;
}

final class ma_delay_node extends ffi.Struct {
  external ma_node_base baseNode;

  external ma_delay delay;
}

final class ma_engine extends ffi.Struct {
  /// An engine is a node graph. It should be able to be plugged into any ma_node_graph API (with a cast) which means this must be the first member of this struct.
  external ma_node_graph nodeGraph;

  external ffi.Pointer<ma_resource_manager> pResourceManager;

  /// Optionally set via the config, otherwise allocated by the engine in ma_engine_init().
  external ffi.Pointer<ma_device> pDevice;

  external ffi.Pointer<ma_log> pLog;

  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int listenerCount;

  @ffi.Array.multi([4])
  external ffi.Array<ma_spatializer_listener> listeners;

  external ma_allocation_callbacks allocationCallbacks;

  @ma_bool8()
  external int ownsResourceManager;

  @ma_bool8()
  external int ownsDevice;

  /// For synchronizing access so the inlined sound list.
  @ma_spinlock()
  external int inlinedSoundLock;

  /// The first inlined sound. Inlined sounds are tracked in a linked list.
  external ffi.Pointer<ma_sound_inlined> pInlinedSoundHead;

  /// The total number of allocated inlined sound objects. Used for debugging.
  @ma_uint32()
  external int inlinedSoundCount;

  /// The number of frames to interpolate the gain of spatialized sounds across.
  @ma_uint32()
  external int gainSmoothTimeInFrames;

  @ma_uint32()
  external int defaultVolumeSmoothTimeInPCMFrames;

  @ffi.Int32()
  external int monoExpansionMode;

  external ma_engine_process_proc onProcess;

  external ffi.Pointer<ffi.Void> pProcessUserData;
}

final class ma_sound_inlined extends ffi.Struct {
  external ma_sound sound;

  external ffi.Pointer<ma_sound_inlined> pNext;

  external ffi.Pointer<ma_sound_inlined> pPrev;
}

final class ma_sound extends ffi.Struct {
  /// Must be the first member for compatibility with the ma_node API.
  external ma_engine_node engineNode;

  external ffi.Pointer<ma_data_source> pDataSource;

  /// The PCM frame index to seek to in the mixing thread. Set to (~(ma_uint64)0) to not perform any seeking.
  @ma_uint64()
  external int seekTarget;

  @ma_bool32()
  external int atEnd;

  external ma_sound_end_proc endCallback;

  external ffi.Pointer<ffi.Void> pEndCallbackUserData;

  @ma_bool8()
  external int ownsDataSource;

  external ffi.Pointer<ma_resource_manager_data_source>
      pResourceManagerDataSource;
}

/// Base node object for both ma_sound and ma_sound_group.
final class ma_engine_node extends ffi.Struct {
  /// Must be the first member for compatiblity with the ma_node API.
  external ma_node_base baseNode;

  /// A pointer to the engine. Set based on the value from the config.
  external ffi.Pointer<ma_engine> pEngine;

  /// The sample rate of the input data. For sounds backed by a data source, this will be the data source's sample rate. Otherwise it'll be the engine's sample rate.
  @ma_uint32()
  external int sampleRate;

  @ma_uint32()
  external int volumeSmoothTimeInPCMFrames;

  @ffi.Int32()
  external int monoExpansionMode;

  external ma_fader fader;

  /// For pitch shift.
  external ma_linear_resampler resampler;

  external ma_spatializer spatializer;

  external ma_panner panner;

  /// This will only be used if volumeSmoothTimeInPCMFrames is > 0.
  external ma_gainer volumeGainer;

  /// Defaults to 1.
  external ma_atomic_float volume;

  @ffi.Float()
  external double pitch;

  /// For determining whether or not the resampler needs to be updated to reflect the new pitch. The resampler will be updated on the mixing thread.
  @ffi.Float()
  external double oldPitch;

  /// For determining whether or not the resampler needs to be updated to take a new doppler pitch into account.
  @ffi.Float()
  external double oldDopplerPitch;

  /// When set to true, pitching will be disabled which will allow the resampler to be bypassed to save some computation.
  @ma_bool32()
  external int isPitchDisabled;

  /// Set to false by default. When set to false, will not have spatialisation applied.
  @ma_bool32()
  external int isSpatializationDisabled;

  /// The index of the listener this node should always use for spatialization. If set to MA_LISTENER_INDEX_CLOSEST the engine will use the closest listener.
  @ma_uint32()
  external int pinnedListenerIndex;

  external UnnamedStruct57 fadeSettings;

  /// Memory management.
  @ma_bool8()
  external int _ownsHeap;

  external ffi.Pointer<ffi.Void> _pHeap;
}

/// When setting a fade, it's not done immediately in ma_sound_set_fade(). It's deferred to the audio thread which means we need to store the settings here.
final class UnnamedStruct57 extends ffi.Struct {
  external ma_atomic_float volumeBeg;

  external ma_atomic_float volumeEnd;

  /// <-- Defaults to (~(ma_uint64)0) which is used to indicate that no fade should be applied.
  external ma_atomic_uint64 fadeLengthInFrames;

  /// <-- The time to start the fade.
  external ma_atomic_uint64 absoluteGlobalTimeInFrames;
}

/// Callback for when a sound reaches the end.
typedef ma_sound_end_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> pUserData, ffi.Pointer<ma_sound> pSound)>>;
typedef ma_engine_process_proc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void> pUserData,
            ffi.Pointer<ffi.Float> pFramesOut, ma_uint64 frameCount)>>;

/// Sound flags.
abstract class ma_sound_flags {
  /// MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM
  static const int MA_SOUND_FLAG_STREAM = 1;

  /// MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE
  static const int MA_SOUND_FLAG_DECODE = 2;

  /// MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC
  static const int MA_SOUND_FLAG_ASYNC = 4;

  /// MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_WAIT_INIT
  static const int MA_SOUND_FLAG_WAIT_INIT = 8;

  /// MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_UNKNOWN_LENGTH
  static const int MA_SOUND_FLAG_UNKNOWN_LENGTH = 16;

  /// Do not attach to the endpoint by default. Useful for when setting up nodes in a complex graph system.
  static const int MA_SOUND_FLAG_NO_DEFAULT_ATTACHMENT = 4096;

  /// Disable pitch shifting with ma_sound_set_pitch() and ma_sound_group_set_pitch(). This is an optimization.
  static const int MA_SOUND_FLAG_NO_PITCH = 8192;

  /// Disable spatialization.
  static const int MA_SOUND_FLAG_NO_SPATIALIZATION = 16384;
}

abstract class ma_engine_node_type {
  static const int ma_engine_node_type_sound = 0;
  static const int ma_engine_node_type_group = 1;
}

final class ma_engine_node_config extends ffi.Struct {
  external ffi.Pointer<ma_engine> pEngine;

  @ffi.Int32()
  external int type;

  @ma_uint32()
  external int channelsIn;

  @ma_uint32()
  external int channelsOut;

  /// Only used when the type is set to ma_engine_node_type_sound.
  @ma_uint32()
  external int sampleRate;

  /// The number of frames to smooth over volume changes. Defaults to 0 in which case no smoothing is used.
  @ma_uint32()
  external int volumeSmoothTimeInPCMFrames;

  @ffi.Int32()
  external int monoExpansionMode;

  /// Pitching can be explicitly disabled with MA_SOUND_FLAG_NO_PITCH to optimize processing.
  @ma_bool8()
  external int isPitchDisabled;

  /// Spatialization can be explicitly disabled with MA_SOUND_FLAG_NO_SPATIALIZATION.
  @ma_bool8()
  external int isSpatializationDisabled;

  /// The index of the listener this node should always use for spatialization. If set to MA_LISTENER_INDEX_CLOSEST the engine will use the closest listener.
  @ma_uint8()
  external int pinnedListenerIndex;
}

final class ma_sound_config extends ffi.Struct {
  /// Set this to load from the resource manager.
  external ffi.Pointer<ffi.Char> pFilePath;

  /// Set this to load from the resource manager.
  external ffi.Pointer<ffi.WChar> pFilePathW;

  /// Set this to load from an existing data source.
  external ffi.Pointer<ma_data_source> pDataSource;

  /// If set, the sound will be attached to an input of this node. This can be set to a ma_sound. If set to NULL, the sound will be attached directly to the endpoint unless MA_SOUND_FLAG_NO_DEFAULT_ATTACHMENT is set in `flags`.
  external ffi.Pointer<ma_node> pInitialAttachment;

  /// The index of the input bus of pInitialAttachment to attach the sound to.
  @ma_uint32()
  external int initialAttachmentInputBusIndex;

  /// Ignored if using a data source as input (the data source's channel count will be used always). Otherwise, setting to 0 will cause the engine's channel count to be used.
  @ma_uint32()
  external int channelsIn;

  /// Set this to 0 (default) to use the engine's channel count. Set to MA_SOUND_SOURCE_CHANNEL_COUNT to use the data source's channel count (only used if using a data source as input).
  @ma_uint32()
  external int channelsOut;

  /// Controls how the mono channel should be expanded to other channels when spatialization is disabled on a sound.
  @ffi.Int32()
  external int monoExpansionMode;

  /// A combination of MA_SOUND_FLAG_* flags.
  @ma_uint32()
  external int flags;

  /// The number of frames to smooth over volume changes. Defaults to 0 in which case no smoothing is used.
  @ma_uint32()
  external int volumeSmoothTimeInPCMFrames;

  /// Initializes the sound such that it's seeked to this location by default.
  @ma_uint64()
  external int initialSeekPointInPCMFrames;

  @ma_uint64()
  external int rangeBegInPCMFrames;

  @ma_uint64()
  external int rangeEndInPCMFrames;

  @ma_uint64()
  external int loopPointBegInPCMFrames;

  @ma_uint64()
  external int loopPointEndInPCMFrames;

  @ma_bool32()
  external int isLooping;

  /// Fired when the sound reaches the end. Will be fired from the audio thread. Do not restart, uninitialize or otherwise change the state of the sound from here. Instead fire an event or set a variable to indicate to a different thread to change the start of the sound. Will not be fired in response to a scheduled stop with ma_sound_set_stop_time_*().
  external ma_sound_end_proc endCallback;

  external ffi.Pointer<ffi.Void> pEndCallbackUserData;

  external ma_resource_manager_pipeline_notifications initNotifications;

  /// Deprecated. Use initNotifications instead. Released when the resource manager has finished decoding the entire sound. Not used with streams.
  external ffi.Pointer<ma_fence> pDoneFence;
}

/// A sound group is just a sound.
typedef ma_sound_group_config = ma_sound_config;

final class ma_engine_config extends ffi.Struct {
  /// Can be null in which case a resource manager will be created for you.
  external ffi.Pointer<ma_resource_manager> pResourceManager;

  external ffi.Pointer<ma_context> pContext;

  /// If set, the caller is responsible for calling ma_engine_data_callback() in the device's data callback.
  external ffi.Pointer<ma_device> pDevice;

  /// The ID of the playback device to use with the default listener.
  external ffi.Pointer<ma_device_id> pPlaybackDeviceID;

  /// Can be null. Can be used to provide a custom device data callback.
  external ma_device_data_proc dataCallback;

  external ma_device_notification_proc notificationCallback;

  /// When set to NULL, will use the context's log.
  external ffi.Pointer<ma_log> pLog;

  /// Must be between 1 and MA_ENGINE_MAX_LISTENERS.
  @ma_uint32()
  external int listenerCount;

  /// The number of channels to use when mixing and spatializing. When set to 0, will use the native channel count of the device.
  @ma_uint32()
  external int channels;

  /// The sample rate. When set to 0 will use the native channel count of the device.
  @ma_uint32()
  external int sampleRate;

  /// If set to something other than 0, updates will always be exactly this size. The underlying device may be a different size, but from the perspective of the mixer that won't matter.
  @ma_uint32()
  external int periodSizeInFrames;

  /// Used if periodSizeInFrames is unset.
  @ma_uint32()
  external int periodSizeInMilliseconds;

  /// The number of frames to interpolate the gain of spatialized sounds across. If set to 0, will use gainSmoothTimeInMilliseconds.
  @ma_uint32()
  external int gainSmoothTimeInFrames;

  /// When set to 0, gainSmoothTimeInFrames will be used. If both are set to 0, a default value will be used.
  @ma_uint32()
  external int gainSmoothTimeInMilliseconds;

  /// Defaults to 0. Controls the default amount of smoothing to apply to volume changes to sounds. High values means more smoothing at the expense of high latency (will take longer to reach the new volume).
  @ma_uint32()
  external int defaultVolumeSmoothTimeInPCMFrames;

  external ma_allocation_callbacks allocationCallbacks;

  /// When set to true, requires an explicit call to ma_engine_start(). This is false by default, meaning the engine will be started automatically in ma_engine_init().
  @ma_bool32()
  external int noAutoStart;

  /// When set to true, don't create a default device. ma_engine_read_pcm_frames() can be called manually to read data.
  @ma_bool32()
  external int noDevice;

  /// Controls how the mono channel should be expanded to other channels when spatialization is disabled on a sound.
  @ffi.Int32()
  external int monoExpansionMode;

  /// A pointer to a pre-allocated VFS object to use with the resource manager. This is ignored if pResourceManager is not NULL.
  external ffi.Pointer<ma_vfs> pResourceManagerVFS;

  /// Fired at the end of each call to ma_engine_read_pcm_frames(). For engine's that manage their own internal device (the default configuration), this will be fired from the audio thread, and you do not need to call ma_engine_read_pcm_frames() manually in order to trigger this.
  external ma_engine_process_proc onProcess;

  /// User data that's passed into onProcess.
  external ffi.Pointer<ffi.Void> pProcessUserData;
}

typedef ma_sound_group = ma_sound;

const int MA_VERSION_MAJOR = 0;

const int MA_VERSION_MINOR = 11;

const int MA_VERSION_REVISION = 18;

const String MA_VERSION_STRING = '0.11.18';

const int MA_SIZEOF_PTR = 8;

const int MA_TRUE = 1;

const int MA_FALSE = 0;

const int MA_SIZE_MAX = 4294967295;

const int MA_SIMD_ALIGNMENT = 32;

const int MA_MIN_CHANNELS = 1;

const int MA_MAX_CHANNELS = 254;

const int MA_MAX_FILTER_ORDER = 8;

const int MA_MAX_LOG_CALLBACKS = 4;

const int MA_CHANNEL_INDEX_NULL = 255;

const int MA_DATA_SOURCE_SELF_MANAGED_RANGE_AND_LOOP_POINT = 1;

const int MA_BACKEND_COUNT = 15;

const int MA_DATA_FORMAT_FLAG_EXCLUSIVE_MODE = 2;

const int MA_MAX_DEVICE_NAME_LENGTH = 255;

const int MA_JOB_TYPE_RESOURCE_MANAGER_QUEUE_FLAG_NON_BLOCKING = 1;

const int MA_RESOURCE_MANAGER_MAX_JOB_THREAD_COUNT = 64;

const int MA_MAX_NODE_BUS_COUNT = 254;

const int MA_MAX_NODE_LOCAL_BUS_COUNT = 2;

const int MA_NODE_BUS_COUNT_UNKNOWN = 255;

const int MA_ENGINE_MAX_LISTENERS = 4;

const int MA_LISTENER_INDEX_CLOSEST = 255;

const int MA_SOUND_SOURCE_CHANNEL_COUNT = 4294967295;
